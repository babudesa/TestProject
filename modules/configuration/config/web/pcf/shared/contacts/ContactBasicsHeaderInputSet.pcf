<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../pcf.xsd">
  <InputSet
    id="ContactBasicsHeaderInputSet"
    visible="showRoles and claimContact != null">
    <!-- NOTE: This shared section requires a contact.ContactHandle, rather than a Contact, because it's
    possible for some actions on a contact detail screen to fundamentally change the contact. In particular, syncing
    a contact that leads to a downcast of that contact to a more specific subtype causes the original contact to
    become invalid. To protect against this, contacts on shared sections should be wrapped in a ContactHandle. If the
    contact is fundamentally changed, then only the handle needs to be updated, and all existing references will see
    the new contact.

    As a shortcut for "contactHandle.Contact", this shared section defines a read-only property which can be used to
    access the most current value of the contact. -->
    <Require
      name="contactHandle"
      type="contact.ContactHandle"/>
    <Require
      name="claimContact"
      type="ClaimContact"/>
    <Require
      name="showRoles"
      type="boolean"/>
    <Require
      name="linkStatus"
      type="contact.LinkStatus"/>
    <Label
      label="displaykey.Web.ContactDetail.ObsoleteContact"
      visible="contactHandle.Contact.ObsoletePolicyContactExt"/>
    <Label
      label="linkStatus.LinkStatusMessage"/>
    <!-- The following label shows the related contacts that do not match the ones in the addressbook -->
    <Label
      label="linkStatus.DifferentRelationshipsMessage"
      visible="linkStatus.DifferentRelationshipsMessage != null"/>
    <!-- The following label shows the related contacts that do not match the ones in the addressbook -->
    <Label
      id="AddressRelatedContacts"
      label="displaykey.Web.ContactDetail.AdditionalRelatedContacts"
      visible="hasABRelatedContacts()"/>
    <!-- We disable the validationExpression if the ClaimContact is being deleted. This
          happens if one of the ClaimContacts being deleted is the selected ClaimContact. -->
    <ListViewInput
      boldLabel="true"
      def="EditableClaimContactRolesLV(claimContact)"
      editable="claimContact.Claim.Policy.Verified || claimContact.Contact.AddressBookUID != null"
      label="displaykey.Web.ContactBasicsHeaderDV.Roles"
      validationExpression="claimparties.ClaimContactUtil.isBeingDeleted(claimContact) ? null : claimContact.checkRoleChanges().formatUserMessage()">
      <Toolbar>
        <IteratorButtons/>
      </Toolbar>
    </ListViewInput>
    <Code><![CDATA[function hasABRelatedContacts() : boolean {
  if(contactHandle.Contact.AddressBookUID != null){
    uses soap.MailingAddressToRelatedContacts.api.MailingAddressToRelatedContactsAPI
    uses gw.api.soap.GWAuthenticationHandler

    var api = new MailingAddressToRelatedContactsAPI()
    api.addHandler(new GWAuthenticationHandler("su", "gw"))
  
    return api.hasPlaceRelatedContacts(contactHandle.Contact.AddressBookUID)
  } else {
   return false 
  }
}]]></Code>
  </InputSet>
</PCF>