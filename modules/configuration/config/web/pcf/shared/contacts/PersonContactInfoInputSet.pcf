<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../pcf.xsd">
  <InputSet
    id="PersonContactInfoInputSet">
    <!-- NOTE: This shared section requires a contact.ContactHandle, rather than a Contact, because it's
    possible for some actions on a contact detail screen to fundamentally change the contact. In particular, syncing
    a contact that leads to a downcast of that contact to a more specific subtype causes the original contact to
    become invalid. To protect against this, contacts on shared sections should be wrapped in a ContactHandle. If the
    contact is fundamentally changed, then only the handle needs to be updated, and all existing references will see
    the new contact.

    As a shortcut for "contactHandle.Contact", this shared section defines a read-only property which can be used to
    access the most current value of the contact. -->
    <Require
      name="contactHandle"
      type="contact.ContactHandle"/>
    <Require
      name="claimContact"
      type="ClaimContact"/>
    <Variable
      initialValue="claimContact.Claim!=null ? claimContact.Claim.setInitalValuesWC(): null"
      name="ContactProhibited"/>
    <InputDivider/>
    <Label
      label="displaykey.Web.ContactDetail.ContactInfo"/>
    <Input
      editable="!Person.Preferred or User.util.getCurrentUser().hasCreatePreferred()"
      id="ContactProhibited"
      label="displaykey.Web.ContactDetail.ContactProhibited"
      value="claimContact.ContactProhibited"
      visible="claimContact != null and claimContact.isClaimant()"/>
    <TextInput
      editable="!Person.Preferred or User.util.getCurrentUser().hasCreatePreferred()"
      id="Work"
      inputMask="Person.getPhoneMask()"
      label="displaykey.Web.ContactDetail.Phone.Work"
      validationExpression="Person.isIntlPhoneValid(Person.WorkPhone) ? (Person.isPhoneValid(Person.WorkPhone) ? null : displaykey.Validator.Phone(&quot;Business&quot;)) : displaykey.Validator.IntlPhone(&quot;Business&quot;) "
      value="Person.WorkPhone"/>
    <TextInput
      editable="!Person.Preferred or User.util.getCurrentUser().hasCreatePreferred()"
      id="Home"
      inputMask="Person.getPhoneMask()"
      label="displaykey.Web.ContactDetail.Phone.Home"
      validationExpression="Person.isIntlPhoneValid(Person.HomePhone) ? (Person.isPhoneValid(Person.HomePhone) ? null : displaykey.Validator.Phone(&quot;Home&quot;)) : displaykey.Validator.IntlPhone(&quot;Home&quot;)"
      value="Person.HomePhone"/>
    <TextInput
      editable="!Person.Preferred or User.util.getCurrentUser().hasCreatePreferred()"
      id="Cell"
      inputMask="Person.getPhoneMask()"
      label="displaykey.Web.ContactDetail.Phone.Cell"
      validationExpression="Person.isIntlPhoneValid(Person.CellPhoneExt) ? (Person.isPhoneValid(Person.CellPhoneExt) ? null : displaykey.Validator.Phone(&quot;Mobile&quot;)) : displaykey.Validator.IntlPhone(&quot;Mobile&quot;)"
      value="Person.CellPhoneExt"/>
    <TextInput
      editable="!Person.Preferred or User.util.getCurrentUser().hasCreatePreferred()"
      id="Toll"
      inputMask="Person.getPhoneMask()"
      label="displaykey.Web.ContactDetail.Phone.Toll"
      validationExpression="Person.isIntlPhoneValid(Person.TollFreeNumberExt) ? (Person.isPhoneValid(Person.TollFreeNumberExt) ? null : displaykey.Validator.Phone(&quot;Toll-Free Number&quot;)) : displaykey.Validator.IntlPhone(&quot;Toll-Free Number&quot;)"
      value="Person.TollFreeNumberExt"/>
    <TextInput
      editable="!Person.Preferred or User.util.getCurrentUser().hasCreatePreferred()"
      id="Fax"
      inputMask="Person.getFaxPhoneMask()"
      label="displaykey.Web.ContactDetail.Phone.Fax"
      validationExpression="Person.isIntlPhoneValid(Person.FaxPhone) ? (Person.isPhoneValid(Person.FaxPhone) ? null : displaykey.Validator.Phone(&quot;Fax Number&quot;)) : displaykey.Validator.IntlFaxPhone(&quot;Fax Number&quot;)"
      value="Person.FaxPhone"/>
    <Input
      editable="!Person.Preferred or User.util.getCurrentUser().hasCreatePreferred()"
      id="PrimaryPhone"
      label="displaykey.Web.ContactDetail.Phone.PrimaryPhone"
      validationExpression="validatePrimaryPhone()"
      value="Person.PrimaryPhone">
      <Reflect
        triggerIds="Work,Home,Cell"
        value="javascript:getNewPrimaryPhoneValue(REFLECTOR.value, [VALUE1, VALUE2, VALUE3], ['work', 'home', 'mobile'])"/>
    </Input>
    <InputDivider/>
    <Label
      label="displaykey.Web.ContactDetail.Email"/>
    <TextInput
      editable="true"
      formatType="email"
      id="Primary"
      label="displaykey.Web.ContactDetail.Email.Primary"
      value="Person.EmailAddress1"/>
    <TextInput
      editable="!Person.Preferred or User.util.getCurrentUser().hasCreatePreferred()"
      formatType="email"
      id="Secondary"
      label="displaykey.Web.ContactDetail.Email.Secondary"
      value="Person.EmailAddress2"/>
    <Code><![CDATA[property get Person() : Person { return contactHandle.Contact as Person; }

function validatePrimaryPhone():String{
  if (Person.PrimaryPhone == null or 
      (Person.PrimaryPhone == "work" and Person.WorkPhone != null) or 
      (Person.PrimaryPhone == "home" and Person.HomePhone != null) or 
      (Person.PrimaryPhone == "mobile" and Person.CellPhoneExt != null)) { 
    return null;
  }else{
    return displaykey.Web.ContactDetail.Phone.PrimaryPhone.Error;
  }
}]]></Code>
  </InputSet>
</PCF>