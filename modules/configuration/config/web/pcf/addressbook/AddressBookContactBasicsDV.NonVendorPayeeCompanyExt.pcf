<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../pcf.xsd">
  <DetailViewPanel
    editable="!contact.Preferred or User.util.getCurrentUser().hasCreatePreferred()"
    id="AddressBookContactBasicsDV"
    mode="NonVendorPayeeCompanyExt">
    <Require
      name="contact"
      type="Contact"/>
    <Require
      name="externalContactSource"
      type="contact.ExternalContactSource"/>
    <Variable
      initialValue="contact.getSortedCategoryScores()"
      name="sortedCategoryScores"
      type="ContactCategoryScore[]"/>
    <Variable
      initialValue="sortedCategoryScores != null AND sortedCategoryScores.length &gt; 0"
      name="hasCategoryScores"
      type="Boolean"/>
    <Variable
      initialValue="setInitialValues()"
      name="initialValues"
      recalculateOnRefresh="true"/>
    <Variable
      initialValue="contact.updateCloseIndicator()"
      name="UpdateCloseIndicator"
      type="void"/>
    <InputColumn>
      <Label
        label="asCompany().getSubtype().DisplayName"/>
      <Input
        editable="true"
        id="OrganizationName"
        label="displaykey.Web.ContactDetail.Name.OrganizationName"
        required="true"
        value="asCompany().Name"/>
      <Input
        editable="true"
        id="OrganizationName2"
        label="displaykey.Web.ContactDetail.Name.OrganizationName2"
        required="false"
        value="asCompany().Name2Ext"
        visible="asCompany().getSubtype() != &quot;Company&quot;"/>
      <Input
        editable="true"
        id="DoingBusinessAsExt"
        label="displaykey.Web.ContactDetail.Name.DoingBusinessAs"
        required="false"
        value="asCompany().DoingBusinessAsExt"/>
      <Input
        editable="User.util.getCurrentUser().hasUserRole(&quot;Compliance Accounting&quot;)"
        id="CloseDate"
        label="displaykey.Web.ContactDetail.CloseDate"
        onChange="contact.updateCloseIndicator()"
        postOnChange="true"
        value="Contact.CloseDateExt"
        visible="asCompany().getSubtype() != &quot;Company&quot;"/>
      <InputSetRef
        def="AddressBookNonVendorPayeeBusinessContactInfoInputSet(contact, externalContactSource)"/>
      <!-- <InputDivider
        visible="hasCategoryScores OR (contact.Score != null)"/> -->
    </InputColumn>
    <InputColumn>
      <Label
        label="displaykey.Web.PrimaryAddressDV"/>
      <InputSetRef
        def="AddressInputSet(contact.AddressOwner)"
        mode="contact.AddressOwner.InputSetMode"/>
      <!-- following input set for tax info -->
      <InputSet>
        <InputDivider/>
        <Label
          label="displaykey.Web.ContactDetail.TaxInfo"/>
        <!-- following input for Companies that are not foreign and not GAI vendors -->
        <Input
          editable="!asCompany().VerifiedPolicyContactExt and asCompany().canEditTaxInfo() and !asCompany().FormerVerifiedContactExt"
          id="EIN"
          label="displaykey.Web.ContactDetail.Name.TaxID.EIN"
          postOnChange="true"
          required="!(contact typeis Ex_ForeignCoVendor)"
          validationExpression="validateNonVendorTaxID()"
          value="contact.TaxID"
          visible="!(contact.isForeign() or contact typeis Ex_GAIVendor)"/>
        <!-- following input for companies that are foreign -->
        <Input
          editable="!asCompany().VerifiedPolicyContactExt and asCompany().canEditTaxInfo() and !asCompany().FormerVerifiedContactExt"
          id="W8"
          label="displaykey.Web.ContactDetail.Name.TaxID.W8"
          postOnChange="true"
          required="true"
          validationExpression="validateForeignSSN()"
          value="contact.TaxID"
          visible="(contact.isForeign())"/>
        <!-- following input for companies that are GAI vendors -->
        <Input
          editable="!asCompany().VerifiedPolicyContactExt and asCompany().canEditTaxInfo() and !asCompany().FormerVerifiedContactExt"
          id="ComplAcctgNumber"
          label="displaykey.Web.ContactDetail.Name.ComplAcctgNumber"
          postOnChange="true"
          required="true"
          validationExpression="asCompany().TaxID == null ? null : !asCompany().TaxID.matches(&quot;[a-zA-Z0-9]{9}&quot;) or asCompany().TaxID.matches(&quot;[9]{9}&quot;) or asCompany().TaxID.matches(&quot;[0]{9}&quot;) ? &quot;Compliance Accounting Number must be filled in, cannot contain all 9's or zeros, may contain characters&quot; : null"
          value="contact.TaxID"
          visible="(contact typeis Ex_GAIVendor)"/>
        <Input
          editable="!asCompany().VerifiedPolicyContactExt and asCompany().canEditTaxInfo() and !asCompany().FormerVerifiedContactExt"
          id="TaxStatusCode"
          label="displaykey.GAIC.ContactDetail.AdditionalInfo.TaxStatusCode"
          required="true"
          validationExpression="asCompany().Ex_TaxStatusCode != null ? asCompany().checkContactTaxStatusUpdate(): asCompany().Ex_TaxStatusCode"
          value="asCompany().Ex_TaxStatusCode"/>
        <Input
          editable="true"
          id="TaxReportingName"
          label="displaykey.Web.ContactDetail.TaxReportingName"
          required="false"
          validationExpression="(contact .Preferred and contact.Ex_TaxReportingName == null) ? &quot;Enter a Tax Reporting Name for a Preferred Vendor&quot; : null"
          value="asCompany().Ex_TaxReportingName"/>
      </InputSet>
    </InputColumn>
    <!-- <InputFooterSection>
      <InputDivider/>
    </InputFooterSection> -->
    <Code><![CDATA[function asCompany() : Company {
        return contact as Company;
      }
      
function setInitialValues(){
  contact.setLoggedInUserId();
  contact.setLoggedInUserBUName();
  contact.setLoggedInUserCompAcct();
}
function validateTaxID():String{ 
  var str : String = null
if(asCompany().TaxID == null)
return str; 
else { 
  if(!(asCompany().TaxID.matches("[0-9]{9}")) or (asCompany().TaxID.matches("[0]{9}") || asCompany().TaxID.matches("[1]{9}") || asCompany().TaxID.matches("[2]{9}") 
      || asCompany().TaxID.matches("[3]{9}") || asCompany().TaxID.matches("[4]{9}") || asCompany().TaxID.matches("[5]{9}") || asCompany().TaxID.matches("[6]{9}") 
      || asCompany().TaxID.matches("[7]{9}") || asCompany().TaxID.matches("[8]{9}") || asCompany().TaxID.matches("[9]{9}")))
    str = displaykey.Web.ContactDetail.Name.TaxID.EIN.Invalid 
    }
 return str;
}

// Defect 6791 - cmullin - 5.9.14 - added unique validation for NonVendorPayeeCompanyExt and NonVendorPayeePersonExt
function validateNonVendorTaxID():String{ 
  var str : String = null
  if(asCompany().TaxID == null)
    return str; 
  else { 
    if(!(asCompany().TaxID.matches("[a-zA-Z0-9]{9}"))){
      str = displaykey.Web.ContactDetail.Name.TaxID.EIN.NonVendorInvalid
    }
  return str;
  }
}

// C.McDonald : 9/2013 : need to allow letters for GAI Vendors and Foreign Vendors
function validateForeignSSN(): String{
    var str : String = null
    if(asCompany().TaxID == null){
      str = null 
      }
      else {
        if(!(asCompany().TaxID.matches("[a-zA-Z0-9]{9}")) or (asCompany().TaxID.matches("[0]{9}") || asCompany().TaxID.matches("[1]{9}") || asCompany().TaxID.matches("[2]{9}") 
            || asCompany().TaxID.matches("[3]{9}") || asCompany().TaxID.matches("[4]{9}") || asCompany().TaxID.matches("[5]{9}") || asCompany().TaxID.matches("[6]{9}") 
            || asCompany().TaxID.matches("[7]{9}") || asCompany().TaxID.matches("[8]{9}") || asCompany().TaxID.matches("[9]{9}"))) 
          str = displaykey.Web.ContactDetail.Name.TaxID.EIN.W8Invalid
      }
    return str
}]]></Code>
  </DetailViewPanel>
</PCF>