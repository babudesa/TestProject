<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../pcf.xsd">
  <!-- This file automatically generated from nvv_policy.xml -->
  <DetailViewPanel
    editable="!Coverage.Policy.Verified"
    id="CoverageDetailsPropertyDV"
    mode="PIMINMARINE">
    <Require
      name="Coverage"
      type="PropertyCoverage"/>
    <Variable
      initialValue="Coverage"
      name="PropertyCoverage"
      type="PropertyCoverage"/>
    <Variable
      initialValue="Coverage.setClassDefaults()"
      name="setDefaults"
      recalculateOnRefresh="true"/>
    <Variable
      initialValue="Coverage.policyCoveragedates()"
      name="setcoveragedates"
      recalculateOnRefresh="true"/>
    <Variable
      initialValue="Coverage.Policy.Claim.ClaimNumber"
      name="ClaimNumber"
      type="String"/>
    <InputColumn>
      <RangeInput
        editable="PropertyCoverage.notUsedOnExposure()"
        filter="gw.api.util.TypecodeMapperUtil.getTypecodeMapper().getInternalCodeByAlias(&quot;EDWRiskType&quot;, &quot;CoverageRisk&quot;, VALUE as java.lang.String)==((PropertyCoverage.RiskUnit as LocationBasedRU).Property.RiskTypeExt as java.lang.String)"
        id="CoverageType"
        label="displaykey.LV.Policy.PolicyCoverages.CoverageType"
        onChange="resetInformation(); if (((Coverage.CauseOfLossExt != null AND       util.gaic.subline.Subline.checkAFPLossCauseRequired(PropertyCoverage)) || (!util.gaic.subline.Subline.checkAFPLossCauseRequired(PropertyCoverage)))) {PropertyCoverage.SublineExt = util.gaic.subline.Subline.getSublineForCoverage(PropertyCoverage)}"
        optionLabel="(Coverage.Type!= null and Coverage.Policy.Verified) ? Coverage.covTypeDisplayName() : VALUE.toString()"
        postOnChange="true"
        required="true"
        value="PropertyCoverage.Type"
        valueRange="Coverage.getCoverages()"
        visible="!(PropertyCoverage.RiskUnit typeis JobsiteRUExt)"/>
      <RangeInput
        editable="PropertyCoverage.notUsedOnExposure()"
        filter="gw.api.util.TypecodeMapperUtil.getTypecodeMapper().getInternalCodeByAlias(&quot;EDWRiskType&quot;, &quot;CoverageRisk&quot;, VALUE as java.lang.String)==((PropertyCoverage.RiskUnit as LocationBasedRU).Property.RiskTypeExt as java.lang.String) and VALUE.hasCategory(PolicyType.TC_IMP)"
        id="CoverageTypeJobsite"
        label="displaykey.LV.Policy.PolicyCoverages.CoverageType"
        onChange="resetInformation(); if (((Coverage.CauseOfLossExt != null AND       util.gaic.subline.Subline.checkAFPLossCauseRequired(PropertyCoverage)) || (!util.gaic.subline.Subline.checkAFPLossCauseRequired(PropertyCoverage)))) {PropertyCoverage.SublineExt = util.gaic.subline.Subline.getSublineForCoverage(PropertyCoverage)}"
        optionLabel="(Coverage.Type!= null and Coverage.Policy.Verified) ? Coverage.covTypeDisplayName() : VALUE.toString()"
        postOnChange="true"
        required="true"
        value="PropertyCoverage.Type"
        valueRange="Coverage.getCoverages()"
        visible="PropertyCoverage.RiskUnit typeis JobsiteRUExt"/>
      <RangeInput
        editable="true"
        id="RiskState"
        label="displaykey.GAIC.Policy.PolicyCoverages.RiskState"
        onChange="if (Coverage.Type !=null AND       ((Coverage.CauseOfLossExt != null AND util.gaic.subline.Subline.checkAFPLossCauseRequired(PropertyCoverage)) || (!util.gaic.subline.Subline.checkAFPLossCauseRequired(PropertyCoverage)))) {PropertyCoverage.SublineExt = util.gaic.subline.Subline.getSublineForCoverage(PropertyCoverage)}"
        postOnChange="true"
        required="Coverage.Policy.insured.PrimaryAddress.Country==&quot;US&quot;"
        value="PropertyCoverage.State"
        valueRange="util.custom_Ext.getStates.getUSStatesOnly()"/>
      <TypeKeyInput
        editable="true"
        id="SPPDetail"
        label="displaykey.GAIC.Policy.PolicyCoverages.SchedPerPropDetail"
        value="Coverage.HighValueItemExt.SPPDetailExt"
        visible="false"/>
      <!-- sprint 15 ER visible="Coverage.Type==&quot;ab_FPE&quot; AND Coverage.HighValueItemExt.SchedPerPropTypeExt!=null"/> -->
      <Input
        editable="true"
        id="SPPDesc"
        label="Coverage.isSPP() ? displaykey.GAIC.Policy.PolicyCoverages.SchedPerPropDesc : displaykey.NVV.Exposure.SubView.PropertyDamage.Exposure.SFPPDescription"
        value="Coverage.HighValueItemExt.SPPDescriptionExt"
        visible="Coverage.isSPP() || Coverage.isSFPP()"/>
      <!-- <TypeKeyInput
        editable="true"
        filter="filterCauseOfLoss(VALUE)"
        id="CauseOfLoss"
        label="displaykey.GAIC.Policy.PolicyCoverages.Causeofloss"
        onChange="if (Coverage.Type !=null AND    PropertyCoverage.State!=null) {PropertyCoverage.SublineExt = util.gaic.subline.Subline.getSublineForCoverage(PropertyCoverage, util.gaic.subline.Subline.checkAFPLossCauseRequired(PropertyCoverage))}"
        postOnChange="true"
        required="util.gaic.subline.Subline.checkAFPLossCauseRequired(PropertyCoverage)"
        showNoneSelected="false"
        value="PropertyCoverage.CauseOfLossExt"
        visible="true"/> -->
      <!-- sprint 15 ER visible="(Coverage.Type=="ab_SCPROP" || Coverage.Type=="ab_FPE") AND Coverage.HighValueItemExt.SchedPerPropTypeExt!=null"/> -->
      <Input
        id="Subline"
        label="displaykey.GAIC.Policy.PolicyCoverages.Subline"
        required="false"
        value="PropertyCoverage.SublineExt"/>
      <Input
        id="ClassCode"
        label="displaykey.LV.Policy.EditablePropertyCoverages.ClassCode"
        value="PropertyCoverage.ClassCodeExt"/>
      <Input
        id="ClassDesc"
        label="displaykey.LV.Policy.EditablePropertyCoverages.ClassDesc"
        value="PropertyCoverage.ClassCodeDescExt"/>
      <Input
        editable="true"
        id="EffDate"
        label="displaykey.LV.Policy.EditablePropertyCoverages.EffDate"
        postOnChange="true"
        requestValidationExpression="ClaimNumber == null or ClaimNumber.startsWith(&quot;T&quot;) ? PropertyCoverage.effDateWarn() : null"
        validationExpression="PropertyCoverage.effDateError() ? displaykey.LV.Policy.EditablePropertyCoverages.DateValidation(&quot;Effective&quot;, util.custom_Ext.DateTime.formatDateString(PropertyCoverage.Policy.EffectiveDate, PropertyCoverage.Policy.ExpirationDate)) : (util.custom_Ext.DateTime.isDateAfter(PropertyCoverage.EffectiveDate, PropertyCoverage.ExpirationDate) ? displaykey.Web.Dates.EffDateAfterExpDate : null)"
        value="PropertyCoverage.EffectiveDate"/>
      <Input
        editable="true"
        id="ExpDate"
        label="displaykey.LV.Policy.EditablePropertyCoverages.ExpDate"
        postOnChange="true"
        requestValidationExpression="ClaimNumber == null or ClaimNumber.startsWith(&quot;T&quot;) ? PropertyCoverage.expDateWarn() : null"
        validationExpression="PropertyCoverage.expDateError() ? displaykey.LV.Policy.EditablePropertyCoverages.DateValidation(&quot;Expiration&quot;, util.custom_Ext.DateTime.formatDateString(PropertyCoverage.Policy.EffectiveDate, PropertyCoverage.Policy.ExpirationDate)) : (util.custom_Ext.DateTime.isDateAfter(PropertyCoverage.EffectiveDate, PropertyCoverage.ExpirationDate) ? displaykey.Web.Dates.EffDateAfterExpDate : null)"
        value="PropertyCoverage.ExpirationDate"/>
    </InputColumn>
    <InputColumn>
      <InputSetRef
        def="CoverageLimitsInputSet(Coverage)"
        mode="Coverage.Policy.Claim.LossType"/>
    </InputColumn>
    <InputFooterSection>
      <ListViewInput
        def="EditableCoverageReinsuranceLV(Coverage)"
        id="Reinsurance"
        label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Reinsurance"
        labelAbove="true">
        <Toolbar>
          <IteratorButtons/>
        </Toolbar>
      </ListViewInput>
      <ListViewInput
        def="EditableScheduledLienholdersLV(Coverage)"
        editable="Coverage.Type!=null"
        id="Lienholders"
        label="displaykey.NVV.Policy.LocationDetail.Property.Lienholders"
        labelAbove="true"
        validationExpression="Coverage.noLienDuplicates()? Coverage.Policy.Claim.touch(): &quot;Duplicate Lienholders are not permitted. Please remove the duplicate entry or select a different Contact.&quot; "
        visible="Coverage.isSFPP() and Coverage.Policy.Verified">
        <Toolbar>
          <IteratorButtons/>
        </Toolbar>
      </ListViewInput>
      <ListViewInput
        def="EditableScheduledAddInterestsLV(Coverage)"
        editable="Coverage.Type!=null"
        id="AddInterests"
        label="displaykey.NVV.Policy.LocationDetail.Property.AdditionalInterest"
        labelAbove="true"
        validationExpression="Coverage.Policy.checkCoveredPartyConstraints().formatUserMessage(); Coverage.Policy.Claim.touch(); return null"
        visible="Coverage.isSFPP() and Coverage.Policy.Verified">
        <!-- sprint 15 ER visible="Coverage.Type==&quot;ab_SCPROP&quot;">  || Coverage.Type==&quot;ab_FPE&quot;"> -->
        <Toolbar>
          <IteratorButtons/>
        </Toolbar>
      </ListViewInput>
    </InputFooterSection>
    <Code><![CDATA[function setVisible() :boolean {
				if(PropertyCoverage.Type.Code=="ab_FPAD") { 
					return true 
				} else { 
					return false 
				} 
			}
			function resetInformation(){
				Coverage.HighValueItemExt.SPPDescriptionExt=null
				Coverage.HighValueItemExt.SPPDetailExt=null
				//Coverage.HighValueItemExt.SchedPerPropTypeExt=null
				//Coverage.HighValueItemExt.CauseOfLossExt=null
			} 
			
			function effDateErr(effDate : DateTime, expDate : DateTime) : String{
				if(effDate != null){
					if(expDate == null){
						return displaykey.LV.Policy.PropertyCoverages.ADCoverage.effDateSetExpDateNotSet
					}
					if(gw.api.util.DateUtil.compareIgnoreTime(effDate, expdate) > 0){
						return displaykey.LV.Policy.PropertyCoverages.ADCoverage.basisEffDateAfterBasisExpDate
					}
					if(PropertyCoverage.EffectiveDate != null and PropertyCoverage.ExpirationDate != null)
					{
						if(gw.api.util.DateUtil.compareIgnoreTime(PropertyCoverage.EffectiveDate, effDate) > 0)
						{
							return displaykey.LV.Policy.PropertyCoverages.ADCoverage.basisEffDateInvalid
						}
						else if(gw.api.util.DateUtil.compareIgnoreTime(PropertyCoverage.ExpirationDate, effDate) < 0)
						{
							return displaykey.LV.Policy.PropertyCoverages.ADCoverage.basisEffDateInvalid
						}
					}
				}
				return null;
			}
			
			function expDateErr(expDate : DateTime, effDate : DateTime) : String{
				if(expDate != null){
					if(effDate == null){
						return displaykey.LV.Policy.PropertyCoverages.ADCoverage.expDateSetEffDateNotSet
					}
					else if(gw.api.util.DateUtil.compareIgnoreTime(effDate, expdate) > 0){
						return displaykey.LV.Policy.PropertyCoverages.ADCoverage.basisEffDateAfterBasisExpDate
					}
					if(PropertyCoverage.EffectiveDate != null and PropertyCoverage.ExpirationDate != null)
					{
						if(gw.api.util.DateUtil.compareIgnoreTime(PropertyCoverage.EffectiveDate, expDate) > 0)
						{
							return displaykey.LV.Policy.PropertyCoverages.ADCoverage.basisExpDateInvalid
						}
						else if(gw.api.util.DateUtil.compareIgnoreTime(PropertyCoverage.ExpirationDate, expDate) < 0)
						{
							return displaykey.LV.Policy.PropertyCoverages.ADCoverage.basisExpDateInvalid
						}
					}
				}
				return null;
			}]]></Code>
  </DetailViewPanel>
</PCF>