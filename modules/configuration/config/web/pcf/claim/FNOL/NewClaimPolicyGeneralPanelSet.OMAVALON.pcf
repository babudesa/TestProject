<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../pcf.xsd">
  <PanelSet
    id="NewClaimPolicyGeneralPanelSet"
    mode="OMAVALON">
    <Require
      name="Policy"
      type="Policy"/>
    <DetailViewPanel
      id="NewClaimPolicyGeneralDV">
      <Variable
        initialValue="Policy.ex_Agency"
        name="Agency"
        type="ex_Agency"/>
      <Variable
        initialValue="new ContactRole[] {&quot;Driver&quot;}"
        name="userRoles"
        type="ContactRole[]"/>
      <InputColumn>
        <Label
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Basics"/>
        <Input
          editable="!Policy.Verified"
          id="PolicyNumber"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.BondNumber"
          required="true"
          value="Policy.PolicyNumber"/>
        <Input
          editable="!Policy.Verified"
          id="ObligeeBondNum"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.ObligeeBondNum"
          required="true"
          value="Policy.ObligeeBondNumExt"/>
        <Input
          editable="!Policy.Verified"
          id="PolicySuffixInput"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.BondMod"
          required="true"
          value="Policy.PolicySuffix"/>
        <Input
          editable="!Policy.Verified"
          id="PolicyVersionInput"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.BondVersion"
          required="true"
          value="Policy.ex_PolicyVersion"/>
        <Input
          id="Type"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.BondType"
          required="false"
          value="Policy.PolicyType"/>
        <Input
          editable="!Policy.Verified"
          id="EffectiveDate"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.EffectiveDate"
          required="true"
          value="Policy.EffectiveDate"/>
        <Input
          editable="!Policy.Verified"
          id="ExpirationDate"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.ExpirationDate"
          required="true"
          validationExpression="Policy.EffectiveDate != null and Policy.ExpirationDate != null and Policy.ExpirationDate &lt; Policy.EffectiveDate ? displaykey.Java.Validation.AdminCatastrophe.Date.ForbidValidReverse : null"
          value="Policy.ExpirationDate"/>
        <Input
          editable="!Policy.Verified"
          id="CancellationDate"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.CancellationDate"
          value="Policy.CancellationDate"/>
        <Input
          editable="!Policy.Verified"
          id="ReinstatementDateInput"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.ReinstatementDate"
          value="Policy.ex_ReinstatementDate"/>
        <Input
          editable="!Policy.Verified"
          id="OrigEffectiveDate"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.OrigEffectiveDate"
          value="Policy.OrigEffectiveDate"
          visible="false"/>
        <Input
          editable="!Policy.Verified"
          id="Status"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.BondStatus"
          value="Policy.Status"/>
        <TypeKeyInput
          editable="!Policy.Verified"
          id="policystate_typekeyinput"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.BondState"
          value="Policy.PolicyStateExt"/>
        <Input
          editable="!Policy.Verified and Policy.CurrencyEditable"
          id="Currency"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Currency"
          postOnChange="true"
          required="gw.api.util.CurrencyUtil.isMultiCurrencyMode()"
          value="Policy.Currency"
          visible="gw.api.util.CurrencyUtil.isMultiCurrencyMode()"/>
        <InputDivider/>
        <Label
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Insured"/>
        <ClaimContactInput
          claim="Policy.Claim"
          editable="!Policy.Verified"
          id="Insured_Name"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Principal.Name"
          required="true"
          value="Policy.insured"
          valueRange="Policy.Claim.RelatedContacts"/>
        <Input
          editable="!Policy.Verified"
          id="PrincipalID"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.PrincipalID"
          required="true"
          value="Policy.PrincipalIDExt"/>
        <ClaimContactInput
          claim="Policy.Claim"
          editable="!Policy.Verified"
          id="DBA"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.DBA"
          newContactMenu="ClaimNewCompanyOnlyPickerMenuItemSet"
          value="Policy.doingbusinessas"
          valueRange="Policy.Claim.RelatedCompanyArray"
          visible="Policy.CommercialPolicy"/>
        <!-- <ListViewInput
          def="EditableMoreNamedInsuredLV(Policy.getMNICoveredParties(), Policy.Claim, Policy, &quot;coveredparty&quot;)"
          editable="false"
          id="MoreNamedInsuredListViewInput"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.MoreNamedPrincipals"
          validationExpression="Policy.checkCoveredPartyConstraints().formatUserMessage()"
          visible="Policy.Verified and Policy.Claim.BusinessUnitExt != BusinessUnitExt.TC_BS">
          <Toolbar>
            <IteratorButtons/>
          </Toolbar>
        </ListViewInput> -->
        <Input
          id="Insured_Address"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Insured.Address"
          value="Policy.insured.PrimaryAddressDisplayValue">
          <Reflect
            triggerIds="Insured_Name"
            value="VALUE.PrimaryAddressDisplayValue"/>
        </Input>
        <TypeKeyInput
          editable="!Policy.Verified &amp;&amp; Policy.insured != null"
          id="Insured_LegalCategory"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Insured.LegalCategory"
          value="Policy.insured.LegalCategoryExt"/>
        <Input
          editable="!Policy.Verified"
          id="Account"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.CustomerCode"
          required="false"
          value="Policy.Account"/>
      </InputColumn>
      <InputColumn>
        <ListViewInput
          boldLabel="true"
          def="EditableAdditionalInsuredLV(Policy.getNonMNICoveredParties(), Policy.Claim, Policy, &quot;coveredparty&quot;)"
          editable="!Policy.Verified"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.AdditionalInsured"
          validationExpression="Policy.checkCoveredPartyConstraints().formatUserMessage()"
          visible="Policy.Verified">
          <Toolbar>
            <IteratorButtons/>
          </Toolbar>
        </ListViewInput>
        <InputDivider/>
        <Label
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Agent"/>
        <Input
          editable="!Policy.Verified"
          id="ProducerCode"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.ProducerCode"
          onChange="Policy.ex_Agency=util.gaic.prm.PRMPluginFunctions.getProducerFromPRM(Policy.ProducerCode);Policy.updateAgencyRoles(Policy.ex_Agency);"
          postOnChange="true"
          required="true"
          validationExpression="(Policy.ProducerCode != null AND !Policy.ProducerCode.matches(&quot;\\d{6}&quot;)) ? displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Validation.ProducerCode : null"
          value="Policy.ProducerCode"/>
        <ClaimContactInput
          claim="Policy.Claim"
          id="Agent_Name"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Agent.Name"
          value="Policy.ex_Agency"
          valueRange="Policy.Claim.getAgencies()"/>
        <Input
          id="AgentAAPAuthorityInput"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Agent.AAPAuthority"
          value="Policy.ex_Agency.ex_AAPAuthority"/>
        <Input
          formatType="exactNumber"
          id="AgentAAPLimitInput"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Agent.AAPLimit"
          outputConversion="util.StringUtils.removeDecimal(CurrentLocation.InEditMode, VALUE as java.lang.Double)"
          validationExpression="Policy.ex_Agency.ex_AAPAuthorityLimit == null || (Policy.ex_Agency.ex_AAPAuthorityLimit.intValue() == Policy.ex_Agency.ex_AAPAuthorityLimit) ? null : displaykey.Java.Validation.Number.NotAnInteger"
          value="Policy.ex_Agency.ex_AAPAuthorityLimit"/>
        <Input
          id="AgentLossCheckInput"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Agent.LossCheckCopy"
          value="Policy.ex_Agency.ex_LossCheckCopy"/>
        <Input
          id="AgentExpenseCheckInput"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Agent.ExpenseCheckCopy"
          value="Policy.ex_Agency.ex_ExpenseCheckCopy"/>
        <Input
          id="Agent_Funded_Deductible"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Agent.FundedDeductible"
          value="Policy.ex_Agency.ex_FundedDeductible"/>
        <Input
          id="CustomBroker"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.CustomBroker"
          required="true"
          value="Policy.CustomBroker"/>
        <Input
          id="AvalonBranch"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.AvalonBranch"
          required="true"
          value="Policy.AvalonBranch"/>
        <InputDivider/>
        <Label
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Underwriting"/>
        <ClaimContactInput
          claim="Policy.Claim"
          editable="!Policy.Verified"
          id="Underwriter_Name"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Underwriter.Name"
          newContactMenu="ClaimNewPersonOnlyPickerMenuItemSet"
          required="false"
          showSearchInMenu="false"
          value="Policy.underwriter"
          valueRange="Policy.Claim.RelatedPersonArray"/>
        <Input
          editable="!Policy.Verified"
          id="Underwriting_Company"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Underwriting.Company"
          value="Policy.UnderwritingCo"
          visible="false"/>
        <Input
          editable="!Policy.Verified"
          id="Underwriting_Group"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Underwriting.Group"
          value="Policy.UnderwritingGroup"
          visible="false"/>
        <Input
          editable="!Policy.Verified"
          id="ProfitCenterNameInput"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Underwriting.ProfitCenterName"
          required="true"
          value="Policy.ex_Agency.AgencyProfitCenterNameExt"/>
        <Input
          editable="!Policy.Verified"
          id="ProfitCenterInput"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Underwriting.ProfitCenter"
          required="true"
          value="Policy.ex_Agency.ex_AgencyProfitCenter"/>
        <Input
          editable="!Policy.Verified"
          id="IssuingCompanyInput"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Underwriting.IssuingCompany"
          value="Policy.IssuingCompanyExt"/>
        <InputDivider/>
        <Label
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Other"/>
        <!-- <Input
          id="TypeOfBondInput"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.TypeOfBond"/> -->
        <!-- <Input
          id="BondsCategoryInput"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.BondsCategory"/> -->
        <Input
          id="Other_VerifiedPolicy"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Other.VerifiedPolicy"
          value="Policy.Verified"/>
        <TypeKeyInput
          editable="!Policy.Verified and Policy.canEditUnverifiedPolRsn()"
          filter="Policy.filterUnverifiedPolRsn((VALUE as String))"
          id="UnverifiedReasonTypeKeyInput"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.UnverifiedReason"
          required="true"
          value="Policy.UnverifiedRsnExt"
          visible="!Policy.Verified"/>
        <TypeKeyInput
          editable="!Policy.Verified"
          filter="VALUE == &quot;112990&quot; or VALUE == &quot;112920&quot;"
          id="NAICSCodeTypeKeyInput"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.NAICSCode"
          value="Policy.NAICSCodeExt"/>
        <TypeKeyInput
          editable="!Policy.Verified"
          id="CurrencyTypeTypeKeyInput"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.CurrencyType"
          required="true"
          showNoneSelected="false"
          value="Policy.CurrencyTypeExt"/>
        <Input
          editable="!Policy.Verified"
          id="Other_ForeignCoverage"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Other.ForeignCoverage"
          value="Policy.ForeignCoverage"
          visible="false"/>
        <Input
          editable="!Policy.Verified"
          id="Other_OtherFinancialInterests"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Other.OtherFinancialInterests"
          value="Policy.FinancialInterests"
          visible="false"/>
        <Input
          editable="!Policy.Verified"
          id="Other_AssignedRisk"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Other.AssignedRisk"
          value="Policy.AssignedRisk"
          visible="false"/>
        <Input
          editable="!Policy.Verified"
          id="Other_Notes"
          label="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Other.Notes"
          value="Policy.Notes"
          visible="false"/>
      </InputColumn>
    </DetailViewPanel>
    <PanelRef
      def="PolicyCoveragesLV(Policy)"
      editable="!Policy.Verified"
      mode="Policy.Claim.LossType">
      <TitleBar
        title="displaykey.NVV.Policy.SubView.PolicyGeneral.Policy.Coverages"/>
      <Toolbar>
        <IteratorButtons/>
      </Toolbar>
    </PanelRef>
    <Code><![CDATA[// used to default Loss Check Copy to No for Bonds
function setLossCheckCopy() : Boolean {
 if(Policy.ex_Agency.ex_LossCheckCopy == null)
   Policy.ex_Agency.ex_LossCheckCopy = false
   
 return Policy.ex_Agency.ex_LossCheckCopy   
}

// used to default Expense Check Copy to No for Bonds
function setExpenseCheckCopy() : Boolean{
 if(Policy.ex_Agency.ex_ExpenseCheckCopy == null)
  Policy.ex_Agency.ex_ExpenseCheckCopy = false
  
 return Policy.ex_Agency.ex_ExpenseCheckCopy 
}]]></Code>
  </PanelSet>
</PCF>