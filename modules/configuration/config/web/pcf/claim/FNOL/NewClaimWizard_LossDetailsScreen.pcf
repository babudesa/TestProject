<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../pcf.xsd">
  <Screen
    id="NewClaimWizard_LossDetailsScreen">
    <Require
      name="Claim"
      type="Claim"/>
    <Require
      name="Wizard"
      type="claim.NewClaimWizardInfo"/>
    <Variable
      initialValue="setDaysArray()"
      name="daysArray"
      type="java.util.ArrayList&lt;Boolean&gt;"/>
    <Toolbar
      reflectOnBottom="true">
      <WizardButtons/>
    </Toolbar>
    <PanelRef
      def="NewClaimLossDetailsDV(Claim)"
      mode="Claim.LossType"/>
    <DetailViewPanel
      columnDivider="false"
      visible="util.WCHelper.isWCorELLossType(Claim)">
      <InputColumn>
        <TextInput
          id="DaysWorkedLabel"
          label="displaykey.NVV.Claim.SubView.LossDetailsWorkersComp.Claim.EmploymentData.NumDaysWorkedPerWeekNCW"
          labelAbove="true"
          value="&quot;&quot;"/>
      </InputColumn>
      <InputColumn>
        <CheckBoxInput
          align="center"
          editable="true"
          id="Mon"
          label="displaykey.NVV.Claim.SubView.LossDetailsWorkersComp.Claim.EmploymentData.DaysInWeek.Mon"
          labelAbove="true"
          validationExpression="updateDaysInWeek()"
          value="daysArray[1]"
          valueLabel="CurrentLocation.InEditMode == false ? displaykey.NVV.Claim.SubView.LossDetailsWorkersComp.Claim.EmploymentData.DaysInWeek.X : &quot;&quot;"/>
      </InputColumn>
      <InputColumn>
        <CheckBoxInput
          align="center"
          editable="true"
          id="Tues"
          label="displaykey.NVV.Claim.SubView.LossDetailsWorkersComp.Claim.EmploymentData.DaysInWeek.Tues"
          labelAbove="true"
          validationExpression="updateDaysInWeek()"
          value="daysArray[2]"
          valueLabel="CurrentLocation.InEditMode == false ? displaykey.NVV.Claim.SubView.LossDetailsWorkersComp.Claim.EmploymentData.DaysInWeek.X : &quot;&quot;"/>
      </InputColumn>
      <InputColumn>
        <CheckBoxInput
          align="center"
          editable="true"
          id="Wed"
          label="displaykey.NVV.Claim.SubView.LossDetailsWorkersComp.Claim.EmploymentData.DaysInWeek.Wed"
          labelAbove="true"
          validationExpression="updateDaysInWeek()"
          value="daysArray[3]"
          valueLabel="CurrentLocation.InEditMode == false ? displaykey.NVV.Claim.SubView.LossDetailsWorkersComp.Claim.EmploymentData.DaysInWeek.X : &quot;&quot;"/>
      </InputColumn>
      <InputColumn>
        <CheckBoxInput
          align="center"
          editable="true"
          id="Thurs"
          label="&quot;Th&quot;"
          labelAbove="true"
          validationExpression="updateDaysInWeek()"
          value="daysArray[4]"
          valueLabel="CurrentLocation.InEditMode == false ? displaykey.NVV.Claim.SubView.LossDetailsWorkersComp.Claim.EmploymentData.DaysInWeek.X : &quot;&quot;"/>
      </InputColumn>
      <InputColumn>
        <CheckBoxInput
          align="center"
          editable="true"
          id="Fri"
          label="&quot; F&quot;"
          labelAbove="true"
          validationExpression="updateDaysInWeek()"
          value="daysArray[5]"
          valueLabel="CurrentLocation.InEditMode == false ? displaykey.NVV.Claim.SubView.LossDetailsWorkersComp.Claim.EmploymentData.DaysInWeek.X : &quot;&quot;"/>
      </InputColumn>
      <InputColumn>
        <CheckBoxInput
          align="center"
          editable="true"
          id="Sat"
          label="&quot;Sa&quot;"
          labelAbove="true"
          validationExpression="updateDaysInWeek()"
          value="daysArray[6]"
          valueLabel="CurrentLocation.InEditMode == false ? displaykey.NVV.Claim.SubView.LossDetailsWorkersComp.Claim.EmploymentData.DaysInWeek.X : &quot;&quot;"/>
      </InputColumn>
      <InputColumn>
        <CheckBoxInput
          align="center"
          editable="true"
          id="Sun"
          label="&quot;Su&quot;"
          labelAbove="true"
          validationExpression="updateDaysInWeek()"
          value="daysArray[0]"
          valueLabel="CurrentLocation.InEditMode == false ? displaykey.NVV.Claim.SubView.LossDetailsWorkersComp.Claim.EmploymentData.DaysInWeek.X : &quot;&quot;"/>
      </InputColumn>
    </DetailViewPanel>
    <DetailViewPanel
      visible="util.WCHelper.isWCorELLossType(Claim)">
      <InputColumn>
        <InputSet>
          <Input
            editable="true"
            id="EmploymentData_NumHoursWorkedPerDay"
            label="displaykey.NVV.Claim.SubView.LossDetailsWorkersComp.Claim.EmploymentData.NumHoursWorkedPerDayNCW"
            value="Claim.EmploymentData.NumHoursWorked"/>
          <Input
            editable="true"
            id="EmploymentData_PayPeriod"
            label="displaykey.NVV.Claim.SubView.LossDetailsWorkersComp.Claim.EmploymentData.PayPeriod"
            value="Claim.EmploymentData.PayPeriod"/>
          <BooleanRadioInput
            editable="true"
            id="EmploymentData_PaidFullWages"
            label="displaykey.NVV.Claim.SubView.LossDetailsWorkersComp.Claim.EmploymentData.PaidFullWages"
            value="Claim.EmploymentData.PaidFull"/>
          <BooleanRadioInput
            editable="true"
            id="EmploymentData_WagePaymentContinued"
            label="displaykey.NVV.Claim.SubView.LossDetailsWorkersComp.Claim.EmploymentData.WagePaymentContinued"
            value="Claim.EmploymentData.WagePaymentCont"/>
          <Input
            editable="true"
            id="ConcurrentEmployment"
            label="displaykey.NVV.Claim.SubView.LossDetailsWorkersComp.Claim.ConcurrentEmployment"
            value="Claim.ConcurrentEmp"/>
        </InputSet>
      </InputColumn>
    </DetailViewPanel>
    <DetailViewPanel
      visible="util.WCHelper.isWCorELLossType(Claim)">
      <InputColumn>
        <InputDivider
          visible="util.WCHelper.isWCorELLossType(Claim)"/>
        <ListViewInput
          boldLabel="true"
          def="EditableOtherBenefitsLV(Claim)"
          editable="true"
          label="displaykey.NVV.Claim.SubView.LossDetailsWorkersComp.Claim.OtherBenefits"
          labelAbove="true">
          <Toolbar>
            <IteratorButtons/>
          </Toolbar>
        </ListViewInput>
        <InputDivider
          visible="Claim.Policy.Verified"/>
        <ListViewInput
          boldLabel="true"
          def="EditableOfficialsLV(Claim)"
          editable="true"
          id="Claim_Officials"
          label="displaykey.NVV.Claim.SubView.NewClaimLossDetailsProperty.Claim.Officials"
          labelAbove="true"
          visible="Claim.Policy.Verified">
          <Toolbar>
            <IteratorButtons/>
          </Toolbar>
        </ListViewInput>
        <InputDivider/>
        <ListViewInput
          boldLabel="true"
          def="PriorClaimsLV(entity.Claim.finder.findPriorClaimsByPolicyNumber(Claim.Policy.PolicyNumber))"
          id="PriorClaims"
          label="displaykey.NVV.Claim.SubView.NewClaimLossDetailsProperty.Claim.PriorClaims"
          labelAbove="true">
          <Toolbar/>
        </ListViewInput>
      </InputColumn>
    </DetailViewPanel>
    <!-- Holds JavaScript code for WC -->
    <PanelRef
      visible="Claim.isWCclaim and CurrentLocation.InEditMode">
      <PanelRow>
        <PanelColumn>
          <TemplatePanel><![CDATA[
			<script> // WC Defect 8096
			/* This JavaScript code controls how fields look when entering the screen, and 
			 * each field manipulated here has corresponding code on the reflection tab/custom
			 * to handle field changes post page load.
			 *
			 * Due the script tag being inside the body, this code should execute only execute
			 * when the page is fully loaded.
			 *
			 * The required '*' indicator doesn't need any extra on-load code to work, just set 
			 * property and have a reflection script toggle the class to required on trigger change.
			 */
			
			/*
			 * If neither the claimantDeceased field nor the injuryIllnessResultInDeath field are
			 * true, hide the dateOfDeath field.
			 */
			 {
				var claimantDeceased = document.getElementById('FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:InjWorkerInputSet:DeathIndicator_true').checked;
				var injuryIllnessResultInDeath = document.getElementById('FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:InjWorkerInputSet:IllnessDeathIndicator_true').checked;

				if (!claimantDeceased && !injuryIllnessResultInDeath){
					// Get the Table Row (<tr> tag) that Date of Death is in, and set its CSS display style to 'none'
					document.getElementById('FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:InjWorkerInputSet:DateOfDeath')
						.parentNode.parentNode.style.display = 'none';
				}
			}
			
			/*
			 * If attorneyRepresented is false, hide the AttorneyPicker field
			 */
			{
				var attorneyRepresented = document.getElementById('FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:AttRep_NewLoss').checked;
				if (!attorneyRepresented){
					// Get the Table Row (<tr> tag) for Attorney Picker and set its CSS display style to 'none'
					document.getElementById('FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:AttorneyPicker_NewLoss1')
						.parentNode.parentNode.style.display = 'none';
				}
			}
			/*
			 * If employerType isn't "othergovt", hide the Other Gov't. Detail field
			 */
			{
				var employerTypeField = document.getElementById('FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:EmployerType');
				var	employerType = employerTypeField.options[employerTypeField.selectedIndex].value;
				
				if (employerType != "othergovt"){
					// Get the Table Row (<tr> tag) for Other Gov't. Detail and set its CSS display style to 'none'
					document.getElementById('FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:EmployerTypeDetail')
						.parentNode.parentNode.style.display = 'none';
				}

				// force the field to always *look* required so it doesn't have to be set on the reflector
				document.getElementById('FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:EmployerTypeDetail')
					.parentNode.parentNode.className= "required";
			}

			/*
			 * Only show Special Claim Handling Instructions Apply if either Policy Special Claim Handling
			 * or Claim Special Claim Handling is true.
			 */
			function updateSpecialClaimHandlingInstructionsApplysVisibility() {
				var policySCHA = document.getElementById('FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:CLEEInputSet:Policy_SCHA_Indicator') == "true";
				var claimSCHA = document.getElementById('FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:CLEEInputSet:SCHA_Indicator').checked;

				// Get the Table Row (<tr> tag) for SCHA Threshold
				var SCHA_Threshold = document.getElementById('FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:CLEEInputSet:SCHA_Threshold').parentNode.parentNode;
				
				if (claimSCHA || policySCHA){
					SCHA_Threshold.style.display = '';
				} else {
					SCHA_Threshold.style.display = 'none';
				}
			}
			// Call the above function
			updateSpecialClaimHandlingInstructionsApplysVisibility();
			
			/*
			 * When the page loads, the following fields' visibility will be set based if "Medical Attention Required" is true:
			 *	-	First Intake Doctor
			 *	-	Examination Date
			 *	-	Medical Treatment
			 *	-	Hospital
			 *	-	HospitalDate
			 *	-	HospitalDays
			 */
			var medicalAttentionRequired = document.getElementById('FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:InjurySeverity_MedicalReport').checked;
			if (!medicalAttentionRequired){

				var FirstIntakeDoctor = document.getElementById('FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:MedCase_FirstIntakeDoctor');
				if (!FirstIntakeDoctor){ // FirstIntakeDoctor will be the wrong field on unverified claims, get the correct field
						FirstIntakeDoctor = document.getElementById('FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:MedCase_FirstIntakeDoctor_Unverified');
					}
					FirstIntakeDoctor.parentNode.parentNode.parentNode.style.display = 'none';

				var ExaminationDate = document.getElementById('FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:MedCase_ExaminationDate');
					ExaminationDate.parentNode.parentNode.style.display = 'none';

				var MedicalTreatment = document.getElementById('FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:MedCase_MedicalTreatment');
					MedicalTreatment.parentNode.parentNode.style.display = 'none';

				var Hospital= document.getElementById('FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:MedCase_Hospital');
				if (!Hospital){ // Hospital will be the wrong field on unverified claims, get the correct field
					var Hospital = document.getElementById('FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:MedCase_Hospital_Unverified');
				}
					Hospital.parentNode.parentNode.parentNode.style.display = 'none';

				var HospitalDate= document.getElementById('FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:MedCase_HospitalDate');
					HospitalDate.parentNode.parentNode.style.display = 'none';

				var HospitalDays = document.getElementById('FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:MedCase_HospitalDays');
					HospitalDays.parentNode.parentNode.style.display = 'none';
			}
			</script>
		  ]]></TemplatePanel>
        </PanelColumn>
      </PanelRow>
    </PanelRef>
    <Code><![CDATA[function setDaysArray(): java.util.ArrayList<Boolean>{
  var list = new java.util.ArrayList<Boolean>()
  var i = 0
  while (i < 7){
    if (Claim.EmploymentData.DaysWorkedStringExt != null && Claim.EmploymentData.DaysWorkedStringExt.contains((i as String))){
      list.add(true)
    }else{
      list.add(false)
    }
    i++
  }
  return list
}

function updateDaysInWeek(){
  var i = 0
  var newString = ""
  while (i < 7){
    if (DaysArray[i] == true){
      newString = newString + i
    }
    i++
  }
  Claim.EmploymentData.DaysWorkedStringExt = newString
}]]></Code>
  </Screen>
</PCF>