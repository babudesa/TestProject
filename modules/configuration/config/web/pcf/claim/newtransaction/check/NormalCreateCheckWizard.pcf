<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../../pcf.xsd">
  <NormalCreateCheckWizard
    afterCancel="ClaimFinancialsChecks.go(Claim)"
    afterFinish="ClaimFinancialsChecks.go(Claim)"
    beforeCancel="Wizard.Check.clearUserSetProducerCopy()"
    beforeCommit="gw.api.system.bundle.BundleCommitCondition.verify(Claim);Wizard.Check.UpdateCheckHistoryExt = true; Wizard.Check.clearUserSetProducerCopy()//pageProc.unsynchMailTo()"
    canVisit="perm.Claim.createpayment(Claim) and (Claim.State != ClaimState.TC_DRAFT)"
    cancelWarning="displaykey.Wizard.NewCheckWizard.CancelWarning"
    id="NormalCreateCheckWizard"
    onResume="gw.api.system.bundle.BundleCommitCondition.verify(Claim)"
    parent="NormalCreateCheckWizardForward(Claim)">
    <LocationEntryPoint
      signature="NormalCreateCheckWizard(Claim : Claim)"/>
    <LocationEntryPoint
      signature="NormalCreateCheckWizard(Claim : Claim, Check : Check)"/>
    <LocationEntryPoint
      signature="NormalCreateCheckWizard(Claim : Claim, Exposure : Exposure, CostType : CostType, CostCategory : CostCategory, setReserveLine : Boolean)"/>
    <Variable
      initialValue="new financials.NormalCreateCheckWizardInfo(CurrentLocation)"
      name="Wizard"
      type="financials.NormalCreateCheckWizardInfo"/>
    <Variable
      name="Claim"
      type="Claim"/>
    <Variable
      name="Check"
      type="Check"/>
    <Variable
      initialValue="null"
      name="Exposure"
      type="Exposure"/>
    <Variable
      initialValue="null"
      name="CostType"
      type="CostType"/>
    <Variable
      initialValue="null"
      name="CostCategory"
      type="CostCategory"/>
    <Variable
      initialValue="Boolean.FALSE"
      name="setReserveLine"
      type="Boolean"/>
    <Variable
      initialValue="new util.custom_Ext.AutomatedCheckInfo()"
      name="automatedCheckInfo"
      type="util.custom_Ext.AutomatedCheckInfo"/>
    <Variable
      initialValue="new pcf_gs.NormalCreateCheckWizard_PageProc(Wizard)"
      name="pageProc"
      recalculateOnRefresh="true"
      type="pcf_gs.NormalCreateCheckWizard_PageProc"/>
    <WizardStep
      allowFinish="false"
      allowNext="automatedCheckInfo.ValidPayToAddress"
      id="NewCheckPayees"
      label="displaykey.Wizard.NewCheckWizard.NewCheckPayees.Label"
      onExit="Wizard.validateAllCheckPayees(); automatedCheckInfo.InsuredWarningDisplayed = false; Wizard.createNewCheckPortionsIfNecessary(); Wizard.refreshBundle()"
      onFirstEnter="Claim.freezeCurrency();displayAwaitingSubFinalPmtWarning();showBankAccount()"
      screen="CheckWizard_CheckPayeesScreen(Claim, Wizard, automatedCheckInfo)"
      title="displaykey.Wizard.NewCheckWizard.NewCheckPayees.Step( Wizard.CurrentStepNumber ,  Wizard.TotalNumberOfSteps)"/>
    <WizardStep
      id="NewCheckPayments"
      label="displaykey.Wizard.NewCheckWizard.NewCheckPayments.Label"
      onExit="Wizard.validatePayments();  Wizard.setDeductionWarningNeeded(false);  util.financials.Tax1099BoxNumbers.setBoxNumbers(Wizard.Check);  Wizard.CheckGroupProxy.setClaimantDuringEdit(); medicarePaymentValidation(); Wizard.Check.validateNetAmounts(); setExpenseCheckCopy(); Wizard.Check.checkfinalnonrecurring()"
      onFirstEnter="checkForPendingApprovalReserves();Wizard.setPreferredCurrency(Wizard.preferredCurrencyByPayees())"
      screen="CheckWizard_CheckPaymentsScreen(Claim, Wizard)"
      title="displaykey.Wizard.NewCheckWizard.NewCheckPayments.Step( Wizard.CurrentStepNumber ,  Wizard.TotalNumberOfSteps)"/>
    <WizardStep
      id="NewCheckInstructions"
      label="displaykey.Wizard.NewCheckWizard.NewCheckInstructions.Label"
      onExit="Wizard.searchForDuplicates()"
      onFirstEnter="Wizard.CheckGroupProxy.Memo = util.PopulationUtilities.getCheckSummaryTextUtility(Wizard.CheckGroupProxy); "
      screen="CheckWizard_CheckInstructionsScreen(Claim, Wizard, automatedCheckInfo)"
      title="displaykey.Wizard.NewCheckWizard.NewCheckInstructions.Step( Wizard.CurrentStepNumber ,  Wizard.TotalNumberOfSteps)"/>
    <Code><![CDATA[function medicarePaymentValidation(){
  if(Wizard.Check.Payments.where(\ pmt -> pmt.PaymentType == PaymentType.TC_FINAL || pmt.PaymentType == PaymentType.TC_SUPPLEMENT).Count > 0){
    Wizard.Check.validateFinalPayment()  
  }
}

function checkForPendingApprovalReserves() {
  if (Claim.hasPendingApprovalReserves()==true) { PendingApprovalReservesWorksheet.goInWorkspace(Claim)}
}

function displayAwaitingSubFinalPmtWarning() {
  if(Claim.checkAwaitingSubFinalPayment(null)) {
    GeneralErrorWorksheet.goInWorkspace(displaykey.Web.Claim.Check.FinalPaymentAwaitingSubmission)
  }
}
function showBankAccount(){
    if(Wizard.Check.Claim.Policy.CurrencyTypeExt=="usd")
    {
      Wizard.Check.BankAccount="national_city"
      Wizard.Check.TypeOfCheckExt="us_check"
    }
    else if(Wizard.Check.Claim.Policy.CurrencyTypeExt=="cad")
    {
      Wizard.Check.BankAccount="royal_bank_of_canada"
      Wizard.Check.TypeOfCheckExt="canadian_check"
    }
  }
  
  function validateTermDate(){
    for( payment in Wizard.CheckSet.PrimaryCheck.Payments){
    var claimant = payment.Exposure.Claimant
    var exp = payment.Exposure
    if(((claimant.Subtype == "Person" and claimant.Subtype != "PersonVendor" and (exp.ExposureType == ExposureType.TC_AB_MEDPAY or exp.ExposureType == ExposureType.TC_AB_PIP or exp.ExposureType == ExposureType.TC_MEDPAY) )
       and(claimant.Person.MedicareEligibleExt != false) and (((payment.CostType=="claimcost") and (payment.Subtype=="Payment")and 
       (payment.PaymentType!="partial")) or (exists(trans in Claim.getAllTransactions() where trans.Subtype=="Payment" and trans.Exposure==exp and 
       (trans as payment).CostType=="claimcost") and (payment.CostType=="expense") and (payment.PaymentType=="final")) or (exists(trans in Claim.getAllTransactions() 
       where trans.Subtype=="Payment" and trans.Exposure==exp and (trans as payment).CostType=="claimcost") and (payment.CostType=="expense") and (payment.PaymentType=="supplement"))))) { 
       // 3/21/13 - kniese - Added an if statement to check the two values in the SSN / HICN override for Medicare
       if(!(claimant as Person).BelowThresholdExt and !(claimant as Person).RefuseProvideExt){
         if(claimant.Person.MedicareEligibleExt and claimant.ContactISOMedicareExt.ORMIndExt){
           if(claimant.ContactISOMedicareExt.ORMEndDateExt == null and claimant.ContactISOMedicareExt.ExhaustDateExt == null){
             //throw new com.guidewire.pl.web.controller.UserDisplayableException("ORM is open with Medicare.  Medicare requires ORM to remain open until coverage for " +
             //"MedPay or PIP has ended.  You should either provide an ORM Termination Date or set a reminder to close ORM when coverage ends.")
                 ORMTermDateWorksheet.goInWorkspace(Exposure) 
           }
         } 
       }
     }
    }
  }
  
//Defect 6903: For Expense Codes Attorney - Representing GAI (Internal Counsel) and 
//Attorney - Representing GAI (Coverage Litigation/Opinions Copy to Agent must be No.
//Defect 6903: For Expense Codes Attorney - Representing GAI (Internal Counsel) and Attorney - Representing GAI (Coverage Litigation/Opinions Copy to Agent must be No.
function setExpenseCheckCopy(){ 
 var innerCounselOrCoverageOptionExists = false;
 for(transaction in Wizard.CheckSet.AllTransactions){
   for(lineItem in transaction.LineItems){
     if(lineItem.LineCategory ==typekey.LineCategory.TC_ATTORNEY_GAI_INTERNAL or lineItem.LineCategory == typekey.LineCategory.TC_ATTORNEY_REP_GAI_COV){
       Wizard.Check.ex_ProducerCopy="No"
      // Wizard.Check.Claim.Policy.ex_Agency.ex_ExpenseCheckCopy = false   
       innerCounselOrCoverageOptionExists= true   
       break;
     }
     if(innerCounselOrCoverageOptionExists){
       break;
     }
   }
 }
}]]></Code>
  </NormalCreateCheckWizard>
</PCF>