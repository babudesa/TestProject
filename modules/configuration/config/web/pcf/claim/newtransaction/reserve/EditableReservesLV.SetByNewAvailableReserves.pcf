<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../../pcf.xsd">
  <ListViewPanel
    id="EditableReservesLV"
    mode="SetByNewAvailableReserves">
    <Require
      name="WizardHelper"
      type="financials.ReserveWizardHelper"/>
    <Require
      name="Exposure"
      type="Exposure"/>
    <Require
      name="addNew"
      type="Boolean"/>
    <Require
      name="validateReserveSet"
      type="util.custom_Ext.ValidateReserveSet"/>
    <Variable
      initialValue="util.WCHelper.isWCorELLossType(WizardHelper.WorkingTransactionSet.Claim)"
      name="isWCClaim"
      type="Boolean"/>
    <RowIterator
      autoAdd="addNew"
      checkBoxVisible="WizardHelper.isTransactionFullyEditable(ReserveWrapper.Transaction)"
      editable="true"
      elementName="ReserveWrapper"
      pageSize="5"
      toCreateAndAdd="createWrapper()"
      toRemove="WizardHelper.removeTransaction(ReserveWrapper)"
      type="TransactionEditWrapper"
      value="initializeWrappers(WizardHelper.TransactionWrappers)">
      <Variable
        initialValue="ReserveWrapper.Transaction.Exposure.DisplayName"
        name="valueVariable"
        type="String"/>
      <ToolbarFlag
        condition="WizardHelper.isTransactionFullyEditable(ReserveWrapper.Transaction)"
        name="Removeable"/>
      <Row>
        <RangeCell
          editable="WizardHelper.isTransactionFullyEditable(ReserveWrapper.Transaction)"
          footerLabel="displaykey.Java.ListView.Sum"
          id="Exposure"
          label="displaykey.LV.Financials.ReserveSet.Reserves.Exposure"
          onChange="WizardHelper.updateWrapperOnChangePost(ReserveWrapper);//validateNewReserve(ReserveWrapper)"
          optionLabel="VALUE.FullDescriptionWithLossParty"
          postOnChange="true"
          required="true"
          sortOrder="1"
          validationExpression="ReserveWrapper.Transaction.Exposure != null ? ReserveWrapper.Transaction.Exposure.checkLossForReserves(ReserveWrapper.NewAmountInClaimCurrency.Amount.doubleValue()) : null"
          value="ReserveWrapper.Transaction.Exposure"
          valueRange="WizardHelper.getValidExposures(ReserveWrapper.Transaction)"
          valueWidth="175"/>
        <RangeCell
          id="LV_Financials_ReserveSet_Reserves_BureauBenefit"
          label="displaykey.LV.Financials.ReserveSet.Reserves.Coverage"
          optionLabel="ReserveWrapper.Transaction.Exposure.Coverage.covTypeDisplayName()"
          required="false"
          sortOrder="2"
          value="ReserveWrapper.Transaction.Exposure.PrimaryCoverage"
          valueRange="getCoverages(ReserveWrapper.Transaction.Exposure.Coverage)"/>
        <RangeCell
          editable="WizardHelper.isTransactionFullyEditable(ReserveWrapper.Transaction)"
          enableSort="false"
          id="CostType"
          label="displaykey.LV.Financials.ReserveSet.Reserves.CostType"
          onChange="WizardHelper.updateWrapperOnChangePost(ReserveWrapper); ReserveWrapper.Transaction.setFactorReserve();//validateNewReserve(ReserveWrapper)"
          postOnChange="true"
          required="true"
          sortOrder="3"
          value="ReserveWrapper.Transaction.CostType"
          valueRange="util.financials.CheckFunctions.getCostTypeValues(ReserveWrapper.Transaction.Claim, null, null)"
          valueWidth="100"
          wrapLabel="true"/>
        <RangeCell
          editable="true"
          enableSort="false"
          id="InjuryType"
          label="displaykey.LV.Financials.ReserveSet.Reserves.InjuryType"
          required="true"
          value="ReserveWrapper.Transaction.WCInjuryTypeExt"
          valueRange="util.WCHelper.getWCInjuryTypeExtList(ReserveWrapper.Transaction.Claim)"
          valueWidth="130"
          visible="isWCClaim"/>
        <TypeKeyCell
          enableSort="false"
          id="BureauBenefitType"
          label="displaykey.LV.Financials.ReserveSet.Reserves.BureauBenefit"
          value="ReserveWrapper.Transaction.Exposure.BureauBenefitTypeExt"
          valueWidth="80"
          visible="isWCClaim"
          wrapLabel="true"/>
        <Cell
          editable="ReserveWrapper.Transaction.setFactorReserveLoss()"
          enableSort="false"
          id="LV_Financials_ReserveSet_Reserves_FactorReserve"
          label="displaykey.LV.Financials.ReserveSet.Reserves.FactorReserve"
          postOnChange="true"
          required="true"
          value="(ReserveWrapper.Transaction as Reserve).FactorReserveExt"
          wrapLabel="true"/>
        <!-- <RangeCell
          editable="WizardHelper.isTransactionFullyEditable(ReserveWrapper.Transaction)"
          id="CostCategory"
          label="displaykey.LV.Financials.ReserveSet.Reserves.CostCategories"
          numCols="5"
          onChange="WizardHelper.updateWrapperOnChangePost(ReserveWrapper)"
          postOnChange="true"
          required="true"
          sortDirection="descending"
          sortOrder="4"
          value="ReserveWrapper.Transaction.CostCategory"
          valueRange="WizardHelper.getValidCostCategories(ReserveWrapper.Transaction)"
          valueWidth="75"
          visible="true"
          width="5"
          wrapLabel="true"/> -->
        <!-- GW ADDED -->
        <Cell
          enableSort="false"
          formatType="currency"
          id="AvailableReserves"
          label="displaykey.LV.Financials.ReserveSet.Reserves.Remaining"
          value="WizardHelper.getAvailableReservesClaimAmount(ReserveWrapper.Transaction)"
          wrapLabel="true">
          <ColumnFooter>
            <FinancialsSumCell
              formatType="currency"
              id="AvailableReservesSum"
              value="WizardHelper.AvailableReservesSum"/>
          </ColumnFooter>
        </Cell>
        <Cell
          enableSort="false"
          formatType="currency"
          id="PendingReserves"
          label="displaykey.LV.Financials.ReserveSet.Reserves.PendingReserves"
          value="WizardHelper.getPendingApprovalReservesClaimAmount(ReserveWrapper.Transaction)"
          wrapLabel="true">
          <ColumnFooter>
            <FinancialsSumCell
              formatType="currency"
              id="PendingApprovalReservesSum"
              value="WizardHelper.PendingApprovalReservesSum"/>
          </ColumnFooter>
        </Cell>
        <Cell
          editable="!ReserveWrapper.Transaction.Exposure.Closed"
          enableSort="false"
          footerSumValue="ReserveWrapper.NewAmountInClaimCurrency"
          formatType="currency"
          id="NewAvailableReserves"
          label="displaykey.LV.Financials.ReserveSet.Reserves.NewAvailableReserves"
          numCols="10"
          onChange="//validateNewReserve(ReserveWrapper)"
          postOnChange="true"
          required="true"
          value="ReserveWrapper.NewAmountInClaimCurrency"
          wrapLabel="true"/>
        <!-- <Cell
          action="NewReserveMultiCurrencyPopup.push(WizardHelper, ReserveWrapper)"
          available="not ReserveWrapper.Transaction.Exposure.Closed"
          icon="&quot;calculator.gif&quot;"
          iconLabel="displaykey.LV.Financials.ReserveSet.Reserves.MultiCurrency.ToolTip"
          id="MultiCurrencyPopup_link"
          showHeaderIcon="false"
          value="true"
          visible="util.CurrencyUtil.isMultiCurrencyMode()"/> -->
        <Cell
          enableSort="false"
          footerSumValue="WizardHelper.getChangeClaimAmount(ReserveWrapper)"
          formatType="currency"
          id="LV_Financials_ReserveSet_Reserves_ChangeAmount"
          label="displaykey.LV.Financials.ReserveSet.Reserves.ChangeAmount"
          value="WizardHelper.getChangeClaimAmount(ReserveWrapper)"
          wrapLabel="true"/>
        <TextAreaCell
          editable="true"
          enableSort="false"
          id="Comments"
          label="displaykey.LV.Financials.ReserveSet.Reserves.Rationale"
          maxChars="500"
          numCols="20"
          numRows="5"
          validationExpression="ReserveWrapper.Transaction.isFieldChanged(&quot;Comments&quot;) and WizardHelper.getChangeClaimAmount(ReserveWrapper).Amount == null ? &quot;New Available Reserve must also be updated.&quot; : null"
          value="ReserveWrapper.Transaction.Comments"
          width="60"
          wrapLabel="true"/>
      </Row>
    </RowIterator>
    <Code><![CDATA[uses gw.api.util.Logger //Added for logging in Debug - SR
uses com.guidewire.pl.system.database.impl.QueryProcessorImpl

/* 4.8.15 - cmullin - initializeWrappers was previously called removeRecoveryCategories, and was written by Travis Newcomb. 
With Travis's approval, the function has been repurposed to initialize the Wrappers in order to retrieve and set the 
WCInjuryTypeExt field for Workers' Comp.
*/
function initializeWrappers(wrappers : TransactionEditWrapper[]) : TransactionEditWrapper[]{
  var newWrap : java.util.List = new java.util.LinkedList()
  var retWrap : TransactionEditWrapper[];
  var existingTransactions : QueryProcessorImpl 
  // If the passed-in Wrapper array is not empty, then pull a TransactionsQuery on the first Wrapper's Claim and assign the Query results 
  // to the variable existingTransactions (of type QueryProcessorImpl)
  if(wrappers.HasElements){
    existingTransactions = wrappers[0].Transaction.Claim.TransactionsQuery as QueryProcessorImpl 
  }
  // Perform the task that this function was originally created for: populate a new Wrapper array
  // that does not include any Transaction with the following CostCategory types.
  for(wrap in wrappers){
    if(wrap.Transaction.CostCategory != "deductible"
      and wrap.Transaction.CostCategory != "salvage"
      and wrap.Transaction.CostCategory != "subrogation"
      and wrap.Transaction.CostCategory != "overpayment"
      and wrap.Transaction.CostCategory != "secondinjuryfund"){
  // Then look at each transaction in existingTransactions resultset, cast each transaction to a TransactionDefaultView, and compare it to each wrapper 
  // that passes the above check. If we find the existingTrans that the wrapper represents, and it's a reserve transaction, we grab the existingTrans' WCInjuryTypeExt and 
  // add it to the individual wrapper's Transaction for display when setting a new reserve. This is how the WCInjuryTypeExt "defaults" to the 
  // most recently entered Reserve.WCInjuryTypeExt value for a given Exposure/CostType pair. 
      for(each in existingTransactions){
        var existingTrans = each as TransactionDefaultView
        if(existingTrans.Transaction.Subtype == "reserve" && existingTrans.Exposure == wrap.Transaction.Exposure && existingTrans.CostType == wrap.Transaction.CostType){
          wrap.Transaction.WCInjuryTypeExt = existingTrans.Transaction.WCInjuryTypeExt
        }
      }
      newWrap.add(wrap)
    }
  }
  retWrap = newWrap as TransactionEditWrapper[];
  return retWrap;
}

function validateNewReserve(wrapper:TransactionEditWrapper){
  if (wrapper.Transaction.Exposure.Claim == null) return;
  var res:Reserve = (wrapper.Transaction as Reserve)
  for(clmTrans in wrapper.Transaction.Exposure.Claim.getAllTransactions()){
    if(clmTrans.Subtype == "Reserve"){
      var clmRes = (clmTrans as Reserve)
      //changed to logging in Debug - SR
      Logger.logDebug("Res: " + res.ID + " : " + wrapper.NewAmountInClaimCurrency.Amount)
      Logger.logDebug("clmRes: " + clmRes.ID + " : " + clmRes.Amount)
      if(res.Exposure == clmRes.Exposure and res.CostType == clmRes.CostType and wrapper.NewAmountInClaimCurrency.Amount == clmRes.Amount){
        validateReserveSet.RejectReserve = true
      }else{
        validateReserveSet.RejectReserve = false
      }
      
      if(validateReserveSet.RejectReserve){  
        if(res.CostCategory != null){
          validateReserveSet.ValidationMessage = displaykey.Rules.Validation.Transaction.DuplicateReserves(res.Exposure)
        }else{
          validateReserveSet.ValidationMessage = displaykey.Rules.Validation.Transaction.DuplicateReserves(res.Exposure)
        }
        break
      }
    }
  }
}

//return a new wrapper with cost category set to unspecified
function createWrapper() : TransactionEditWrapper {
  var newWrapper = WizardHelper.addNewTransactionWrapper(Exposure)
  newWrapper.Transaction.CostCategory = typekey.CostCategory.TC_UNSPECIFIED;
  return newWrapper
}

function getCoverages(cov:Coverage):List{
  if(cov != null){
    return cov.getCoverages()
  }else{
    var coverages:List = new java.util.ArrayList()
    return coverages
  }
}]]></Code>
  </ListViewPanel>
</PCF>