<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../pcf.xsd">
  <ListViewPanel
    id="ClaimantLV">
    <Require
      name="contactISO"
      type="ContactISOMedicareExt"/>
    <Require
      name="claim"
      type="Claim"/>
    <Require
      name="pageProc"
      type="pcf_gs.Medicare_PageProc"/>
    <RowIterator
      editable="true"
      elementName="contactContact"
      hasCheckBoxes="true"
      hideCheckBoxesIfReadOnly="true"
      pageSize="10"
      toCreateAndAdd="pageProc.addClaimantHelper()"
      toRemove="pageProc.removeClaimantHelper(contactContact)"
      value="pageProc.ClaimantContHelpers">
      <ToolbarFlag
        name="relationship"/>
      <Row
        editable="isRelatedContactEditable(contactContact.conContact)">
        <!-- <ClaimContactCell
          claim="claim"
          editable="isRowEditable(contactContact.conContact)"
          forceContactSubtype="new util.lvwrapper.ClaimContactContactLVWrapper(contactContact.conContact, contactISO.Contact, claim).OtherContactType"
          id="Contact"
          label="displaykey.Web.RelatedContactsLV.Contact"
          newContactMenu="ClaimNewPersonCompanyOnlyPickerMenuItemSet"
          onPick="addRoleOnPick(contactContact.conContact)"
          parentContact="Contact"
          postOnChange="true"
          required="true"
          sortBy="contactContact.conContact.getOtherContact(Contact).PrimarySortValue,contactContact.conContact.getOtherContact(Contact).SecondarySortValue,contactContact.conContact.getOtherContact(Contact).TertiarySortValue,contactContact.conContact.getOtherContact(Contact).QuaternarySortValue"
          sortOrder="2"
          validationExpression="validateClaimant(contactContact) == &quot;&quot; ? null : validateClaimant(contactContact)"
          value="new util.lvwrapper.ClaimContactContactLVWrapper(contactContact.conContact, contactISO.Contact, claim).OtherContact"
          valueRange="claim.getClaimantsFromRelatedContacts(contactISO.Contact)"/> -->
        <RangeCell
          editable="isRowEditable(contactContact.conContact)"
          id="Contact"
          label="displaykey.Web.RelatedContactsLV.Contact"
          onPick="addRoleOnPick(contactContact.conContact);addRole(getCorrectContact(contactContact.conContact, Contact))"
          postOnChange="true"
          required="true"
          sortBy="contactContact.conContact.getOtherContact(Contact).PrimarySortValue,contactContact.conContact.getOtherContact(Contact).SecondarySortValue,contactContact.conContact.getOtherContact(Contact).TertiarySortValue,contactContact.conContact.getOtherContact(Contact).QuaternarySortValue"
          sortOrder="2"
          validationExpression="validateClaimant(contactContact) == &quot;&quot; ? null : validateClaimant(contactContact)"
          value="new util.lvwrapper.ClaimContactContactLVWrapper(contactContact.conContact, contactISO.Contact, claim).OtherContact"
          valueRange="claim.getClaimantsFromRelatedContactsList(contactISO.Contact)">
          <MenuItemSetRef
            def="ClaimNewPersonCompanyPickerMenuItemSet(entity.Contact, Contact, claim, new util.lvwrapper.ClaimContactContactLVWrapper(contactContact.conContact, contactISO.Contact, claim).OtherContact)"/>
        </RangeCell>
        <RangeCell
          editable="isRowEditable(contactContact.conContact)"
          id="Rel"
          label="displaykey.Web.Medicare.Role"
          required="true"
          sortOrder="1"
          value="new util.lvwrapper.ClaimContactContactLVWrapper(contactContact.conContact, contactISO.Contact, claim).BidiRel"
          valueRange="Contact.getFilteredClaimantContactRelationship(contactContact.conContact.getOtherContact(contactISO.Contact))"/>
        <Cell
          id="Role"
          label="displaykey.LV.Claim.PeopleInvolvedDetailed.PeopleInvolved.Roles"
          value="displayContactRoles(getCorrectContact(contactContact.conContact, Contact))"
          valueVisible="contactContact.conContact.RelatedContact != null"/>
        <!-- <Cell
          action="ClaimRelatedContactDetailPopup.push(contactContact.conContact.RelatedContact, claim)"
          id="AddRole"
          label="&quot;Role&quot;"
          outputConversion="CurrentLocation.InEditMode? &quot;Additional Role?&quot; : &quot;&quot;"
          required="false"
          value="&quot;Additional Role?&quot;"
          valueVisible="isRowEditable(contactContact.conContact)"
          visible="CurrentLocation.InEditMode ? true : false"/> -->
        <!-- <ClaimContactCell
          action="if (true) {} else {}"
          claim="claim"
          id="AddRepContact"
          label="&quot;Beneficiary Representative&quot;"
          required="false"
          value="new util.lvwrapper.ClaimContactContactLVWrapper(contactContact.conContact, contactISO.Contact, claim).BeneficiaryRep"
          valueRange="claim.getClaimantsFromRelatedContacts(contactISO.Contact)"/> -->
        <!-- <PickerCell
          action="AddClaimantRepsWorksheet.goInWorkspace(contactContact.conContact.RelatedContact, claim, pageProc) "
          editable="true"
          id="AddRepPicker"
          outputConversion="getValueForBeneficiaryRep(contactContact.conContact).DisplayName == null ? &quot;NULL&quot; : getValueForBeneficiaryRep(contactContact.conContact).DisplayName"
          pickLocation="ClaimContactDetailPopup.push(contactContact.conContact.RelatedContact, claim)"
          value="getValueForBeneficiaryRep(contactContact.conContact).DisplayName"/> -->
        <Cell
          action="ClaimContactDetailPopup.push(contactContact.conContact.RelatedContact.TargetRelatedContacts.where(\ c -&gt; c.ClaimantAddRepFlagExt).last().RelatedContact, claim)"
          id="Rep"
          label="&quot;Beneficiary Representative&quot;"
          required="false"
          value="getValueForBeneficiaryRep(contactContact.conContact).DisplayName"
          valueVisible="getValueForBeneficiaryRep(contactContact.conContact).DisplayName != null"/>
        <Cell
          action="AddClaimantRepPopup.push(contactContact.conContact.RelatedContact, claim, pageProc)"
          id="AddRep"
          value="&quot;+&quot;"
          valueVisible="contactContact.conContact.RelatedContact == null ? false : true"
          visible="CurrentLocation.InEditMode"/>
        <!-- <ContentCell
          align="right"
          label="&quot;Beneficiary Representative&quot;"
          wrap="false">
          <DetailViewPanel>
            <InputColumn>
              <Input
                action="ClaimContactDetailPopup.push(contactContact.conContact.RelatedContact.TargetRelatedContacts.where(\ c -&gt; c.ClaimantAddRepFlagExt).last().RelatedContact, claim)"
                actionAvailable="getValueForBeneficiaryRep(contactContact.conContact).DisplayName != null"
                id="BenRep"
                value="getValueForBeneficiaryRep(contactContact.conContact).DisplayName"
                visible="contactContact.conContact.RelatedContact == null ? false : true"/>
            </InputColumn>
            <InputColumn>
              <Input
                action="AddClaimantRepsWorksheet.goInWorkspace(contactContact.conContact.RelatedContact, claim, pageProc)"
                actionAvailable="contactContact.conContact.RelatedContact != null"
                id="AddBenRep"
                value="&quot;+&quot;"
                visible="contactContact.conContact.RelatedContact != null and CurrentLocation.InEditMode? true: false"/>
            </InputColumn>
          </DetailViewPanel>
        </ContentCell> -->
        <Cell
          id="RepRel"
          label="&quot;Beneficiary Relationship&quot;"
          value="new util.lvwrapper.ClaimContactContactLVWrapper(contactContact.conContact, contactISO.Contact, claim).BeneficiaryRel"/>
        <!-- <ClaimContactCell
          action="pageProc.createNewContactContact(contactContact.RelatedContact, contactContact.AdditionalRepContact, contactContact.AddRepRole)"
          claim="claim"
          editable="true"
          forceContactSubtype="new util.lvwrapper.ClaimContactContactLVWrapper(contactContact, contactISO.Contact, claim).OtherContactType"
          id="ContactRep"
          label="&quot;Representative&quot;"
          parentContact="Contact"
          required="false"
          sortBy="contactContact.getOtherContact(Contact).PrimarySortValue,contactContact.getOtherContact(Contact).SecondarySortValue,contactContact.getOtherContact(Contact).TertiarySortValue,contactContact.getOtherContact(Contact).QuaternarySortValue"
          sortOrder="2"
          value="contactContact.AdditionalRepContact"
          valueRange="claim.getContactsFromRelatedContacts(contactISO.Contact)"/> -->
        <!-- <RangeCell
          editable="true"
          id="Role"
          label="displaykey.Web.Medicare.Role"
          required="false"
          sortOrder="1"
          value="contactContact.AddRepRole"
          valueRange="Contact.getFilteredMedicareContactRelationships(contactContact.getOtherContact(contactISO.Contact))">
          <Reflect
            triggerIds="Contact"
            valueRange="Contact.getFilteredMedicareContactRelationships(VALUE)"/>
        </RangeCell> -->
      </Row>
    </RowIterator>
    <Code><![CDATA[property get Contact() : Contact { return contactISO.Contact; }
      
function isRelatedContactEditable(contContact:ContactContact):Boolean{
         if(contContact.getBidiRel(Contact) == "morenamedinsured" || contContact.getBidiRel(Contact) == "morenamedinsureddba"
             || contContact.getBidiRel(Contact) == "estatetestator" || contContact.getBidiRel(Contact) == "familytestator" 
             || contContact.getBidiRel(Contact) == "othertestator"){
	      return false;
	 }else{
	      return true;
	}
}

function isRowEditable(contContact: ContactContact) :Boolean{
  if(contContact.getBidiRel(Contact) == "morenamedinsured" || contContact.getBidiRel(Contact) == "morenamedinsureddba"
             || contContact.getBidiRel(Contact) == "estatetestator" || contContact.getBidiRel(Contact) == "familytestator" 
             || contContact.getBidiRel(Contact) == "othertestator"){
	      return false;
	 }else{
	      return true;
	}
}

function isRepDisplayable(cont : Contact): boolean{
  
  return !(claim.getContactsFromRelatedContacts(contactISO.Contact).contains(cont))
}

function getCorrectContact(contCont:ContactContact, con:Contact):Contact{
  if(con == contCont.RelatedContact){
   return contCont.SourceContact 
  }
  return contCont.RelatedContact
  
}

function displayContactRoles(cont:Contact):String{
  
  for(con in claim.Contacts){
   if(cont == con.Contact){
     return con.formatRolesDisplay()
   }
  }
  return null
  
  
}

function getValueForBeneficiaryRep(contCont:ContactContact) : Contact{
  if(contCont.RelatedContact.TargetRelatedContacts != null)
    return contCont.RelatedContact.TargetRelatedContacts.where(\ c -> c.ClaimantAddRepFlagExt).last().RelatedContact
    
  else
    return null
}

function validateClaimant(contactContact:pcf_gs.ClaimantContactContactHelper) : String{
  var missingInfo = ""
  if(Contact.TargetRelatedContacts.Count != 0 and Contact.TargetRelatedContacts.where(\ c -> c.ClaimantFlagExt).Count != 0){
    if(contactContact.conContact.RelatedContact != null){
      if(contactContact.conContact.RelatedContact typeis Person and contactContact.conContact.RelatedContact.FirstName == null){
       missingInfo = missingInfo + "First Name, "
      }

      if(contactContact.conContact.RelatedContact.PrimaryAddress == null){
       missingInfo = missingInfo + "Address, "
       
      }
      if(displayContactRoles(getCorrectContact(contactContact.conContact, Contact)) == null)
        missingInfo = missingInfo + "Role, "
      
      if(missingInfo != ""){
        missingInfo = missingInfo.trim()
        if(missingInfo.endsWith( "," )){
          missingInfo = missingInfo.substring( 0, missingInfo.lastIndexOf( "," ) )
        }
        missingInfo = "Enter " + missingInfo + " for the Survivor or Wrongful Death Beneficiary " + contactContact.conContact.RelatedContact
      }
    }
  }
 return missingInfo
}

/**
 * A hideous way of ensuring a related contact is added as a claim contact if they are picked from AB.
 */
function addRoleOnPick(conContact : ContactContact){
  if(conContact.RelatedContact != null && !claim.Contacts*.Contact.contains(conContact.RelatedContact)){
    AddExistingRelatedContactPopup.push(claim, conContact) 
    
  }
}
/*
* Defect #7365 - adding Beneficiary role when we add Survivor or Wrongful Death Beneficiary
* by gyemula
*/
 function addRole(cont: Contact){
    var claimContactRole = new ClaimContactRole()
  claimContactRole.Role ="beneficiary"
  for(con in claim.Contacts){
   if(cont == con.Contact){     
    if(!con.hasRole("beneficiary")){    
    con.addToRoles(claimContactRole)
    }
   }}
   }]]></Code>
  </ListViewPanel>
</PCF>