package rules.ActivityGeneratorBatch.ActivityGeneratorBatchRules_dir.ABXX1000AExclusionfilters_dir.ABAG1000AgriBusinessActivityBatchRules_dir

@gw.rules.RuleName("ABAG1200 - Report to Underwriting Incomplete")
internal class ABAG1200ReporttoUnderwritingIncomplete {
  static function doCondition(claim : entity.Claim) : boolean {
    return /*start00rule*/!claim.Activities.IsEmpty &&
claim.AssignedUser!=util.GlobalParameters.ParameterFinder.getUserParameter( "unitmanager", claim.LossType ) &&
exists(act in claim.Activities where act.ActivityPattern.Code=="ab_report_underwriter") &&
!exists(act in claim.Activities where act.ActivityPattern.Code=="ab_report_underwriter_supv") AND
(claim.LossType!=LossType.TC_ALTMARKETSAUTO AND claim.LossType!=LossType.TC_SHSAUTO AND claim.LossType!=LossType.TC_TRUCKINGAUTO)/*end00rule*/
  }

  static function doAction(claim : entity.Claim, actions : gw.rules.Action) {
/*start00rule*/var ap = util.custom_Ext.finders.findActivityPattern( "ab_report_underwriter_supv" )
var founddocument = false
try{
  if(claim.Documents.length==0){
    if(gw.api.util.DateUtil.currentDate() >= gw.api.util.DateUtil.addDays( claim.ReportedDate, 14 )){
      claim.createActivityFromPattern( null, ap )
    }
  }else{
    for(document in claim.Documents){
      if(document.ex_Type=="Internal Report" and document.ex_SubType=="Initial Underwriter Report"){
        founddocument=true
        break
      }
    }
        if((!founddocument)and
        gw.api.util.DateUtil.currentDate() >= gw.api.util.DateUtil.addDays( claim.ReportedDate, 14 )){
          claim.createActivityFromPattern( null, ap )
        }
  }
}catch(e){
  util.ErrorHandling.GAICErrorHandling.logError( TransactionSet, actions.getRule().DisplayName, e, null )
}/*end00rule*/
  }
}
