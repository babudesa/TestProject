package rules.ActivityGeneratorBatch.ConversionActivityGeneratorBatchRules_dir.CAWC1000WorkCompConversionActivityBatchRules_dir.CAWC1200LegalActions_dir

@gw.rules.RuleName("CAWC1220 - Create a Legal Action - Overdue")
internal class CAWC1220CreateaLegalActionOverdue {
  static function doCondition(claim : entity.Claim) : boolean {
    return /*start00rule*//******* IMPORTANT PLEASE READ: ********
 * This activity is also located in Activity Generator Batch Rules. Any changes made below need
 * to be added to that rule for non-converted claims. 
 */

exists (exp in claim.Exposures where 
    exp.LegalExpenseExt == true and
    exp.LegalExpenseTrueDateExt != null
    and  exp.Closed == false 
    and  gw.api.util.DateUtil.daysBetween( exp.LegalExpenseTrueDateExt.trimToMidnight(),
         gw.api.util.DateUtil.currentDate().trimToMidnight()) >= ScriptParameters.Activity_CreateALegalActionOverdue
    and !exists (matter in claim.Matters 
        where matter.MatterAssignmentsExt*.AssignmentExposuresExt*.Exposure.contains(exp))) == true
        
/*
* This rule is assigned to the claim owner's supervisor using the global activity assignment rules 
*//*end00rule*/
  }

  static function doAction(claim : entity.Claim, actions : gw.rules.Action) {
/*start00rule*/try{
    var pattern = util.custom_Ext.finders.findActivityPattern("create_matter_7day" )
    var today = gw.api.util.DateUtil.currentDate().trimToMidnight()


    //get all valid exposures for activity 
    var exposures = claim.Exposures.where(\ e -> e.LegalExpenseExt == true
                    and e.Closed == false 
                    and gw.api.util.DateUtil.differenceInDays(e.LegalExpenseTrueDateExt.trimToMidnight(), claim.CreateTime.trimToMidnight()) <= 0 // check that the legal expense date is after the claim create time
                    and gw.api.util.DateUtil.daysBetween(e.LegalExpenseTrueDateExt.trimToMidnight(), today) >= ScriptParameters.Activity_CreateALegalActionOverdue
                    and !claim.Matters*.MatterAssignmentsExt*.AssignmentExposuresExt*.Exposure.contains(e)
                    and !exists(act in claim.Activities where act.Exposure == e and act.ActivityPattern.Code == "create_matter_7day"))

    // create the activity for each exposure
    for (exp in exposures){     
   
      //Create new activity from existing pattern and add the matter name to the pattern
      //subject and description  
      var newAct = claim.createActivity(exp,
                   pattern, pattern.Subject, pattern.Description, pattern.Priority, pattern.Mandatory,
                   null, null)
  
      //set custom target date  
      newAct.TargetDate = exp.LegalExpenseTrueDateExt.trimToMidnight().addDays(ScriptParameters.Activity_CreateALegalActionOverdue)
    }

     // *****For converted claims only: *****
     // If the legal expense was set to true prior to the conversion date, use the claims conversion date
     // to determine when to generate the activity
     var convertedExposures = claim.Exposures.where(\ e -> e.LegalExpenseExt == true
                             and e.Closed == false
                             and gw.api.util.DateUtil.differenceInDays(e.LegalExpenseTrueDateExt.trimToMidnight(), claim.CreateTime.trimToMidnight()) > 0 
                             and gw.api.util.DateUtil.daysBetween(claim.CreateTime.trimToMidnight(), today) >= ScriptParameters.Activity_CreateALegalActionOverdue
                             and !claim.Matters*.MatterAssignmentsExt*.AssignmentExposuresExt*.Exposure.contains(e)
                             and !exists(act in claim.Activities where act.Exposure == e and act.ActivityPattern.Code == "create_matter_7day"))
      
      // create the activity for each exposure
      for (exp in convertedExposures){
    
        //Create new activity from existing pattern and add the matter name to the pattern
        //subject and description  
        var newAct = claim.createActivity(exp,
                     pattern, pattern.Subject, pattern.Description, pattern.Priority, pattern.Mandatory,
                     null, null)
  
        //assign user  
        newAct.AssignedUser = claim.AssignedUser
        //set custom target date 
        newAct.TargetDate = claim.CreateTime.trimToMidnight().addDays(ScriptParameters.Activity_CreateALegalActionOverdue)
      }
      // ***** End of Converted Claims only code *****
 
  }catch(e) {
  util.ErrorHandling.GAICErrorHandling.logError( claim, actions.getRule().DisplayName, e, null )
}/*end00rule*/
  }
}
