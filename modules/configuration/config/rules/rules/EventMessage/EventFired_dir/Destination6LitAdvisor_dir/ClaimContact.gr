package rules.EventMessage.EventFired_dir.Destination6LitAdvisor_dir

@gw.rules.RuleName("ClaimContact")
internal class ClaimContact {
  static function doCondition(messageContext : entity.MessageContext) : boolean {
    return /*start00rule*/messageContext.Root typeis ClaimContact &&
!gaic.conversion.util.ConversionStatusChecker.isCurrentlyConverting(messageContext.Root.Claim.LoadCommandID) &&
messageContext.EventName == "ClaimContactContactChanged"
&& util.gaic.LitAdvisorFunctions.sendToLSS(messageContext.Root.Claim.LossType)/*end00rule*/
  }

  static function doAction(messageContext : entity.MessageContext, actions : gw.rules.Action) {
/*start00rule*/var claimContact = MessageContext.Root as ClaimContact;
var lssAdminInfo = find (admin in LSSAdminExt where admin.LossTypeExt ==claimContact.Claim.LossType).AtMostOneRow
if (lssAdminInfo != null && lssAdminInfo.EnableLSSExt){

  var isClaimNew = false;

  if (claimContact.Claim.Changed && claimContact.Claim.Policy.Changed){
    isClaimNew = true;
  }

  for (ccRole in claimContact.Roles){
    if ((ccRole.Role == "insured" || ccRole.Role == "claimant")
        && !isClaimNew){
      util.gaic.LitAdvisorFunctions.sendClaimChanges( messageContext, claimContact.Claim );
      break;
    }
  }
}/*end00rule*/
  }
}
