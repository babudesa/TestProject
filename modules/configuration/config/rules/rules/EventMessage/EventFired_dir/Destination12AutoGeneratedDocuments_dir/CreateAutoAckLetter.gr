package rules.EventMessage.EventFired_dir.Destination12AutoGeneratedDocuments_dir

@gw.rules.RuleName("Create Auto Ack Letter")
internal class CreateAutoAckLetter {
  static function doCondition(messageContext : entity.MessageContext) : boolean {
    return /*start00rule*/(messageContext.Root typeis Claim && 
!gaic.conversion.util.ConversionStatusChecker.isCurrentlyConverting(messageContext.Root.LoadCommandID)) ||
(messageContext.Root typeis Exposure && 
!gaic.conversion.util.ConversionStatusChecker.isCurrentlyConverting(messageContext.Root.Claim.LoadCommandID))
&&
(messageContext.EventName == "NewClaim" ||
 messageContext.EventName == "ClaimChanged" ||
 messageContext.EventName == "ExposureAdded" ||
 messageContext.EventName == "ExposureChanged")
// generates Auto Ack Letters/*end00rule*/
  }

  static function doAction(messageContext : entity.MessageContext, actions : gw.rules.Action) {
/*start00rule*/try{
  var msg:Message
  if (messageContext.Root typeis Claim){
    if ((messageContext.Root.ExternalHandlingExt == null || 
      messageContext.Root.ExternalHandlingExt != null && messageContext.Root.ExternalHandlingExt.AutoAckExt) and
      util.admin.ExternalUserAdminUtil.createLetters(messageContext.Root)){
        if(!messageContext.Root.isConvertedExt() &&
          util.document.AutoACKLetter.autoAckController(messageContext.Root.LossType, TC_ANY) &&
          util.document.AutoACKLetter.createdAfterEffDate(messageContext.Root) &&
          messageContext.Root.AssignmentStatus==AssignmentStatus.TC_ASSIGNED &&
          messageContext.Root.Documents.where(\ d -> d.ex_SubType == "Claim Acknowledgement" 
          and util.document.AutoACKLetter.isAutoAckByFormID(d.FormIDExt)).IsEmpty){
            msg = messageContext.createMessage(messageContext.toString())
              // setting description, so the AutoDocsGeneratorPlugin can differentiate which document(s) should be created
              msg.Description = "AutoAck"
        }
    }
  }
  if (messageContext.Root typeis Exposure){
    if ((messageContext.Root.Claim.ExternalHandlingExt == null || 
      messageContext.Root.Claim.ExternalHandlingExt != null && messageContext.Root.Claim.ExternalHandlingExt.AutoAckExt)and
      util.admin.ExternalUserAdminUtil.createLetters(messageContext.Root.Claim)){
        if (messageContext.Root.Claim.Policy.Verified &&
          !messageContext.Root.isConvertedExt() &&
          messageContext.Root.Claim.IncidentReport == false &&
          util.document.AutoACKLetter.autoAckController(messageContext.Root.Claim.LossType, TC_FEATURE) &&
          util.document.AutoACKLetter.createdAfterEffDate(messageContext.Root.Claim) &&
          messageContext.Root.AssignmentStatus == AssignmentStatus.TC_ASSIGNED &&
          !messageContext.Root.ReconnectFailExt &&
          messageContext.Root.shouldCreateAutoAcknowledgementLetter() &&
          !messageContext.Root.Claim.Policy.isPolicyInRefresh(1)){
            msg = messageContext.createMessage(messageContext.toString())
            // setting description, so the AutoDocsGeneratorPlugin can differentiate which document(s) should be created
            msg.Description = "AutoAck"
        }
    }
  }
}catch(e){
  util.ErrorHandling.GAICErrorHandling.logError(messageContext, actions.getRule() as java.lang.String, e, null )
}/*end00rule*/
  }
}
