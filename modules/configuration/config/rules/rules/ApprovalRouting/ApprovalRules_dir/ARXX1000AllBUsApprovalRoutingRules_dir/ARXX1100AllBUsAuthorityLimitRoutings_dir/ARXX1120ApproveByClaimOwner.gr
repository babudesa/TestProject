package rules.ApprovalRouting.ApprovalRules_dir.ARXX1000AllBUsApprovalRoutingRules_dir.ARXX1100AllBUsAuthorityLimitRoutings_dir

@gw.rules.RuleName("ARXX1120 - Approve By Claim Owner")
internal class ARXX1120ApproveByClaimOwner {
  static function doCondition(transactionSet : entity.TransactionSet) : boolean {
    return /*start00rule*/(((transactionSet.BeanVersion == null) or
(transactionSet.BeanVersion != null && exists(tran in transactionSet.Transactions where tran.Changed == true))) or
(transactionSet.BeanVersion == 0 && transactionSet.Subtype == "CheckSet" && (transactionSet as CheckSet).PrimaryCheck.CheckCategoryExt == typekey.CheckCategoryExt.TC_LIT_ADVISOR)) and
transactionSet.hasDifferentOrNoExpOwners() and
transactionSet.LastApprovingUser != transactionSet.Claim.AssignedUser
/*end00rule*/
  }

  static function doAction(transactionSet : entity.TransactionSet, actions : gw.rules.Action) {
/*start00rule*/try {
  var user:User = transactionSet.Claim.AssignedUser;
  var group:Group = transactionSet.Claim.AssignedGroup;
  transactionSet.setApprovingUser( user, group);
  gw.api.util.Logger.logInfo( actions.getRule().DisplayName )
  actions.exit()
}
catch(aex:gw.rules.AbortExecutionException){
  throw aex 
}
catch(e){
  util.ErrorHandling.GAICErrorHandling.logError( transactionSet, actions.getRule().toString(), e, null );
}/*end00rule*/
  }
}
