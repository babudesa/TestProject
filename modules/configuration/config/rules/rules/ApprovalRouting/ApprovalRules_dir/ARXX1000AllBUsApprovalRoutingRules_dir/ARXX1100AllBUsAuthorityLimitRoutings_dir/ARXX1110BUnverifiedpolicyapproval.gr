package rules.ApprovalRouting.ApprovalRules_dir.ARXX1000AllBUsApprovalRoutingRules_dir.ARXX1100AllBUsAuthorityLimitRoutings_dir

@gw.rules.RuleName("ARXX1110B - Unverified policy approval")
internal class ARXX1110BUnverifiedpolicyapproval {
  static function doCondition(transactionSet : entity.TransactionSet) : boolean {
    return /*start00rule*/!transactionSet.Claim.Policy.Verified and 
transactionSet.Subtype == "CheckSet" and 
transactionSet.LastApprovingUser == transactionSet.RequestingUser and 
!(transactionSet as CheckSet).PrimaryCheck.ManualCheck and
!util.user.GroupsHelper.isClaimManager(transactionSet.RequestingUser)and
(transactionSet as CheckSet).PrimaryCheck.CheckCategoryExt!="lit_advisor" &&
!util.gaic.billimport.approval.ApprovalUtil.canSkipWCUnverified(transactionSet as CheckSet)
//Updated - Sharon McHone 8/18/10 - updated to bypass lit advisor


/*end00rule*/
  }

  static function doAction(transactionSet : entity.TransactionSet, actions : gw.rules.Action) {
/*start00rule*/try{
  var appUser:User = util.user.GroupsHelper.getClaimManager(transactionSet.Claim.AssignedUser)
  
  if(appUser == null){
    gw.api.util.Logger.logInfo( actions.getRule().DisplayName )
    actions.exit()
  } else {  
    var appGroup:Group = appUser.AllGroups.first() as Group
    transactionSet.setApprovingUser( appUser, appGroup )
    gw.api.util.Logger.logInfo( actions.getRule().DisplayName )
    actions.exit()
  }
}catch(aex:gw.rules.AbortExecutionException){
  throw aex; 
}
catch(e){
  util.ErrorHandling.GAICErrorHandling.logError( transactionSet, actions.getRule().getDisplayName(), e, "" ) 
}
/*end00rule*/
  }
}
