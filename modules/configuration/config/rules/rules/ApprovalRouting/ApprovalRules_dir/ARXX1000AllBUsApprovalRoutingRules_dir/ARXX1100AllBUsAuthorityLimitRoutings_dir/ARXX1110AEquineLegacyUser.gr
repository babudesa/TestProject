package rules.ApprovalRouting.ApprovalRules_dir.ARXX1000AllBUsApprovalRoutingRules_dir.ARXX1100AllBUsAuthorityLimitRoutings_dir

@gw.rules.RuleName("ARXX1110A - Equine Legacy User")
internal class ARXX1110AEquineLegacyUser {
  static function doCondition(transactionSet : entity.TransactionSet) : boolean {
    return /*start00rule*/!transactionSet.hasDifferentOrNoExpOwners() and
exists(trans in transactionSet.Transactions where trans.Exposure.AssignedUser != transactionSet.RequestingUser) and
exists(trans in transactionSet.Transactions where trans.Exposure.AssignedUser != transactionSet.LastApprovingUser) and
exists(trans in transactionSet.Transactions where trans.Exposure.AssignedGroup.Supervisor != transactionSet.RequestingUser) and
(exists(trans in transactionSet.Transactions where trans.UpdatedByUserExt == transactionSet.LastApprovingUser) or
(transactionSet.Transactions.length < (transactionSet.OriginalVersion as TransactionSet).Transactions.length and 
!exists(trans in transactionSet.Transactions where trans.UpdatedByUserExt == transactionSet.LastApprovingUser))) and 
transactionSet.LastApprovingUser != util.GlobalParameters.ParameterFinder.getUserParameter( "unitmanager", null ) and
transactionSet.LastApprovingUser != transactionSet.getSCOAssistUser() and
transactionSet.LastApprovingUser != util.GlobalParameters.ParameterFinder.getUserParameter( "ccproperty", null ) and
transactionSet.LastApprovingUser!=util.GlobalParameters.ParameterFinder.getUserParameter( "cc2", null ) and
transactionSet.LastApprovingUser!=util.GlobalParameters.ParameterFinder.getUserParameter( "cc1", null ) and
exists(exp in transactionSet.Exposures where exp.AssignedUser==util.custom_Ext.finders.getUserOb( "equinelegacyuser" ))
and (transactionSet as CheckSet).PrimaryCheck.CheckCategoryExt!="lit_advisor"
//Updated - Sharon McHone 8/18/10 - updated to bypass lit advisor
/*end00rule*/
  }

  static function doAction(transactionSet : entity.TransactionSet, actions : gw.rules.Action) {
/*start00rule*/try{
  var user:User = util.GlobalParameters.ParameterFinder.getUserParameter( "unitmanager", null );
  var group:Group = util.GlobalParameters.ParameterFinder.getGroupParameter( "eqtechnicalb", null );
  transactionSet.setApprovingUser( user, group);
  gw.api.util.Logger.logInfo( actions.getRule().DisplayName )
  actions.exit()
}catch(aex:gw.rules.AbortExecutionException){
  throw aex; 
}
catch(e){
  util.ErrorHandling.GAICErrorHandling.logError( transactionSet, actions.getRule().toString(), e, null );
}/*end00rule*/
  }
}
