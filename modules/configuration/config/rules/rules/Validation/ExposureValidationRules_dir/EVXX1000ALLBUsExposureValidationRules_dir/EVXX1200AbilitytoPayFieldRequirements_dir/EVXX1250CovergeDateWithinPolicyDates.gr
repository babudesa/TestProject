package rules.Validation.ExposureValidationRules_dir.EVXX1000ALLBUsExposureValidationRules_dir.EVXX1200AbilitytoPayFieldRequirements_dir

@gw.rules.RuleName("EVXX1250 - Coverge Date Within Policy Dates")
internal class EVXX1250CovergeDateWithinPolicyDates {
  static function doCondition(exposure : entity.Exposure) : boolean {
    return /*start00rule*//*If the exposure is not closed, check to see if the coverage dates fall within the
  policy dates.
  Defect 376
  kmboyd
  11/24/08*/
!exposure.Closed/*end00rule*/
  }

  static function doAction(exposure : entity.Exposure, actions : gw.rules.Action) {
/*start00rule*/try{
  if(util.custom_Ext.DateTime.isDateAfter( exposure.Coverage.EffectiveDate, exposure.Claim.Policy.ExpirationDate ) or
     util.custom_Ext.DateTime.isDateBefore(exposure.Coverage.EffectiveDate, exposure.Claim.Policy.EffectiveDate) or
     util.custom_Ext.DateTime.isDateAfter(exposure.Coverage.ExpirationDate, exposure.Claim.Policy.ExpirationDate) or
     util.custom_Ext.DateTime.isDateBefore( exposure.Coverage.ExpirationDate, exposure.Claim.Policy.EffectiveDate)){
    exposure.reject( "payment", displaykey.Libraries.ClassExt.DateError(exposure.Coverage.Type.DisplayName, util.custom_Ext.DateTime.formatDateString( exposure.Coverage.EffectiveDate, exposure.Coverage.ExpirationDate ), "Policy", util.custom_Ext.DateTime.formatDateString( exposure.Claim.Policy.EffectiveDate, exposure.Claim.Policy.ExpirationDate )) , null , null )
  }
}catch(e){
  util.ErrorHandling.GAICErrorHandling.logError( exposure, actions.getRule().DisplayName, e, null )
}/*end00rule*/
  }
}
