package rules.Preupdate.ClaimPreupdate_dir.CPUEL1000ELDClaimPreUpdateRules_dir

@gw.rules.RuleName("CPUEL1300 - Generate Approve Settlement Email")
internal class CPUEL1300GenerateApproveSettlementEmail {
  static function doCondition(claim : entity.Claim) : boolean {
    return /*start00rule*/claim.LossType != LossType.TC_MERGACQU and 
(exists (note in claim.Notes where note.Topic.Code == "settlement" and note.New == true)) and
(!exists (note in claim.Notes where note.Topic.Code == "settlement" and note.New == false)) /*end00rule*/
  }

  static function doAction(claim : entity.Claim, actions : gw.rules.Action) {
/*start00rule*///Send e-mail notification
//Generate to Attorney aka Adjuster
//ELD Email 2.  Approve Settlement
uses util.custom_Ext.EmailHelper
var noteBody:String;
var note:Note;
var body : String = templates.email.ApproveSettlement.renderToString(claim)
var environmentInformation : String = util.custom_Ext.finders.getEnvironment();
var subject:String="Settlement Request for CLAIM NUMBER "+claim.ClaimNumber
var emailHelper=new EmailHelper()
if(gw.api.system.server.ServerUtil.getEnv() == "prod") {
 emailHelper.sendEmailWithBodyEcf(claim, 
        claim.AssignedUser.Contact.EmailAddress1, claim.AssignedUser.DisplayName, 
        "ClaimCenterSupport@gaig.com", "ClaimCenter Notification", 
        subject, body)
  gw.api.util.Logger.logInfo(actions.getRule().DisplayName);
} else {
 emailHelper.sendEmailWithBodyEcf(claim, 
        ScriptParameters.ClaimCenterDevEmail, ScriptParameters.Underwriters_Name, 
        "ClaimCenterSupport@gaig.com", environmentInformation, 
       subject, body)
  gw.api.util.Logger.logInfo(actions.getRule().DisplayName);
}/*end00rule*/
  }
}
