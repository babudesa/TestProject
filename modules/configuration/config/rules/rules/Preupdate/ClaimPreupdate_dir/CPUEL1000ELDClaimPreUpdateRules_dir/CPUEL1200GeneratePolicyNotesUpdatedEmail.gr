package rules.Preupdate.ClaimPreupdate_dir.CPUEL1000ELDClaimPreUpdateRules_dir

@gw.rules.RuleName("CPUEL1200 - Generate Policy Notes Updated Email")
internal class CPUEL1200GeneratePolicyNotesUpdatedEmail {
  static function doCondition(claim : entity.Claim) : boolean {
    return /*start00rule*/claim.LossType != LossType.TC_MERGACQU and 
exists(note in claim.Notes where note.Topic.Code == "underwriteclaimnote" and note.New)== true /*end00rule*/
  }

  static function doAction(claim : entity.Claim, actions : gw.rules.Action) {
/*start00rule*///Send e-mail notification
//ELD Email 3.  Policy Notes Updated
uses util.custom_Ext.EmailHelper
var noteBody:String;
var note:Note;
var body : String = templates.email.PolicyNotesUpdated.renderToString(claim)
var environmentInformation : String = util.custom_Ext.finders.getEnvironment();
var subject:String="Policy Notes for CLAIM NUMBER "+claim.ClaimNumber
var emailHelper=new EmailHelper()

if(gw.api.system.server.ServerUtil.getEnv() == "prod") {
 emailHelper.sendEmailWithBodyEcf(claim, 
        "ClaimNotesELD@gaig.com", ScriptParameters.Underwriters_Name, 
        "ClaimCenterSupport@gaig.com", "ClaimCenter Notification", 
        subject, body)
  gw.api.util.Logger.logInfo(actions.getRule().DisplayName);
} else {
  emailHelper.sendEmailWithBodyEcf(claim, 
        ScriptParameters.ClaimCenterDevEmail, ScriptParameters.Underwriters_Name, 
        "ClaimCenterSupport@gaig.com", environmentInformation, 
        subject, body)
  gw.api.util.Logger.logInfo(actions.getRule().DisplayName);
}/*end00rule*/
  }
}
