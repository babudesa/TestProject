package rules.Preupdate.ClaimPreupdate_dir.CPUXX1000GlobalBuisnessPreUpdateRules_dir.CPUXX1600DOCUMENTS_dir.CPUXX1620EvaluationDocumentCreation_dir

@gw.rules.RuleName("CPUXX1626 - Medical Reserve Evaluation")
internal class CPUXX1626MedicalReserveEvaluation {
  static function doCondition(claim : entity.Claim) : boolean {
    return /*start00rule*/exists(evaluation in claim.Evaluations where evaluation.Changed and evaluation.SaveToECFExt and evaluation.EvaluationTypeExt == EvaluationType.TC_MEDICAL)
and claim.BeanVersion == find(clm in Claim where clm.ClaimNumber == claim.ClaimNumber).getAtMostOneRow().BeanVersion/*end00rule*/
  }

  static function doAction(claim : entity.Claim, actions : gw.rules.Action) {
/*start00rule*/uses java.util.HashMap;
uses gw.api.util.Logger

for(evaluation in claim.Evaluations){
  if(evaluation.Changed and evaluation.SaveToECFExt and evaluation.EvaluationTypeExt == "medical"){
    var doc = new Document(claim);
    //build Medical Providers table
    var medProvidersTable : String = "";
    /* medProvidersArray sortBy is so the ECF Doc(created below) and the UI (ClaimMedicalReserveEvaluationDetailDV value
    in the rowIterator match and keep order as entered initially.  We had to use absolute value. */
    var medProvidersArray = evaluation.MedicalEval.MedProviders.sortBy(\ m -> gw.api.util.Math.abs(m.ID.Value) )
    for(each in medProvidersArray){
      medProvidersTable = medProvidersTable +
        "<tr><td style=\"vertical-align: top; font-family: Verdana; font-size: 11px;\"><%= each.ProviderType==null ? "" : each.ProviderType.DisplayName %></td>" +
        "<td style=\"vertical-align: top; font-family: Verdana; font-size: 11px;\"><%= each.NumberVisits==null ? "" : each.NumberVisits.toString() %></td>" +
        "<td style=\"vertical-align: top; font-family: Verdana; font-size: 11px;\"><%= each.RatePerVisit==null ? "" : gw.api.util.StringUtil.formatNumber(each.RatePerVisit as java.lang.Double, "$###,###.00") %></td>" +
        "<td style=\"vertical-align: top; font-family: Verdana; font-size: 11px;\"><%= each.ProvidersTotal==null ? "" : gw.api.util.StringUtil.formatNumber(each.ProvidersTotal as java.lang.Double, "$###,###.00") %></td></tr>"
    }
    //build Transportation table
    var transportationTable : String = "";
    /* medProvidersArray sortBy is so the ECF Doc(created below) and the UI (ClaimMedicalReserveEvaluationDetailDV value
    in the rowIterator match and keep order as entered initially.  We had to use absolute value. */
    var transportationArray = evaluation.MedicalEval.MedTransportation.sortBy(\ m -> gw.api.util.Math.abs(m.ID.Value) )
    var transportationSum : java.math.BigDecimal = 0
    for(each in transportationArray){
      transportationTable = transportationTable +
        "<tr><td style=\"vertical-align: top; font-family: Verdana; font-size: 11px;\"><%= each.Destination==null ? "" : each.Destination %></td>" +
        "<td style=\"vertical-align: top; font-family: Verdana; font-size: 11px;\"><%= each.NumberMiles==null ? "" : each.NumberMiles.toString() %></td>" +
        "<td style=\"vertical-align: top; font-family: Verdana; font-size: 11px;\"><%= each.PerMileCost==null ? "" : gw.api.util.StringUtil.formatNumber(each.PerMileCost as java.lang.Double, "$###,###.000") %></td>" +
        "<td style=\"vertical-align: top; font-family: Verdana; font-size: 11px;\"><%= each.TransportationTotal==null ? "" : gw.api.util.StringUtil.formatNumber(each.TransportationTotal as java.lang.Double, "$###,###.00") %></td></tr>";
      if(each.TransportationTotal!=null){
        transportationSum = transportationSum + each.TransportationTotal
      }
    }
    //build Midical Liens table
    var medLiensTable : String = "";
    /* medProvidersArray sortBy is so the ECF Doc(created below) and the UI (ClaimMedicalReserveEvaluationDetailDV value
    in the rowIterator match and keep order as entered initially.  We had to use absolute value. */
    var medLiensArray = evaluation.MedicalEval.MedLiens.sortBy(\ m -> gw.api.util.Math.abs(m.ID.Value) )
    for(each in medLiensArray){
      medLiensTable = medLiensTable +
        "<tr><td style=\"vertical-align: top; font-family: Verdana; font-size: 11px;\"><%= each.MedicalLien==null ? "" : each.MedicalLien %></td>" +
        "<td style=\"vertical-align: top; font-family: Verdana; font-size: 11px;\"><%= each.DollarAmount==null ? "" : gw.api.util.StringUtil.formatNumber(each.DollarAmount as java.lang.Double, "$###,###.00") %></td>" +
        "<td style=\"vertical-align: top; font-family: Verdana; font-size: 11px;\"><%= each.Percentage==null ? "" : each.Percentage + "%" %></td>" +
        "<td style=\"vertical-align: top; font-family: Verdana; font-size: 11px;\"><%= each.MedLiensTotal==null ? "" : gw.api.util.StringUtil.formatNumber(each.MedLiensTotal as java.lang.Double, "$###,###.00") %></td></tr>"
    }
    //generate template
    var formID : String = "WCEV0002"
    var body = templates.documents.MedicalReserveEvaluation.renderToString(claim, evaluation, medProvidersTable, transportationTable, transportationSum, medLiensTable, formID)
    var values = new HashMap();
    values.put( "MedicalHTML", body)  

    doc.Claim = claim;
    doc.DocUID = "ID-" + java.util.Calendar.getInstance().getTimeInMillis();
    doc.Name = "Medical Reserve Evaluation";
    doc.MimeType = "text/html";
    doc.Status = "approved";
    doc.ex_SubType = "Reserve Recommendation";
    doc.ex_Type = "Internal Report";
    doc.ProcessMethod = "Sent_to_File";
    doc.Description = "Medical Reserve Evaluation";
    doc.Privileged = "No";
    doc.FormIDExt = "WCEV0002";
    
    if (util.document.DocumentProduction.synchronousDocumentCreationSupported( "MedicalReserveEvaluation.html" )) {
      util.document.DocumentProduction.createAndStoreDocumentSynchronously( "MedicalReserveEvaluation.html", values, doc );
      var note:String = "Medical reserve evaluation document successfully generated.";
      var noteSubject:Note;
      noteSubject = claim.addNote("general", note);
      noteSubject.Subject = "Medical Reserve Evaluation Created";
    }else {
      //changed to logging in Debug - SR
	  Logger.logDebug("ERROR: COULD NOT CREATE DOCUMENT");
    }
    values.clear();
  }
}/*end00rule*/
  }
}
