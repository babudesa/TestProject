package rules.Preupdate.ActivityPreupdate_dir.APUBS1000BondsActivityPreUpdateRules_dir

@gw.rules.RuleName("APUBS1100 - Supervisor Reserve/Check Approval Email")
internal class APUBS1100SupervisorReserveCheckApprovalEmail {
  static function doCondition(activity : entity.Activity) : boolean {
    return /*start00rule*/
User.util.CurrentUser!= activity.AssignedUser and 
(activity.ActivityPattern == util.custom_Ext.finders.findActivityPattern("approve_reserve_change")and activity.Status!="complete" or
activity.ActivityPattern == util.custom_Ext.finders.findActivityPattern("approve_payment")and activity.Status!="complete")/*end00rule*/
  }

  static function doAction(activity : entity.Activity, actions : gw.rules.Action) {
/*start00rule*/uses util.custom_Ext.EmailHelper
var supervisorEmail = ""
var supervisorName = ""
var createEmail = false

  // Check if contact has "Claims Supervisor" role and set up email address and name
  if(activity.AssignedUser.Roles.where(\ u -> u.Role.DisplayName == "Claims Supervisor").Count > 0){ 
    supervisorEmail = activity.AssignedUser.Contact.EmailAddress1
    supervisorName = activity.AssignedUser.Contact.DisplayName
    createEmail = true
  }
  
  //Check if contact is the group supervisor and set up the email address and name
  if(activity.AssignedUser == activity.Claim.AssignedGroup.Supervisor){
    supervisorEmail =activity.Claim.AssignedGroup.Supervisor.Contact.EmailAddress1
    supervisorName =activity.Claim.AssignedGroup.Supervisor.Contact.DisplayName
    createEmail = true
  }
  
  if(createEmail){
    var environmentInformation : String = util.custom_Ext.finders.getEnvironment();
    var emailBody = templates.email.ApprovalActivity.renderToString(activity)
    var clmNum = activity.Claim.ClaimNumber
    var emailHelper = new EmailHelper()

    try{
  
        gw.api.util.Logger.logInfo( actions.getRule().DisplayName )
 
      //If current environment is "Prod" then send email to unit manager
        if(gw.api.system.server.ServerUtil.getEnv() == "prod") {
           emailHelper.sendEmailWithBodyEcf(activity.Claim,
              supervisorEmail, supervisorName, "ClaimCenterSupport@gaig.com",
              "ClaimCenter Notification", "Approval Activity Notification", emailBody);
           gw.api.util.Logger.logInfo("### UnitApprovalEmail - Activity Approval Notification Sent to Supervisor User")        
  
        //otherwise send to ClaimCenter testing email address
        } else {
           emailHelper.sendEmailWithBodyEcf(activity.Claim,
              ScriptParameters.ClaimCenterDevEmail, "ClaimCenter Testing",
              "ClaimCenterSupport@gaig.com", environmentInformation,
              "Approval Activity Notification", emailBody)   
           gw.api.util.Logger.logInfo("### UnitApprovalEmail - Activity Approval Notification Sent to Supervisor User")
        }

        actions.exit()

    }
    catch(aex:gw.rules.AbortExecutionException){
      throw aex 
    }
    catch(e){
      util.ErrorHandling.GAICErrorHandling.logError( TransactionSet, actions.getRule().toString(), e, null );
    }
  }
/*end00rule*/
  }
}
