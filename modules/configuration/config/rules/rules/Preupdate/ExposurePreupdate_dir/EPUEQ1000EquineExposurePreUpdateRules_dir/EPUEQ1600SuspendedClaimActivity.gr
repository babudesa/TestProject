package rules.Preupdate.ExposurePreupdate_dir.EPUEQ1000EquineExposurePreUpdateRules_dir

@gw.rules.RuleName("EPUEQ1600 - Suspended Claim Activity")
internal class EPUEQ1600SuspendedClaimActivity {
  static function doCondition(exposure : entity.Exposure) : boolean {
    return /*start00rule*//*Generates activity when claim is suspended
  Sprint/Maintenance Release: EM 10 - Defect 1131
  Author: Zach Thomas
  Date: 08/07/08
  Updated: 08/15/08 - Rule not working properly, activity escalation is being 
  triggered and cannont escalate the activity because the claim is suspended.
  Disabling rule to be revisited when defect is worked on in EM11.
  Updated: 2/12/10 erawe: defect 3001 - I could NOT make this All BU's
  as the Coverage Reconnect rule (EPUEQ1300) needs to run before this
  run can execute properly.  It is dependent upon it.  I left this rule as is.
  
  Updated: 2/5/13 - Defect 5890 - Author: Craig Mullin:
  Corporate Claims added explicit activity pattern "Suspended Claim" (cc:297).
  Rule changed to reference the new pattern rather than "general_reminder".
  Updated: 2/13/13 - Defect 5890 - Author: Craig Mullin:
  Code corrected to allow for dynamic description as before. Activity due date 
  == current date as specified in the Suspended Claim pattern.
*/
exposure.Claim.checkDisconnectedFeatures() and exposure.Claim.Policy.isPolicyInRefresh( 1 )/*end00rule*/
  }

  static function doAction(exposure : entity.Exposure, actions : gw.rules.Action) {
/*start00rule*/uses java.lang.StringBuffer;
uses java.util.ArrayList;

try{
  var exposureList : ArrayList = exposure.Claim.Exposures as ArrayList;
  var disconnectedFeatures : StringBuffer = new StringBuffer();

  if(exposure == (exposureList.get( exposureList.length - 1 ) as Exposure)){ //If current exposure is the last of the exposures on the claim.
    for(exp in exposureList){
      
      //print((exp as Exposure) + " : " + (exp as Exposure).ReconnectFailExt)
      if((exp as Exposure).ReconnectFailExt){
        disconnectedFeatures.append( "\n" + (exp as Exposure).DisplayName )
      }
    }  
    exposure.Claim.createActivity( null, util.custom_Ext.finders.findActivityPattern("suspended_claim"), null,
    displaykey.Rules.Preupdate.Claim.Equine.SuspendedClaimBody(exposure.Claim.ClaimNumber, 
    disconnectedFeatures.toString()), null, null, null, null )
  }
}catch(e){
  util.ErrorHandling.GAICErrorHandling.logError( Claim, actions.getRule().DisplayName, e, null );
}
/*end00rule*/
  }
}
