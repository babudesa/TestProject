package rules.Postsetup.MatterPostsetup_dir.MPOXX1000AllBUsMatterPostSetupRules_dir

@gw.rules.RuleName("MPOXX1100 - Add Roles")
internal class MPOXX1100AddRoles {
  static function doCondition(matter : entity.Matter) : boolean {
    return /*start00rule*/true

/*
* Adds all roles related to the matter after a new matter is saved
*//*end00rule*/
  }

  static function doAction(matter : entity.Matter, actions : gw.rules.Action) {
/*start00rule*/
try{
 
  //Invoke rules for matterexposure opposing law firm and lead counsel
  for(me in matter.MatterAssignmentsExt*.AssignmentExposuresExt){
    
    //Invoke rules for opposing counsel law firm roles
    if(me.OpposingCounselFirmExt !=null){
      rules.Preupdate.MatterPreupdate_dir.MPUXX1000AllBUsPreUpdateRules_dir
            .MPUXX1100ManageRoles_dir.MPUXX1130OpposingCounselLawFirmChanged
            .doAction(matter, actions)

    }

    //Invoke rules for opposing lead counsel roles
    if(me.OpposingLeadCounselExt != null){
      rules.Preupdate.MatterPreupdate_dir.MPUXX1000AllBUsPreUpdateRules_dir
           .MPUXX1100ManageRoles_dir.MPUXX1140OpposingLeadCounselChanged
           .doAction(matter, actions)
    }
  }
 


  //Invoke rules for matter assignments law firm & lead counsel 
  for(ma in matter.MatterAssignmentsExt){ 
   
    rules.Preupdate.MatterAssignmentExtPreupdate_dir.MAPUXX1000AllBUsPreUpdateRules_dir
        .MAPUXX1100ManageRoles_dir.MAPUXX1110CounselLawFirmChanged
        .doAction(ma, actions)
      
    rules.Preupdate.MatterAssignmentExtPreupdate_dir.MAPUXX1000AllBUsPreUpdateRules_dir
        .MAPUXX1100ManageRoles_dir.MAPUXX1120LeadCounselChanged
        .doAction(ma, actions)
  }

  //Invoke rules for Mediators roles
  if(matter.MediatorsExt!=null){

    rules.Preupdate.MatterPreupdate_dir.MPUXX1000AllBUsPreUpdateRules_dir
         .MPUXX1100ManageRoles_dir.MPUXX1110MediatorChanged
         .doAction(matter, actions)
  }
}catch(e) {
util.ErrorHandling.GAICErrorHandling.logError( matter, actions.getRule().DisplayName, e, null )
}

/*end00rule*/
  }
}
