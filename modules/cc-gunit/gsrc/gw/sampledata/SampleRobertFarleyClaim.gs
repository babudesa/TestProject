package gw.sampledata
uses gw.transaction.Bundle

@Export
class SampleRobertFarleyClaim extends SampleDataBase {

  construct(inCache : SampleDataCache) {
    super(inCache)
  }

  override property get Description() : String {
    return "Robert Farley Personal Auto Claim and associated Contacts, Policy, Exposures, Notes, ClaimContacts, Activities and Financials"
  }
   
  override function testSampleData(bundle : Bundle) {
    create(bundle)
  }
     
  function create(bundle : Bundle) : ClaimInfo {

    var contactDemoSample3024 = new gw.api.databuilder.PersonBuilder()
      .withLastName("Farley")
      .withPublicId("demo_sample:3024")
      .withFirstName("Robert")
      .withPrimaryPhone("work")
      .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("503 2nd Ave.")
        .withCountry("US")
        .withPostalCode("92101")
        .withState("CA")
        .withAddressType("home")
        .withCity("San Diego"))
      .withWorkPhone("619-275-2346")
      .create(bundle)

    var contactDemoSample9 = new gw.api.databuilder.PersonBuilder()
      .withLastName("Weeks")
      .withPublicId("demo_sample:9")
      .withFirstName("William")
      .withPrimaryPhone("work")
      .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("345 Fir Lane")
        .withCountry("US")
        .withPostalCode("91352")
        .withState("CA")
        .withAddressType("home")
        .withCity("La Canada"))
      .withWorkPhone("619-275-5986")
      .create(bundle)

    var contactDemoSample10011 = new gw.api.databuilder.PersonBuilder()
      .withLastName("Egertson")
      .withPublicId("demo_sample:10011")
      .withFirstName("Karen")
      .withPrimaryPhone("work")
      .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("908 Angels Landing Rd.")
        .withCountry("US")
        .withPostalCode("91352")
        .withState("CA")
        .withAddressType("home")
        .withCity("Anaheim"))
      .withWorkPhone("213-457-6378")
      .create(bundle)

    var claim = new gw.api.databuilder.ClaimBuilder()
      .withIncidentReport(false)
      .withWeather("CL")
      .withAssignmentStatus("assigned")
      .withLossDate(BaseDate.addDays(-8))
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStrategy("auto_normal")
      .withAssignmentDate(BaseDate.addDays(0))
      .withFlagged("neverflagged")
      .withLossLocation(new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("506 2nd Ave.")
        .withCountry("US")
        .withPostalCode("92101")
        .withState("CA")
        .withAddressType("home")
        .withCity("San Diego"))
      .withLossCause("vehcollision")
      .withClaimNumber("235-53-365889")
      .withMainContactType("self")
      .withReportedByType("other")
      .withLossType("AUTO")
      .withValidationLevel("newloss")
      .withPolicy( new gw.api.databuilder.PolicyBuilder()
        .withExpirationDate(BaseDate.addDays(274))
        .withUnderwritingCo("parent")
        .withVerified(true)
        .withOrigEffectiveDate(BaseDate.addDays(-3266))
        .withAccount("Account 1")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withUnderwritingGroup("acme_auto")
        .withEffectiveDate(BaseDate.addDays(-90))
        .withStatus("inforce")
        .withPolicyNumber("54-586734")
        .withPublicId("demo_sample:8")
        .withTotalProperties(0)
        .withPolicyType("auto_per")
        .withTotalVehicles(1)
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(1)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
            .withYear(2002)
            .withLicensePlate("2GDH967")
            .withPublicId("demo_sample:18")
            .withMake("Pontiac")
            .withState("CA")
            .withModel("Grand Prix")
            .withVin("3DGF78575GD891525"))
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(20000)
            .withType("COLL")
            .withDeductible(0))
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(20000)
            .withType("COMP")
            .withDeductible(0))
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(150000)
            .withType("APD"))
          .withCoverage(new gw.api.databuilder.VehicleCoverageBuilder()
                          .withIncidentLimit(300000)
                          .withType("ABI")
                          .withExposureLimit(150000))
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(1000)
            .withType("MPAY")))
        .withContactInRole(contactDemoSample3024, "insured")
        .withContactInRole(contactDemoSample10011, "agent"))
      .withFault(80)
      .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
      .withJurisdictionState("CA")
      .withSegment("auto_mid")
      .withReportedDate(BaseDate.addDays(-3))
      .withCoverageInQuestion(false)
      .withLOBCode("auto")
      .withPublicId("demo_sample:20")
      .withDescription("Insured swerved to avoid an animal, struck claimant's car head-on")
      .withState("open")
      .withAssignedUser(findUserByUserName("aapplegate"))
      .withContactInRole(contactDemoSample9, "checkpayee")
      .withContactInRole(contactDemoSample3024, "maincontact")
      .withContactInRole(contactDemoSample9, "reporter")
      .withNote( new gw.api.databuilder.NoteBuilder()
        .withTopic("general")
        .withAuthoringDate(BaseDate.addDays(-2))
        .withSubject("Initial phone call with insured")
        .withAuthor(findUserByUserName("cclark"))
        .withBody("Insured claims he swerved to avoid a dog in the road, then hit an oncoming car in the other lane."))
      .withNote( new gw.api.databuilder.NoteBuilder()
        .withTopic("general")
        .withAuthoringDate(BaseDate.addDays(-1))
        .withSubject("Initial phone call with claimant")
        .withAuthor(findUserByUserName("aapplegate"))
        .withBody("Spoke to claimant - he was hospitalized due to a fracture in a bone behind his eye and is under observation, and may need to undergo surgery.  Because claimant does not have other insurance, authorized a check to cover vehicle towing and initial hospital stay."))
      .withActivity( new gw.api.databuilder.ActivityBuilder()
        .withAssignmentStatus("assigned")
        .withAssignmentDate(BaseDate.addDays(-3))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance("notOnCalendar")
        .withCloseDate(BaseDate.addDays(-1))
        .withMandatory(true)
        .withPriority("high")
        .withActivityClass("task")
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withType("general")
        .withEscalationDate(BaseDate.addDays(4))
        .withStatus("complete")
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withActivityPattern(findActivityPatternByCode("contact_insured"))
        .withSubject("Contact insured")
        .withAssignedUser(findUserByUserName("aapplegate"))
        .withTargetDate(BaseDate.addDays(-1)))
      .withActivity( new gw.api.databuilder.ActivityBuilder()
        .withAssignmentStatus("assigned")
        .withAssignmentDate(BaseDate.addDays(-3))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance("notOnCalendar")
        .withCloseDate(BaseDate.addDays(-1))
        .withMandatory(true)
        .withPriority("high")
        .withActivityClass("task")
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withType("general")
        .withEscalationDate(BaseDate.addDays(4))
        .withStatus("complete")
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withActivityPattern(findActivityPatternByCode("contact_claimant"))
        .withSubject("Contact claimant")
        .withAssignedUser(findUserByUserName("aapplegate"))
        .withTargetDate(BaseDate.addDays(-1)))
      .withActivity( new gw.api.databuilder.ActivityBuilder()
        .withAssignmentStatus("assigned")
        .withAssignmentDate(BaseDate.addDays(-3))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance("notOnCalendar")
        .withMandatory(false)
        .withPriority("normal")
        .withActivityClass("task")
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withType("general")
        .withEscalationDate(BaseDate.addDays(17))
        .withStatus("open")
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withActivityPattern(findActivityPatternByCode("initial_30day_review"))
        .withSubject("10 day review")
        .withAssignedUser(findUserByUserName("ssmith"))
        .withTargetDate(BaseDate.addDays(7)))
      .withActivity( new gw.api.databuilder.ActivityBuilder()
        .withAssignmentStatus("assigned")
        .withAssignmentDate(BaseDate.addDays(-3))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance("notOnCalendar")
        .withCloseDate(BaseDate.addDays(0))
        .withMandatory(true)
        .withPriority("high")
        .withActivityClass("task")
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withType("general")
        .withEscalationDate(BaseDate.addDays(10))
        .withStatus("complete")
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withActivityPattern(findActivityPatternByCode("coverage"))
        .withSubject("Check coverage")
        .withAssignedUser(findUserByUserName("aapplegate"))
        .withTargetDate(BaseDate.addDays(0)))
      .withActivity( new gw.api.databuilder.ActivityBuilder()
        .withAssignmentStatus("assigned")
        .withAssignmentDate(BaseDate.addDays(-3))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance("notOnCalendar")
        .withMandatory(true)
        .withPriority("normal")
        .withActivityClass("task")
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withType("general")
        .withEscalationDate(BaseDate.addDays(19))
        .withStatus("open")
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withActivityPattern(findActivityPatternByCode("general_reminder"))
        .withSubject("Set initial reserve")
        .withAssignedUser(findUserByUserName("aapplegate"))
        .withTargetDate(BaseDate.addDays(4)))
      .create(bundle)

    var coverageForAggLimit = claim.Policy.RiskUnits.singleWhere( \ r -> r.RUNumber == 1 ).Coverages.singleWhere(\ c -> c.Type == "ABI")

    var robertFarleyClaimInfo = new gw.api.databuilder.ClaimInfoBuilder()
      .withRootPublicId("demo_sample:20")
      .withClaimNumber("235-53-365889")
      .onClaim(claim)
      .create(bundle)

    var policyPeriodDemoSample70008 = new gw.api.databuilder.PolicyPeriodBuilder()
      .withPolicy(new gw.api.databuilder.PeriodPolicyBuilder().onClaimInfo(robertFarleyClaimInfo))
      .withPolicyPeriodType("policy")
      .withExpirationDate(BaseDate.addDays(274))
      .withPolicyNumber("54-586734")
      .withPublicId("demo_sample:70008")
      .withPolicyType("auto_per")
      .withEffectiveDate(BaseDate.addDays(-90))
      .create(bundle)

    var aggregateLimitDemoSample90002 = new gw.api.databuilder.AggregateLimitBuilder()
      .withLimitAmount(300000)
      .withCoverageLine( new gw.api.databuilder.CoverageLineLimitBuilder()
        .withCoverageLine( new gw.api.databuilder.CoverageLineBuilder()
          .withExposureUnitNumber(1)
          .withCoverageType("ABI")
          .withCoverageSubtype("VehicleCoverage")
          .withCoverage(new gw.api.databuilder.LineCoverageBuilder().withCoverage(coverageForAggLimit))
          .onPolicyPeriod(policyPeriodDemoSample70008)) )
      .withPublicId("demo_sample:90002")
      .withLimitType("lossdate")
      .onPolicyPeriod(policyPeriodDemoSample70008)
      .create(bundle)

    var exposureDemoSample10003 = new gw.api.databuilder.ExposureBuilder()
      .withOtherCoverage(false)
      .withLossParty("insured")
      .withExposureType("VehicleDamage")
      .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
      .withAssignmentStatus("assigned")
      .withStrategy("auto_fast")
      .withProgress("investigation")
      .withJurisdictionState("CA")
      .withAssignmentDate(BaseDate.addDays(0))
      .withPrimaryCoverage("COLL")
      .withSegment("auto_low")
      .withClaimantType("insured")
      .withClaimOrder(1)
      .withPublicId("demo_sample:10003")
      .withState("open")
      .withAssignedUser(findUserByUserName("aapplegate"))
      .onClaim(claim)
      .withCoverageSubType("coll_vd")
      .withIncident( new gw.api.databuilder.VehicleIncidentBuilder()
        .withSpeed(40)
        .withSeverity("moderate-auto")
        .withCollisionPoint("front")
        .withDriverRelation("self")
        .withDescription("Damage to bumper and front panels")
        .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(1993)
          .withLicensePlate("7FDG745")
          .withPublicId("demo_sample:8")
          .withMake("Mercury")
          .withState("CA")
          .withModel("Sable")
          .withVin("6GYF54637HD645370"))
        .withOwnersPermission(true)
        .withContactInRole(contactDemoSample3024, "driver"))
      .withContactInRole(contactDemoSample3024, "claimant")
      .create(bundle)

    var exposureDemoSample10004 = new gw.api.databuilder.ExposureBuilder()
      .withOtherCoverage(false)
      .withLossParty("third_party")
      .withExposureType("VehicleDamage")
      .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
      .withAssignmentStatus("assigned")
      .withStrategy("auto_normal")
      .withProgress("investigation")
      .withJurisdictionState("CA")
      .withAssignmentDate(BaseDate.addDays(0))
      .withPrimaryCoverage("APD")
      .withSegment("auto_mid")
      .withClaimantType("veh_other_owner")
      .withClaimOrder(2)
      .withPublicId("demo_sample:10004")
      .withState("open")
      .withAssignedUser(findUserByUserName("aapplegate"))
      .onClaim(claim)
      .withCoverageSubType("apd_vd")
      .withIncident( new gw.api.databuilder.VehicleIncidentBuilder()
        .withSpeed(30)
        .withSeverity("major-auto")
        .withCollisionPoint("front")
        .withDriverRelation("self")
        .withDescription("Severely crumpled front end, not driveable")
        .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("2GDH967")
          .withPublicId("demo_sample:12")
          .withMake("BMW")
          .withState("CA")
          .withModel("355i")
          .withVin("3DGF78575GD892534"))
        .withOwnersPermission(true)
        .withContactInRole(contactDemoSample9, "driver"))
      .withContactInRole(contactDemoSample9, "claimant")
      .create(bundle)

    var exposureDemoSample20003 = new gw.api.databuilder.ExposureBuilder()
      .withOtherCoverage(false)
      .withLossParty("third_party")
      .withExposureType("BodilyInjuryDamage")
      .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
      .withAssignmentStatus("assigned")
      .withStrategy("injury_normal")
      .withProgress("investigation")
      .withJurisdictionState("CA")
      .withAssignmentDate(BaseDate.addDays(0))
      .withPrimaryCoverage("ABI")
      .withSegment("injury_mid")
      .withClaimantType("veh_other_owner")
      .withClaimOrder(3)
      .withPublicId("demo_sample:20003")
      .withState("open")
      .withAssignedUser(findUserByUserName("aapplegate"))
      .onClaim(claim)
      .withCoverageSubType("abi_bid")
      .withIncident( new gw.api.databuilder.InjuryIncidentBuilder()
        .withGeneralInjuryType("specific")
        .withSeverity("major-injury")
        .withDescription("Bruises and lacerations to face and neck, broken orbital bone, potential vision loss")
        .withMedicalTreatmentType("hospital")
        .withDetailedInjuryType("58")
        .withLostWages(true)
        .withBodyPart( new gw.api.databuilder.BodyPartDetailsBuilder()
          .withPrimaryBodyPart("head")
          .withOrdering(100))
        .withContactInRole(contactDemoSample9, "injured"))
      .withContactInRole(contactDemoSample9, "claimant")
      .create(bundle)

    var transactionSetDemoSample20006 = new gw.api.databuilder.CheckSetBuilder()
      .withApprovalDate(BaseDate.addDays(-7))
      .withRequestingUser(findUserByUserName("aapplegate"))
      .withApprovalStatus("approved")
      .onClaim(claim)
      .create(bundle)

    var transactionSetDemoSample20007 = new gw.api.databuilder.ReserveSetBuilder()
      .withApprovalDate(BaseDate.addDays(-2))
      .withRequestingUser(findUserByUserName("aapplegate"))
      .withApprovalStatus("approved")
      .onClaim(claim)
      .create(bundle)

    var reserveLineDemoSample14 = new gw.api.databuilder.ReserveLineBuilder()
      .withExposure(exposureDemoSample10003)
      .withCostType("claimcost")
      .withCostCategory("body")
      .withClaim(claim)
      .create(bundle)

    var reserveLineDemoSample15 = new gw.api.databuilder.ReserveLineBuilder()
      .withExposure(exposureDemoSample10004)
      .withCostType("claimcost")
      .withCostCategory("body")
      .withClaim(claim)
      .create(bundle)

    var reserveLineDemoSample16 = new gw.api.databuilder.ReserveLineBuilder()
      .withExposure(exposureDemoSample20003)
      .withCostType("claimcost")
      .withCostCategory("medical")
      .withClaim(claim)
      .create(bundle)

    var checkDemoSample10106 = new gw.api.databuilder.CheckBuilder()
      .onClaim(claim)
      .withIssueDate(BaseDate.addDays(-6))
      .withScheduledSendDate(BaseDate.addDays(-6))
      .withBankAccount("default")
      .onCheckSet(transactionSetDemoSample20006)
      .withPayTo("William Weeks")
      .withStatus("issued")
      .withPaymentMethod("check")
      .withCheckNumber("11059")
      .withPayee((new gw.api.databuilder.CheckPayeeBuilder().withPayee(contactDemoSample9)
        .withPayeeType("claimant")) as gw.api.databuilder.ValueGenerator<CheckPayee>)
      .withType("primary")
      .create(bundle)

    var transactionDemoSample10016 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample14)
      .onExposure(exposureDemoSample10003)
      .onTransactionSet(transactionSetDemoSample20007)
      .withCostType("claimcost")
      .withCostCategory("body")
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus("submitted")
      .onClaim(claim)
      .withTransToClaimExchangeRate(find(s in ExchangeRate where s.PublicID == "demo_sample:1000").getFirstResult())
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Repairs")
        .withClaimForExAmount(0)
        .withReportingAmount(2500)
        .withClaimAmount(2500)
        .withTransactionAmount(2500)
        .withLineCategory("other")
        .withReportingForExAmount(0))
      .create(bundle)

    var transactionDemoSample10017 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample15)
      .onExposure(exposureDemoSample10004)
      .onTransactionSet(transactionSetDemoSample20007)
      .withCostType("claimcost")
      .withCostCategory("body")
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus("submitted")
      .onClaim(claim)
      .withTransToClaimExchangeRate(find(s in ExchangeRate where s.PublicID == "demo_sample:1000").getFirstResult())
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Repairs")
        .withClaimForExAmount(0)
        .withReportingAmount(5000)
        .withClaimAmount(5000)
        .withTransactionAmount(5000)
        .withLineCategory("other")
        .withReportingForExAmount(0))
      .create(bundle)

    var transactionDemoSample10018 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample16)
      .onExposure(exposureDemoSample20003)
      .onTransactionSet(transactionSetDemoSample20007)
      .withCostType("claimcost")
      .withCostCategory("medical")
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus("submitted")
      .onClaim(claim)
      .withTransToClaimExchangeRate(find(s in ExchangeRate where s.PublicID == "demo_sample:1000").getFirstResult())
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Initial hospitalization costs")
        .withClaimForExAmount(0)
        .withReportingAmount(12000)
        .withClaimAmount(12000)
        .withTransactionAmount(12000)
        .withLineCategory("doctor")
        .withReportingForExAmount(0))
      .create(bundle)

    var transactionDemoSample20014 = new gw.api.databuilder.PaymentBuilder()
      .withReserveLine(reserveLineDemoSample15)
      .onTransactionSet(transactionSetDemoSample20006)
      .withCostCategory("body")
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus("submitted")
      .withTransToClaimExchangeRate(find(s in ExchangeRate where s.PublicID == "demo_sample:1000").getFirstResult())
      .onCheck(checkDemoSample10106)
      .withPaymentType("partial")
      .onExposure(exposureDemoSample10004)
      .withCostType("claimcost")
      .onClaim(claim)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Towing and inspection")
        .withClaimForExAmount(0)
        .withReportingAmount(300)
        .withClaimAmount(300)
        .withTransactionAmount(300)
        .withLineCategory("other")
        .withReportingForExAmount(0))
      .create(bundle)

    var transactionDemoSample20015 = new gw.api.databuilder.PaymentBuilder()
      .withReserveLine(reserveLineDemoSample16)
      .onTransactionSet(transactionSetDemoSample20006)
      .withCostCategory("medical")
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus("submitted")
      .withTransToClaimExchangeRate(find(s in ExchangeRate where s.PublicID == "demo_sample:1000").getFirstResult())
      .onCheck(checkDemoSample10106)
      .withPaymentType("partial")
      .onExposure(exposureDemoSample20003)
      .withCostType("claimcost")
      .onClaim(claim)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Initial hospitalization and examination")
        .withClaimForExAmount(0)
        .withReportingAmount(9000)
        .withClaimAmount(9000)
        .withTransactionAmount(9000)
        .withLineCategory("doctor")
        .withReportingForExAmount(0))
      .create(bundle)
        
    return robertFarleyClaimInfo
  }
}
