package gw.sampledata

uses gw.transaction.Bundle
uses gw.api.databuilder.CovTermBuilder
uses gw.api.databuilder.PolicyCoverageBuilder
uses gw.api.databuilder.PolicyBuilder
uses gw.api.databuilder.TripRUBuilder
uses gw.api.databuilder.PersonBuilder
uses gw.api.databuilder.AddressBuilder
uses gw.api.databuilder.ClaimBuilder
uses gw.api.databuilder.TripIncidentBuilder
uses gw.api.databuilder.BaggageIncidentBuilder
uses gw.api.databuilder.ExposureBuilder
uses gw.api.databuilder.CheckBuilder
uses gw.api.databuilder.AssessmentContentItemBuilder
uses java.util.Date
uses gw.api.databuilder.TripSegmentBuilder
uses gw.api.databuilder.AddnlTripSegmentBuilder
uses gw.api.databuilder.TripAccommodationBuilder
uses gw.api.databuilder.AddnlTripAccommodationBuilder
uses gw.api.databuilder.PolicyPeriodBuilder

@Export
class SampleTravelClaims extends SampleDataBase {

  construct(inCache : SampleDataCache) {
    super(inCache)
  }

  override property get Description() : String {
    return "Travel Claims and associated Contacts, Policies, Exposures, Notes, ClaimContacts, Activities and Financials"
  }
    
  override function testSampleData(bundle : Bundle) {
    var claim1Info : ClaimInfo
    var claim2Info : ClaimInfo
    var claim3Info : ClaimInfo
    { // claim 765-10-132541, Frances Beale, lost passport
      var policy = getFrancesBealePolicyBuilder( BaseDate ).create(bundle)
      
      var toronto = new AddressBuilder()
        .withCity("Toronto")
        .withState( State.TC_ON )
        .withCountry(Country.TC_CA)
      
      var claim = new ClaimBuilder()
        .withClaimNumber("765-10-132541")
        .withPolicy(policy)
        .withLossDate(BaseDate.addDays(-5))
        .withIncidentReport( false )
        .withReportedDate(BaseDate.addDays(-1))
        .withFlagged("neverflagged")
        .withLossLocation(toronto)
        .withLossCause(LossCause.TC_DOCUMENTS)
        .withReporter(policy.insured)
        .withMainContactType( PersonRelationType.TC_SELF )
        .withReportedByType( PersonRelationType.TC_SELF )
        .withLossType(LossType.TC_TRAV)
        .withValidationLevel(ValidationLevel.TC_PAYMENT)
        .withCoverageInQuestion(false)
        .withAssignmentStatus( "assigned" )
        .withAssignedGroup(findGroupByName("Western Travel Group"))
        .withAssignedUser(findUserByUserName("eaustin"))
        .withAssignmentDate( BaseDate.addDays(-1) )
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withDescription("Lost Passport")
        .withState(ClaimState.TC_OPEN)
        .withLOBCode(LOBCode.TC_TRAVEL)
        .create(bundle)
      claim1Info = claim.ClaimInfo
      
      var baggageIncident = new BaggageIncidentBuilder()
            .onClaim(claim)
            .withRelatedTripRU(policy.RiskUnits.firstWhere( \ r -> r.Subtype == typekey.RiskUnit.TC_TRIPRU ) as TripRU)
            .withBaggageType( BaggageType.TC_DOCUMENTS )
            .withDelayOnly( false )
            .withBaggageMissingFrom( BaseDate.addDays(-5 ) )
            .withLocationAddress( toronto )
            .withCarrierCompensated( false ) 
            .withPropertyDesc( "Tickets & passport" )
            .withContentItemLine( new AssessmentContentItemBuilder()
              .withDescription( "US Passport" )
              .withDateAcquired( BaseDate.addYears(-1) )
              .withAction( AssessmentContentAction.TC_APPROVE )
              .withPurchaseCost( 160 )
              .withContentCategory( ContentLineItemCategory.TC_OTHER ) )
            .create(bundle)
            
      var baggageExposure = new ExposureBuilder()
          .onClaim(claim)
          .withExposureType( ExposureType.TC_BAGGAGE )
          .withClaimant( policy.insured )
          .withClaimantType( ClaimantType.TC_INSURED )
          .withCoverage( policy.Coverages.firstWhere( \ p -> p.Type == CoverageType.TC_BAGGAGE ) )
          .withCoverageSubtypeAndRelatedFields( CoverageSubtype.TC_BAG_LOSS_DAMG_DLY )
          .withIncident(baggageIncident)
          .withClaimAssignment()
          .withState( ExposureState.TC_OPEN )
          .withClaimOrder( 1 )
          .create(bundle)

      var checkSet = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-1))
        .withRequestingUser(findUserByUserName("eaustin"))
        .withApprovalStatus("approved")
        .onClaim(claim)
        .create(bundle)

      var reserveSet = new gw.api.databuilder.ReserveSetBuilder()
        .withApprovalDate(BaseDate.addDays(-1))
        .withRequestingUser(findUserByUserName("eaustin"))
        .withApprovalStatus("approved")
        .onClaim(claim)
        .create(bundle)

      var reserveLine = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure( baggageExposure )
        .withCostType(CostType.TC_CLAIMCOST)
        .withCostCategory(CostCategory.TC_BAGGAGE)
        .withClaim(claim)
        .create(bundle)
        
      var reserve = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLine)
        .onClaim(claim)
        .onTransactionSet(reserveSet)
        .withCurrency(claim.Currency)
        .withStatus("submitted")
        .withLineItem( 160, LineCategory.TC_OTHER )
        .create(bundle)
      
      var check = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-1))
        .withScheduledSendDate(BaseDate.addDays(-1))
        .withBankAccount(BankAccount.TC_DEFAULT)
        .onCheckSet(checkSet)
        .withPayTo("Frances Beale")
        .withStatus(TransactionStatus.TC_ISSUED)
        .withPaymentMethod(PaymentMethod.TC_CHECK)
        .withCheckNumber("652115")
        .withPayee(new gw.api.databuilder.CheckPayeeBuilder()
          .withPayee(policy.insured)
          .withPayeeType(ContactRole.TC_CLAIMANT))
        .withType(CheckType.TC_PRIMARY)
        .create(bundle)

      var payment = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLine)
        .onClaim(claim)
        .onTransactionSet(checkSet)
        .withCurrency(claim.Currency)
        .withStatus(TransactionStatus.TC_SUBMITTED)
        .onCheck(check)
        .withPaymentType(PaymentType.TC_FINAL)
        .withLineItem(  160, "Baggage", LineCategory.TC_OTHER )
        .create(bundle)
    }

    { // claim 765-10-132550, Stephen Beale, missed flight
      var policy = getFrancesBealePolicyBuilder( BaseDate ).create(bundle)
      
      var newyork = new AddressBuilder()
        .withCity("New York")
        .withState( State.TC_NY )
        .withCountry(Country.TC_US)
      
      var claim = new ClaimBuilder()
        .withClaimNumber("765-10-132550")
        .withPolicy(policy)
        .withLossDate(BaseDate.addDays(-5))
        .withIncidentReport( false )
        .withReportedDate(BaseDate.addDays(-1))
        .withFlagged("neverflagged")
        .withLossLocation(newyork)
        .withLossCause(LossCause.TC_MISSED_DEPARTURE)
        .withReporter(policy.coveredparty.firstWhere( \ c -> c typeis Person and c.FirstName == "Stephen" ))
        .withReportedByType( PersonRelationType.TC_SPOUSE )
        .withLossType(LossType.TC_TRAV)
        .withValidationLevel(ValidationLevel.TC_PAYMENT)
        .withCoverageInQuestion(false)
        .withAssignmentStatus( "assigned" )
        .withAssignedGroup(findGroupByName("Western Travel Group"))
        .withAssignedUser(findUserByUserName("eaustin"))
        .withAssignmentDate( BaseDate.addDays(-1) )
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withDescription("Missed flight")
        .withState(ClaimState.TC_OPEN)
        .withLOBCode(LOBCode.TC_TRAVEL)
        .create(bundle)
      claim2Info = claim.ClaimInfo
      
      var tripIncident = new TripIncidentBuilder()
            .onClaim(claim)
            .withTripRU(policy.RiskUnits.firstWhere( \ r -> r.Subtype == typekey.RiskUnit.TC_TRIPRU ) as TripRU)
            .withLossEstimate( 150 )
            .withTripSegment( new TripSegmentBuilder()
              .withTransportType( TransportType.TC_AIRLINE )
              .withCarrierName( "United" )
              .withCarrierNumber( "0027" )
              .withPortOfEmbarkation( "JFK" )
              .withPortOfDisembarkation( "SYD" )
              .withStartDate( BaseDate.addDays(-5).addHours(15).addMinutes(52) )
              .withEndDate( BaseDate.addDays(-4).addHours(15).addMinutes(50) )
              .withCancelOnly( false )
              .withCancellationFees( 150 )
              .withAssessment( AssessmentAction.TC_APPROVE )
              .withAddnlTripSegment( new AddnlTripSegmentBuilder()
                .withTransportType( TransportType.TC_AIRLINE )
                .withCarrierName( "United" )
                .withCarrierNumber( "0027" )
                .withPortOfEmbarkation( "JFK" )
                .withPortOfDisembarkation( "SYD" )
                .withStartDate( BaseDate.addDays(-4).addHours(15).addMinutes(52) )
                .withEndDate( BaseDate.addDays(-3).addHours(15).addMinutes(50) ) ) )
            .create(bundle)

      var tripExposure = new ExposureBuilder()
          .onClaim(claim)
          .withExposureType( ExposureType.TC_TRIPCANCELLATIONDELAY )
          .withClaimant( claim.reporter )
          .withClaimantType( ClaimantType.TC_INSURED )
          .withCoverage(policy.Coverages.firstWhere( \ p -> p.Type == CoverageType.TC_TRIP))
          .withCoverageSubtypeAndRelatedFields( CoverageSubtype.TC_TRIPCANCELDELAY )
          .withIncident(tripIncident)
          .withClaimAssignment()
          .withState( ExposureState.TC_OPEN )
          .withClaimOrder( 1 )
          .create(bundle)

      var checkSet = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-1))
        .withRequestingUser(findUserByUserName("eaustin"))
        .withApprovalStatus("approved")
        .onClaim(claim)
        .create(bundle)

      var reserveSet = new gw.api.databuilder.ReserveSetBuilder()
        .withApprovalDate(BaseDate.addDays(-1))
        .withRequestingUser(findUserByUserName("eaustin"))
        .withApprovalStatus("approved")
        .onClaim(claim)
        .create(bundle)

      var reserveLine = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure( tripExposure )
        .withCostType(CostType.TC_CLAIMCOST)
        .withCostCategory(CostCategory.TC_TRIP_CANCEL_DELAY)
        .withClaim(claim)
        .create(bundle)
        
      var reserve = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLine)
        .onClaim(claim)
        .onTransactionSet(reserveSet)
        .withCurrency(claim.Currency)
        .withStatus("submitted")
        .withLineItem( 150, LineCategory.TC_OTHER )
        .create(bundle)
      
      var check = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-1))
        .withScheduledSendDate(BaseDate.addDays(-1))
        .withBankAccount(BankAccount.TC_DEFAULT)
        .onCheckSet(checkSet)
        .withPayTo("Stephen Beale")
        .withStatus(TransactionStatus.TC_ISSUED)
        .withPaymentMethod(PaymentMethod.TC_CHECK)
        .withCheckNumber("652276")
        .withPayee(new gw.api.databuilder.CheckPayeeBuilder()
          .withPayee(claim.reporter)
          .withPayeeType(ContactRole.TC_CLAIMANT))
        .withType(CheckType.TC_PRIMARY)
        .create(bundle)

      var payment = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLine)
        .onClaim(claim)
        .onTransactionSet(checkSet)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TransactionStatus.TC_SUBMITTED)
        .onCheck(check)
        .withPaymentType(PaymentType.TC_FINAL)
        .withLineItem(  150, LineCategory.TC_OTHER )
        .create(bundle)    
    }

    { // claim 765-10-132684, Jeffrey Lieberman, trip canceled
      var policy = getJeffreyLiebermanPolicyBuilder( BaseDate ).create(bundle)
      
      var newyork = new AddressBuilder()
        .withCity("New York")
        .withState( State.TC_NY )
        .withCountry(Country.TC_US)
      
      var claim = new ClaimBuilder()
        .withClaimNumber("765-10-132684")
        .withPolicy( policy )
        .withLossDate(BaseDate)
        .withIncidentReport( false )
        .withReportedDate(BaseDate)
        .withFlagged("neverflagged")
        .withLossLocation(policy.insured.PrimaryAddress)
        .withLossCause(LossCause.TC_DEATH)
        .withReporter(policy.insured)
        .withReportedByType( PersonRelationType.TC_SELF )
        .withLossType(LossType.TC_TRAV)
        .withValidationLevel(ValidationLevel.TC_PAYMENT)
        .withCoverageInQuestion(false)
        .withAssignmentStatus( "assigned" )
        .withAssignedGroup(findGroupByName("Western Travel Group"))
        .withAssignedUser(findUserByUserName("eaustin"))
        .withAssignmentDate( BaseDate )
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withDescription("Trip canceled due to death in the family.")
        .withState(ClaimState.TC_OPEN)
        .withLOBCode(LOBCode.TC_TRAVEL)
        .create(bundle)
      
      var tripIncident = new TripIncidentBuilder()
            .onClaim(claim)
            .withTripRU( policy.RiskUnits.firstWhere( \ r -> r typeis TripRU ) as TripRU )
            .withLossEstimate( 320 )
            .withTripSegment( new TripSegmentBuilder()
              .withTransportType( TransportType.TC_AIRLINE )
              .withCarrierName( "Singapore Airlines" )
              .withCarrierNumber( "21" )
              .withPortOfEmbarkation( "LAX" )
              .withPortOfDisembarkation( "BKK" )
              .withStartDate( BaseDate.addHours(16).addMinutes(49) )
              .withEndDate( BaseDate.addDays(1).addHours(4).addMinutes(50) )
              .withCancelOnly( true )
              .withCancellationFees( 100 )
              .withReasonForCancellation( "Death in the family" )
              .withAssessment( AssessmentAction.TC_APPROVE ) )
            .withTripSegment( new TripSegmentBuilder()
              .withTransportType( TransportType.TC_AIRLINE )
              .withCarrierName( "Singapore Airlines" )
              .withCarrierNumber( "22" )
              .withPortOfEmbarkation( "BKK" )
              .withPortOfDisembarkation( "LAX" )
              .withStartDate( BaseDate.addDays(25).addHours(22).addMinutes(50) )
              .withEndDate( BaseDate.addDays(26).addHours(15).addMinutes(32) )
              .withCancelOnly( true )
              .withCancellationFees( 100 )
              .withReasonForCancellation( "Death in the family" )
              .withAssessment( AssessmentAction.TC_APPROVE ) )
            .withTripAccommodation( new TripAccommodationBuilder()
              .withAccommodationCancelOnly( true )
              .withPropertyName( "Don Muang Hotel" )
              .withAddress( new AddressBuilder()
                .withAddressLine1( "Vibhavadi Rangsit Road" )
                .withCity( "Bangkok" )
                .withCountry( Country.TC_TH ) )
              .withStartDate( BaseDate.addDays(1) )
              .withEndDate( BaseDate.addDays(25) )
              .withCancellationFees( 120 )
              .withAssessment( AssessmentAction.TC_APPROVE )
              .withReasonForCancellation( "Death in the family" ) )
            .create(bundle)

      var tripExposure = new ExposureBuilder()
          .onClaim(claim)
          .withExposureType( ExposureType.TC_TRIPCANCELLATIONDELAY )
          .withClaimant( policy.insured )
          .withClaimantType( ClaimantType.TC_INSURED )
          .withCoverage( policy.Coverages.firstWhere( \ p -> p.Type == CoverageType.TC_TRIP) )
          .withCoverageSubtypeAndRelatedFields( CoverageSubtype.TC_TRIPCANCELDELAY )
          .withIncident(tripIncident)
          .withClaimAssignment()
          .withState( ExposureState.TC_OPEN )
          .withClaimOrder( 1 )
          .create(bundle)

      var checkSet = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-1))
        .withRequestingUser(findUserByUserName("eaustin"))
        .withApprovalStatus("approved")
        .onClaim(claim)
        .create(bundle)

      var reserveSet = new gw.api.databuilder.ReserveSetBuilder()
        .withApprovalDate(BaseDate.addDays(-1))
        .withRequestingUser(findUserByUserName("eaustin"))
        .withApprovalStatus("approved")
        .onClaim(claim)
        .create(bundle)

      var reserveLine = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure( tripExposure )
        .withCostType(CostType.TC_CLAIMCOST)
        .withCostCategory(CostCategory.TC_TRIP_CANCEL_DELAY)
        .withClaim(claim)
        .create(bundle)
        
      var reserve = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLine)
        .onClaim(claim)
        .onTransactionSet(reserveSet)
        .withCurrency(claim.Currency)
        .withStatus("submitted")
        .withLineItem( 200, "Flight cancellation fees", LineCategory.TC_OTHER )
        .withLineItem( 120, "Hotel cancellation fees", LineCategory.TC_OTHER )
        .create(bundle)
      
      var check = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-1))
        .withScheduledSendDate(BaseDate.addDays(-1))
        .withBankAccount(BankAccount.TC_DEFAULT)
        .onCheckSet(checkSet)
        .withPayTo("Jeffrey Lieberman")
        .withStatus(TransactionStatus.TC_ISSUED)
        .withPaymentMethod(PaymentMethod.TC_CHECK)
        .withCheckNumber("652421")
        .withPayee(new gw.api.databuilder.CheckPayeeBuilder()
          .withPayee(policy.insured)
          .withPayeeType(ContactRole.TC_CLAIMANT))
        .withType(CheckType.TC_PRIMARY)
        .create(bundle)

      var payment = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLine)
        .onClaim(claim)
        .onTransactionSet(checkSet)
        .withCurrency(claim.Currency)
        .withStatus(TransactionStatus.TC_SUBMITTED)
        .onCheck(check)
        .withPaymentType(PaymentType.TC_FINAL)
        .withLineItem( 200, "Flight cancellation fees", LineCategory.TC_OTHER )
        .withLineItem( 120, "Hotel cancellation fees", LineCategory.TC_OTHER )
        .create(bundle)
    }

    { // claim 765-10-132563, Frances Beale, modified hotel reservation
      var policy = getFrancesBealePolicyBuilder( BaseDate ).create(bundle)
      
      var claim = new ClaimBuilder()
        .withClaimNumber("765-10-132563")
        .withPolicy(policy)
        .withLossDate(BaseDate.addDays(-4))
        .withIncidentReport( false )
        .withReportedDate(BaseDate)
        .withFlagged("neverflagged")
        .withLossLocation(new AddressBuilder().withCity("Sydney").withCountry(Country.TC_AU))
        .withLossCause(LossCause.TC_CANCELLATION)
        .withReporter(policy.insured)
        .withClaimant(policy.insured)
        .withMainContactType( PersonRelationType.TC_SELF )
        .withReportedByType( PersonRelationType.TC_SELF )
        .withLossType(LossType.TC_TRAV)
        .withValidationLevel(ValidationLevel.TC_PAYMENT)
        .withCoverageInQuestion(false)
        .withAssignmentStatus( "assigned" )
        .withAssignedGroup(findGroupByName("Western Travel Group"))
        .withAssignedUser(findUserByUserName("eaustin"))
        .withAssignmentDate( BaseDate.addDays(-1) )
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withDescription("Claimant rebooked hotel room.")
        .withState(ClaimState.TC_OPEN)
        .withLOBCode(LOBCode.TC_TRAVEL)
        .create(bundle)
      claim3Info = claim.ClaimInfo

      var tripIncident = new TripIncidentBuilder()
            .onClaim(claim)
            .withTripRU(policy.RiskUnits.firstWhere( \ r -> r.Subtype == typekey.RiskUnit.TC_TRIPRU ) as TripRU)
            .withLossEstimate( 0 )
            .withTripAccommodation( new TripAccommodationBuilder()
              .withAccommodationCancelOnly( false )
              .withPropertyName( "Park Hotel" )
              .withAddress( new AddressBuilder()
                .withCity( "Sydney" )
                .withCountry( Country.TC_AU ) )
              .withStartDate( BaseDate.addDays(-3) )
              .withEndDate( BaseDate.addDays(12) )
              .withCancellationFees( 150 )
              .withAssessment( AssessmentAction.TC_DENY )
              .withReasonForDenial( "After conversations with hotel representatives it was determined that the claimant demanded a room upgrade. The hotel did not offer it so the claimant left for another hotel." )
              .withAddnlTripAccommodation( new AddnlTripAccommodationBuilder()
                .withPropertyName("Broadmoor Plaza")
                .withAddress( new AddressBuilder()
                  .withAddressLine1( "76 Kent St" )
                  .withCity( "Sydney" )
                  .withCountry( Country.TC_AU ) )
              .withStartDate( BaseDate.addDays(-3) )
              .withEndDate( BaseDate.addDays(12) )
              .withPaidAmount( 1670 )
              .withAssessment( AssessmentAction.TC_DENY )
              .withReasonForDenial( "See denial reason for original accommodation" ) ) )
            .create(bundle)
    }

    new gw.api.databuilder.PolicyPeriodBuilder()
      .withPolicy(new gw.api.databuilder.PeriodPolicyBuilder().onClaimInfo(claim1Info))
      .withPolicy(new gw.api.databuilder.PeriodPolicyBuilder().onClaimInfo(claim2Info))
      .withPolicy(new gw.api.databuilder.PeriodPolicyBuilder().onClaimInfo(claim3Info))
      .withPolicyPeriodType("policy")
      .withExpirationDate(BaseDate.addDays(14))
      .withPolicyNumber("33-514135")
      .withPublicId("demo_sample:80001")
      .withPolicyType(PolicyType.TC_TRAVEL_PER)
      .withEffectiveDate(BaseDate.addDays(-14))
      .create(bundle)

  }
  
  public static function getFrancesBealePolicyBuilder(baseDate : Date) : PolicyBuilder {
    var frances = new PersonBuilder()
            .withFirstName( "Frances" )
            .withLastName( "Beale" )
            .withPrimaryAddressSetEarly( new AddressBuilder()
              .withAddressLine1( "4881 Pallet Street" )
              .withCity( "New York" )
              .withState( "NY" )
              .withPostalCode( "10013" )
              .withCountry( "US" ))

    var stephen = new PersonBuilder()
            .withFirstName( "Stephen" )
            .withLastName( "Beale" )
            .withPrimaryAddressSetEarly( new AddressBuilder()
              .withAddressLine1( "4881 Pallet Street" )
              .withCity( "New York" )
              .withState( "NY" )
              .withPostalCode( "10013" )
              .withCountry( "US" ))

    var australia = new TripRUBuilder()
            .withRUNumber( 1 )
            .withGeographicalRegion( GeographicalRegion.TC_AUSTRALIA_NZ )
            .withTripDescription( "Australia" )
            .withStartDate( baseDate.addDays(-14) ) 
            .withEndDate( baseDate.addDays(14) )

    return new PolicyBuilder()
      .withExpirationDate(baseDate.addDays(14))
      .withOrigEffectiveDate(baseDate.addDays(-14))
      .withEffectiveDate(baseDate.addDays(-14))
      .withStatus("inforce")
      .withVerified(true)
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withPolicyNumber("33-514135")
      .withPolicyType(PolicyType.TC_TRAVEL_PER)
      .withContactInRole( frances, ContactRole.TC_INSURED )
      .withContactInRole( stephen, ContactRole.TC_COVEREDPARTY)
      .withRiskUnit( australia )
      .withCoverage( new PolicyCoverageBuilder()
        .withType( CoverageType.TC_BAGGAGE )
        .withDeductible( 35 )
        .withExposureLimit( 1500 )
        .withIncidentLimit( 5000 )
        .withCovTerm( new CovTermBuilder()
          .withType( "Emergency replacement" )
          .withValue( 100 )
          .withValueType("per person") )
        .withCovTerm( new CovTermBuilder()
          .withType( "Personal money" )
          .withValue( 500 )
          .withValueType("per person") ) )
      .withCoverage( new PolicyCoverageBuilder()
        .withType( CoverageType.TC_HEALTH_TRAVEL)
        .withDeductible( 35 )
        .withIncidentLimit( 5000000 )
        .withCovTerm( new CovTermBuilder()
          .withType( "Burial & backhaul" )
          .withValue( 2500 )
          .withValueType("Per person") )
        .withCovTerm( new CovTermBuilder()
          .withType( "Death" )
          .withValue( 75000 )
          .withValueType("Per person") )
        .withCovTerm( new CovTermBuilder()
          .withType( "Hospital benefit" )
          .withValue( 200 )
          .withValueType("Per person") )
        .withCovTerm( new CovTermBuilder()
          .withType( "Hospital benefit" )
          .withValue( 20 )
          .withValueType("Per day") )
        .withCovTerm( new CovTermBuilder()
          .withType( "Search & rescue" )
          .withValue( 150000 )
          .withValueType("Per incident") ) )
      .withCoverage( new PolicyCoverageBuilder()
        .withType( CoverageType.TC_HIREDAUTO_TRAVEL)
        .withDeductible( 100 )
        .withIncidentLimit( 1000000 )
        .withCovTerm( new CovTermBuilder()
          .withType( "CDW, LDW, TP, SLI, PA" )
          .withValue( 75000 )
          .withValueType("Per exposure") ) )
      .withCoverage( new PolicyCoverageBuilder()
        .withType( CoverageType.TC_LIAB)
        .withDeductible( 100 )
        .withIncidentLimit( 2000000 )
        .withCovTerm( new CovTermBuilder()
          .withType( "Legal assistance" )
          .withValue( 25000 )
          .withValueType("Per person") )
        .withCovTerm( new CovTermBuilder()
          .withType( "Personal accident" )
          .withValue( 25000 )
          .withValueType("Per person") ) )
      .withCoverage( new PolicyCoverageBuilder()
        .withType( CoverageType.TC_TRIP )
        .withDeductible( 35 )
        .withExposureLimit( 5000 )
        .withIncidentLimit( 50000 )
        .withCovTerm( new CovTermBuilder()
          .withType( "Abandonment" )
          .withValue( 5000 )
          .withValueType("Per incident") )
        .withCovTerm( new CovTermBuilder()
          .withType( "Additional delay charges" )
          .withValue( 600 )
          .withValueType("Per incident") )
        .withCovTerm( new CovTermBuilder()
          .withType( "Cancellation" )
          .withValue( 5000 )
          .withValueType("Per person") )
        .withCovTerm( new CovTermBuilder()
          .withType( "Curtailment" )
          .withValue( 5000 )
          .withValueType("Per person") )
        .withCovTerm( new CovTermBuilder()
          .withType( "Delayed departure" )
          .withValue( 200 )
          .withValueType("Per person") ) ) 
  }

  public static function getJeffreyLiebermanPolicyBuilder(baseDate : Date) : PolicyBuilder {
    
    var jeffrey = new PersonBuilder()
            .withFirstName( "Jeffrey" )
            .withLastName( "Lieberman" )
            .withPrimaryAddressSetEarly( new AddressBuilder()
              .withAddressLine1( "1040 Hillcrest Lane" )
              .withCity( "Fullerton" )
              .withState( "CA" )
              .withPostalCode( "93632" )
              .withCountry( "US" ))
    
    var karen = new PersonBuilder()
            .withFirstName( "Karen" )
            .withLastName( "Lieberman" )
            .withPrimaryAddressSetEarly( new AddressBuilder()
              .withAddressLine1( "1040 Hillcrest Lane" )
              .withCity( "Fullerton" )
              .withState( "CA" )
              .withPostalCode( "93632" )
              .withCountry( "US" ))
    
    return new PolicyBuilder()
          .withExpirationDate(baseDate.addDays(30))
          .withOrigEffectiveDate(baseDate)
          .withEffectiveDate(baseDate)
          .withStatus("inforce")
          .withVerified(true)
          .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
          .withPolicyNumber("60-613881")
          .withPolicyType(PolicyType.TC_TRAVEL_PER)
          .withContactInRole( jeffrey, ContactRole.TC_INSURED)
          .withContactInRole( karen, ContactRole.TC_COVEREDPARTY)
          .withRiskUnit( new TripRUBuilder()
            .withRUNumber( 1 )
            .withGeographicalRegion( GeographicalRegion.TC_WORLDWIDE_EX_US_CA )
            .withTripDescription( "Asia" )
            .withStartDate( baseDate ) 
            .withEndDate( baseDate.addDays(30) ) )
          .withCoverage( new PolicyCoverageBuilder()
            .withType( CoverageType.TC_BAGGAGE )
            .withDeductible( 35 )
            .withExposureLimit( 1500 )
            .withIncidentLimit( 5000 )
            .withCovTerm( new CovTermBuilder()
              .withType( "Emergency replacement" )
              .withValue( 100 )
              .withValueType("per person") )
            .withCovTerm( new CovTermBuilder()
              .withType( "Personal money" )
              .withValue( 500 )
              .withValueType("per person") ) )
          .withCoverage( new PolicyCoverageBuilder()
            .withType( CoverageType.TC_HEALTH_TRAVEL)
            .withDeductible( 35 )
            .withIncidentLimit( 5000000 )
            .withCovTerm( new CovTermBuilder()
              .withType( "Burial & backhaul" )
              .withValue( 2500 )
              .withValueType("Per person") )
            .withCovTerm( new CovTermBuilder()
              .withType( "Death" )
              .withValue( 75000 )
              .withValueType("Per person") )
            .withCovTerm( new CovTermBuilder()
              .withType( "Hospital benefit" )
              .withValue( 200 )
              .withValueType("Per person") )
            .withCovTerm( new CovTermBuilder()
              .withType( "Hospital benefit" )
              .withValue( 20 )
              .withValueType("Per day") )
            .withCovTerm( new CovTermBuilder()
              .withType( "Search & rescue" )
              .withValue( 150000 )
              .withValueType("Per incident") ) )
          .withCoverage( new PolicyCoverageBuilder()
            .withType( CoverageType.TC_HIREDAUTO_TRAVEL)
            .withDeductible( 100 )
            .withIncidentLimit( 1000000 )
            .withCovTerm( new CovTermBuilder()
              .withType( "CDW, LDW, TP, SLI, PA" )
              .withValue( 75000 )
              .withValueType("Per exposure") ) )
          .withCoverage( new PolicyCoverageBuilder()
            .withType( CoverageType.TC_LIAB)
            .withDeductible( 100 )
            .withIncidentLimit( 2000000 )
            .withCovTerm( new CovTermBuilder()
              .withType( "Legal assistance" )
              .withValue( 25000 )
              .withValueType("Per person") )
            .withCovTerm( new CovTermBuilder()
              .withType( "Personal accident" )
              .withValue( 25000 )
              .withValueType("Per person") ) )
          .withCoverage( new PolicyCoverageBuilder()
            .withType( CoverageType.TC_TRIP )
            .withDeductible( 35 )
            .withExposureLimit( 5000 )
            .withIncidentLimit( 50000 )
            .withCovTerm( new CovTermBuilder()
              .withType( "Abandonment" )
              .withValue( 5000 )
              .withValueType("Per incident") )
            .withCovTerm( new CovTermBuilder()
              .withType( "Additional delay charges" )
              .withValue( 600 )
              .withValueType("Per incident") )
            .withCovTerm( new CovTermBuilder()
              .withType( "Cancellation" )
              .withValue( 5000 )
              .withValueType("Per person") )
            .withCovTerm( new CovTermBuilder()
              .withType( "Curtailment" )
              .withValue( 5000 )
              .withValueType("Per person") )
            .withCovTerm( new CovTermBuilder()
              .withType( "Delayed departure" )
              .withValue( 200 )
              .withValueType("Per person") ) )
  }
}

