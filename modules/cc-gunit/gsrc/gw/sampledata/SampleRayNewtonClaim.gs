package gw.sampledata
uses gw.sampledata.SampleDataBase
uses gw.transaction.Bundle
uses gw.plugin.policy.impl.PolicySearchPolicyGenerator

@Export
class SampleRayNewtonClaim extends SampleDataBase {

  construct(inCache : SampleDataCache) {
    super(inCache)
  }

  override property get Description() : String {
    return "Ray Newton Personal Auto Claim and associated Contacts, Policy, Exposures, Notes, ClaimContacts, Activities and Financials"
  }
   
  override function testSampleData(bundle : Bundle) {
    create(bundle)
  }
     
  function create(bundle : Bundle) : ClaimInfo {
    var vehicleDemoSample1 = new gw.api.databuilder.VehicleBuilder()
      .withYear(1997)
      .withLicensePlate("1HGJ465")
      .withPublicId("demo_sample:1")
      .withMake("Saturn")
      .withState("CA")
      .withModel("SL")
      .withVin("1GV234TV347463345")
      .create(bundle)

    var documentDemoSample1 = new gw.api.databuilder.DocumentBuilder()
      .withDocUID("235-53-365870/Exposure1/ISOMatchReport-2006-02-01-19-20-20.xml.xml")
      .withType("iso")
      .withDMS(true)
      .withObsolete(false)
      .withStatus("final")
      .withInbound(false)
      .withDateModified(BaseDate.addDays(0))
      .withName("ISOMatchReport-2006-02-01-19-20-20.xml")
      .withAuthor("ClaimCenter")
      .withMimeType("text/xml")
      .create(bundle)

    var contactDemoSample3022 = new gw.api.databuilder.PersonBuilder()
      .withLastName("Newton")
      .withPublicId("demo_sample:3022")
      .withFirstName("Ray")
      .withPrimaryPhone("work")
      .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("287 Kensington Rd. #1A")
        .withCountry("US")
        .withPostalCode("91145")
        .withState("CA")
        .withAddressType("home")
        .withCity("South Pasadena"))
      .withWorkPhone("818-446-1206")
      .withTaxID("123-45-6789")
      .create(bundle)

    var contactDemoSample3031 = new gw.api.databuilder.PersonBuilder()
      .withLastName("Simpson")
      .withPublicId("demo_sample:3031")
      .withFirstName("Bo")
      .withPrimaryPhone("work")
      .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("435 Duarte Ave")
        .withCountry("US")
        .withPostalCode("91006")
        .withState("CA")
        .withAddressType("home")
        .withCity("Arcadia"))
      .withWorkPhone("619-275-2346")
      .withTaxID("123-45-6791")
      .create(bundle)

    var contactDemoSample3032 = new gw.api.databuilder.PersonBuilder()
      .withLastName("Newton")
      .withPublicId("demo_sample:3032")
      .withFirstName("Stan")
      .withPrimaryPhone("work")
      .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("8356 Mountain View Rd.")
        .withCountry("US")
        .withPostalCode("91112")
        .withState("CA")
        .withAddressType("home")
        .withCity("San Bernadino"))
      .withWorkPhone("818-446-1206")
      .withTaxID("123-45-6790")
      .create(bundle)

    var contactDemoSample17 = new gw.api.databuilder.PersonBuilder()
      .withLastName("Egertson")
      .withPublicId("demo_sample:17")
      .withFirstName("Karen")
      .withPrimaryPhone("work")
      .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("908 Angels Landing Rd.")
        .withCountry("US")
        .withPostalCode("91352")
        .withState("CA")
        .withAddressType("home")
        .withCity("Anaheim"))
      .withWorkPhone("213-457-6378")
      .create(bundle)

    var contactDemoSample1001 = new gw.api.databuilder.PersonBuilder()
      .withLastName("Newton")
      .withPublicId("demo_sample:1001")
      .withFirstName("Brian")
      .withPrimaryPhone("work")
      .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("867 Mann Ave.")
        .withCountry("US")
        .withPostalCode("91352")
        .withState("CA")
        .withAddressType("home")
        .withCity("Alhambra"))
      .withWorkPhone("818-446-1206")
      .create(bundle)

    var claim = new gw.api.databuilder.ClaimBuilder()
      .withLitigationStatus("litigated")
      .withIncidentReport(false)
      .withWeather("CL")
      .withAssignmentStatus("assigned")
      .withLossDate(BaseDate.addDays(-10))
      .withFlaggedReason("Overdue, high-priority activity")
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStrategy("auto_fast")
      .withAssignmentDate(BaseDate.addDays(0))
      .withFlagged("isflagged")
      .withLossLocation(new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("1253 Paloma Ave")
        .withCountry("US")
        .withPostalCode("91007")
        .withState("CA")
        .withAddressType("home")
        .withCity("Arcadia"))
      .withLossCause("vehcollision")
      .withClaimNumber("235-53-365870")
      .withMainContactType("self")
      .withReportedByType("self")
      .withLossType("AUTO")
      .withValidationLevel("newloss")
      .withPolicy( new gw.api.databuilder.PolicyBuilder()
        .withExpirationDate(BaseDate.addDays(274))
        .withUnderwritingCo("parent")
        .withVerified(true)
        .withOrigEffectiveDate(BaseDate.addDays(-3266))
        .withAccount("Account 1")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withUnderwritingGroup("acme_auto")
        .withEffectiveDate(BaseDate.addDays(-PolicySearchPolicyGenerator.SAMPLE_POLICY_EFF_DATE_OFFSET))
        .withStatus("inforce")
        .withPolicyNumber(PolicySearchPolicyGenerator.SAMPLE_POLICY_NUMBER)
        .withPublicId("demo_sample:1")
        .withTotalProperties(0)
        .withPolicyType("auto_per")
        .withTotalVehicles(2)
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("Towing and Labor Costs Coverage")
          .withFormNumber("PP 03 03 "))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("Extended Non-Owned Coverage For Named Individual")
          .withFormNumber("PP 03 06"))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("Coverage For Excess Sound Reproducing Equipment, Audio, Visual & Data Electronic Equipment & Tapes, Records, Discs & Other Media")
          .withFormNumber("PP 03 13"))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(1)
          .withVehicle(vehicleDemoSample1)
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(15000)
            .withType("COLL")
            .withDeductible(500))
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(10000)
            .withType("COMP")
            .withDeductible(500))
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(15000)
            .withType("APD"))
          .withCoverage(new gw.api.databuilder.VehicleCoverageBuilder()
                         .withIncidentLimit(30000)
                         .withType("ABI")
                         .withExposureLimit(15000))
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(500)
            .withType("MPAY")))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(2)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
            .withYear(1996)
            .withLicensePlate("2GDH967")
            .withPublicId("demo_sample:3")
            .withMake("Toyota")
            .withState("CA")
            .withModel("Corolla")
            .withVin("3DGF78575GD892534"))
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(10000)
            .withType("COLL")
            .withDeductible(500))
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(5000)
            .withType("COMP")
            .withDeductible(500))
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(75000)
            .withType("APD"))
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(150000)
            .withType("ABI")
            .withExposureLimit(75000))
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(500)
            .withType("MPAY")))
        .withContactInRole(contactDemoSample3022, "insured")
        .withContactInRole(contactDemoSample17, "agent")
        .withCoveredParty(contactDemoSample3032, 1, "addinsured")
        .withContactInRole(contactDemoSample1001, "excludedparty"))
      .withFault(80)
      .withAssignedGroup(Auto1TeamA)
      .withJurisdictionState("CA")
      .withSegment("auto_mid")
      .withReportedDate(BaseDate.addDays(-10))
      .withCoverageInQuestion(false)
      .withLOBCode("auto")
      .withPublicID("demo_sample:1")
      .withDescription("Insured hit other party's car on the front passenger side while making a left turn.")
      .withState("open")
      .withAssignedUser(AndyApplegate)
      .withMatter( new gw.api.databuilder.MatterBuilder()
        .withCaseNumber("34-84982A")
        .withAssignedGroup(Auto1TeamA)
        .withAssignmentStatus("assigned")
        .withMediationDate(BaseDate.addDays(0))
        .withAssignedUser(AndyApplegate)
        .withFileDate(BaseDate.addDays(-1229))
        .withName("Ray Newton matter")
        .withTrialDate(BaseDate.addDays(0)))
      .withDocument(documentDemoSample1)
      .withContactInRole(contactDemoSample3022, "checkpayee")
      .withContactInRole(contactDemoSample3022, "maincontact")
      .withContactInRole(contactDemoSample3022, "reporter")
      .withNote( new gw.api.databuilder.NoteBuilder()
        .withTopic("general")
        .withAuthoringDate(BaseDate.addDays(-8))
        .withSubject("Initial phone call with insured")
        .withAuthor(findUserByUserName("cclark"))
        .withBody("Insured hit other party's car on the front passenger side while making a left turn.  Claimant was crossing the intersection in front of the insured (from left to right) when the collision occurred.  Insured says that he had a left turn arrow, but apparently the claimant also thought he had a green light."))
      .withNote( new gw.api.databuilder.NoteBuilder()
        .withTopic("general")
        .withAuthoringDate(BaseDate.addDays(-6))
        .withSubject("Phone call with insured driver")
        .withAuthor(AndyApplegate)
        .withBody("Spoke to insured driver.  He reported that the other party's car had suffered some damage and that although the other driver had not had any apparent injuries, he complained of non-specific pain and was taken from the scene of the accident by ambulance."))
      .withActivity( new gw.api.databuilder.ActivityBuilder()
        .withAssignmentStatus("assigned")
        .withAssignmentDate(BaseDate.addDays(-9))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance("notOnCalendar")
        .withCloseDate(BaseDate.addDays(-8))
        .withMandatory(true)
        .withPriority("high")
        .withActivityClass("task")
        .withAssignedGroup(Auto1TeamA)
        .withType("general")
        .withEscalationDate(BaseDate.addDays(-3))
        .withStatus("complete")
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withActivityPattern(findActivityPatternByCode("contact_insured"))
        .withSubject("Contact insured")
        .withAssignedUser(AndyApplegate)
        .withTargetDate(BaseDate.addDays(-8)))
      .withActivity( new gw.api.databuilder.ActivityBuilder()
        .withAssignmentStatus("assigned")
        .withAssignmentDate(BaseDate.addDays(-9))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance("notOnCalendar")
        .withMandatory(false)
        .withPriority("normal")
        .withActivityClass("task")
        .withAssignedGroup(Auto1TeamA)
        .withType("general")
        .withEscalationDate(BaseDate.addDays(5))
        .withStatus("open")
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withActivityPattern(findActivityPatternByCode("witness_statement"))
        .withSubject("Call witness")
        .withAssignedUser(AndyApplegate)
        .withTargetDate(BaseDate.addDays(-5)))
      .withActivity( new gw.api.databuilder.ActivityBuilder()
        .withAssignmentStatus("assigned")
        .withAssignmentDate(BaseDate.addDays(-9))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance("notOnCalendar")
        .withMandatory(false)
        .withPriority("normal")
        .withActivityClass("task")
        .withAssignedGroup(Auto1TeamA)
        .withType("general")
        .withEscalationDate(BaseDate.addDays(14))
        .withStatus("open")
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withActivityPattern(findActivityPatternByCode("subro_check"))
        .withSubject("Contact third party's insurance for possible subro")
        .withAssignedUser(AndyApplegate)
        .withTargetDate(BaseDate.addDays(4)))
      .withActivity( new gw.api.databuilder.ActivityBuilder()
        .withAssignmentStatus("assigned")
        .withAssignmentDate(BaseDate.addDays(-9))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance("notOnCalendar")
        .withMandatory(true)
        .withPriority("high")
        .withActivityClass("task")
        .withAssignedGroup(Auto1TeamA)
        .withType("general")
        .withDocumentTemplate("ReservationRights.doc")
        .withEscalationDate(BaseDate.addDays(14))
        .withStatus("open")
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withActivityPattern(findActivityPatternByCode("res_of_rights_letter"))
        .withSubject("Send reservation of rights letter")
        .withAssignedUser(AndyApplegate)
        .withTargetDate(BaseDate.addDays(11)))
      .create(bundle)
      
    var coverageForAggLimit = claim.Policy.RiskUnits.singleWhere( \ r -> r.RUNumber == 1 ).Coverages.singleWhere(\ c -> c.Type == "ABI")

    var rayNewtonClaimInfo = new gw.api.databuilder.ClaimInfoBuilder()
      .withRootPublicId("demo_sample:1")
      .withClaimNumber("235-53-365870")
      .onClaim(claim)
      .create(bundle)

    var policyPeriodDemoSample70001 = new gw.api.databuilder.PolicyPeriodBuilder()
      .withPolicy(new gw.api.databuilder.PeriodPolicyBuilder().onClaimInfo(rayNewtonClaimInfo))
      .withPolicyPeriodType("policy")
      .withExpirationDate(BaseDate.addDays(274))
      .withPolicyNumber(PolicySearchPolicyGenerator.SAMPLE_POLICY_NUMBER)
      .withPublicId("demo_sample:70001")
      .withPolicyType("auto_per")
      .withEffectiveDate(BaseDate.addDays(-PolicySearchPolicyGenerator.SAMPLE_POLICY_EFF_DATE_OFFSET))
      .create(bundle)

    var aggregateLimitDemoSample90001 = new gw.api.databuilder.AggregateLimitBuilder()
      .withLimitAmount(100000)
      .withCoverageLine( new gw.api.databuilder.CoverageLineLimitBuilder()
        .withCoverageLine( new gw.api.databuilder.CoverageLineBuilder()
          .withExposureUnitNumber(1)
          .withCoverageType("ABI")
          .withCoverageSubtype("VehicleCoverage")
          .withCoverage(new gw.api.databuilder.LineCoverageBuilder().withCoverage(coverageForAggLimit))
          .onPolicyPeriod(policyPeriodDemoSample70001)) )
      .withPublicId("demo_sample:90001")
      .withLimitType("lossdate")
      .onPolicyPeriod(policyPeriodDemoSample70001)
      .create(bundle)

    var exposureDemoSample10001 = new gw.api.databuilder.ExposureBuilder()
      .withOtherCoverage(false)
      .withLossParty("insured")
      .withExposureType("VehicleDamage")
      .withAssignedGroup(Auto1TeamA)
      .withAssignmentStatus("assigned")
      .withStrategy("auto_fast")
      .withProgress("investigation")
      .withJurisdictionState("CA")
      .withAssignmentDate(BaseDate.addDays(0))
      .withPrimaryCoverage("COLL")
      .withSegment("auto_low")
      .withClaimantType("insured")
      .withClaimOrder(1)
      .withPublicID("demo_sample:10001")
      .withState("open")
      .withAssignedUser(AndyApplegate)
      .onClaim(claim)
      .withCoverageSubType("coll_vd")
      .withIncident( new gw.api.databuilder.VehicleIncidentBuilder()
        .withSpeed(20)
        .withSeverity("minor")
        .withCollisionPoint("front")
        .withDriverRelation("self")
        .withDescription("Damage to front left fender, body, and frame.  Cracked driver-side mirror.")
        .withVehicle(vehicleDemoSample1)
        .withOwnersPermission(true)
        .withVehicleDirection("forward")
        .withContactInRole(contactDemoSample3032, "driver"))
      .withISOSendDate(BaseDate.addDays(-9))
      .withISOReceiveDate(BaseDate.addDays(-9))
      .withISOMatchReport( new gw.api.databuilder.ExposureISOMatchReportBuilder()
        .withInsurerAddressPostalCode("94403")
        .withReceivedDate(BaseDate.addDays(0))
        .withInsurerAddressState("CA")
        .withInsurerAddressCity("SAN MATEO")
        .withInsurerAddress1("2121 S EL CAMINO REAL")
        .withInsuringCompany("GUIDEWIRE")
        .withPolicyNumber("541234565")
        .withMatchReasons("N,A")
        .withDateOfLoss(BaseDate.addDays(0))
        .withPolicyType("PAPP")
        .withClaimNumber("2355336587025")
        .withInsurerPhone("+1-650-3579100"))
      .withContactInRole(contactDemoSample3022, "claimant")
      .create(bundle)

    var exposureDemoSample10002 = new gw.api.databuilder.ExposureBuilder()
      .withOtherCoverage(true)
      .withLossParty("third_party")
      .withExposureType("VehicleDamage")
      .withAssignedGroup(Auto1TeamA)
      .withAssignmentStatus("assigned")
      .withStrategy("auto_normal")
      .withProgress("investigation")
      .withJurisdictionState("CA")
      .withAssignmentDate(BaseDate.addDays(0))
      .withPrimaryCoverage("APD")
      .withSegment("auto_mid")
      .withClaimantType("veh_other_owner")
      .withClaimOrder(3)
      .withPublicID("demo_sample:10002")
      .withState("open")
      .withAssignedUser(AndyApplegate)
      .onClaim(claim)
      .withCoverageSubType("apd_vd")
      .withIncident( new gw.api.databuilder.VehicleIncidentBuilder()
        .withSpeed(30)
        .withSeverity("major-auto")
        .withCollisionPoint("rightside")
        .withDriverRelation("self")
        .withDescription("Damage to right side doors and front quarter panel.")
        .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(1990)
          .withLicensePlate("7FDG745")
          .withPublicId("demo_sample:2")
          .withMake("Mazda")
          .withState("CA")
          .withModel("626")
          .withVin("6GYF54637HD647402"))
        .withOwnersPermission(true)
        .withVehicleDirection("forward")
        .withContactInRole(contactDemoSample3031, "driver"))
      .withContactInRole(contactDemoSample3031, "claimant")
      .create(bundle)

    var exposureDemoSample20001 = new gw.api.databuilder.ExposureBuilder()
      .withOtherCoverage(false)
      .withLossParty("insured")
      .withExposureType("MedPay")
      .withAssignedGroup(Auto1TeamA)
      .withAssignmentStatus("assigned")
      .withStrategy("injury_fast")
      .withProgress("investigation")
      .withJurisdictionState("CA")
      .withAssignmentDate(BaseDate.addDays(0))
      .withPrimaryCoverage("MPAY")
      .withSegment("injury_low")
      .withClaimantType("householdmember")
      .withClaimOrder(2)
      .withPublicID("demo_sample:20001")
      .withState("open")
      .withAssignedUser(AndyApplegate)
      .onClaim(claim)
      .withCoverageSubType("mpay_mp")
      .withIncident( new gw.api.databuilder.InjuryIncidentBuilder()
        .withGeneralInjuryType("specific")
        .withSeverity("minor")
        .withDescription("Broken left arm, stitches in left temple from impact with car.")
        .withMedicalTreatmentType("one_doctor")
        .withDetailedInjuryType("28")
        .withLostWages(false)
        .withBodyPart( new gw.api.databuilder.BodyPartDetailsBuilder()
          .withPrimaryBodyPart("upper")
          .withOrdering(100))
        .withContactInRole(contactDemoSample3032, "injured"))
      .withContactInRole(contactDemoSample3022, "altcontact")
      .withContactInRole(contactDemoSample3032, "claimant")
      .create(bundle)

    var exposureDemoSample20002 = new gw.api.databuilder.ExposureBuilder()
      .withOtherCoverage(true)
      .withLossParty("third_party")
      .withOtherCoverageInfo("employer health plan with Kaiser")
      .withExposureType("BodilyInjuryDamage")
      .withAssignedGroup(findGroupByName("BI Review Team"))
      .withAssignmentStatus("assigned")
      .withStrategy("injury_normal")
      .withProgress("investigation")
      .withJurisdictionState("CA")
      .withAssignmentDate(BaseDate.addDays(0))
      .withPrimaryCoverage("ABI")
      .withSegment("injury_mid")
      .withClaimantType("veh_other_owner")
      .withClaimOrder(4)
      .withPublicID("demo_sample:20002")
      .withState("open")
      .withAssignedUser(findUserByUserName("clevitt"))
      .onClaim(claim)
      .withCoverageSubType("abi_bid")
      .withIncident( new gw.api.databuilder.InjuryIncidentBuilder()
        .withGeneralInjuryType("specific")
        .withSeverity("moderate-gen")
        .withDescription("Multiple broken ribs, punctured lung, lacerations of the face and left arm")
        .withMedicalTreatmentType("hospital")
        .withDetailedInjuryType("28")
        .withLostWages(true)
        .withBodyPart( new gw.api.databuilder.BodyPartDetailsBuilder()
          .withPrimaryBodyPart("trunk")
          .withDetailedBodyPart(DetailedBodyPartType.TC_63)
          .withOrdering(100))
        .withContactInRole(contactDemoSample3031, "injured"))
      .withContactInRole(contactDemoSample3031, "claimant")
      .withNote( new gw.api.databuilder.NoteBuilder()
        .withTopic("general")
        .withAuthoringDate(BaseDate.addDays(-5))
        .withSubject("Initial phone call with claimant")
        .onClaim(claim)
        .withAuthor(AndyApplegate)
        .withBody("Spoke with the claimant.  He was not admitted to the hospital, but was treated in the emergency room for bruised or broken ribs.  I asked him to send medical reports and any bills to me while telling him that we are not accepting liability yet until we can gather more facts about the claim.  He also said that he recalled the person driving the car was named Bob, not Stan."))
      .create(bundle)

    new gw.api.databuilder.ActivityBuilder()
      .onClaim(claim)
      .withAssignmentStatus("assigned")
      .withAssignmentDate(BaseDate.addDays(-9))
      .withEscalated(false)
      .withRecurring(false)
      .withImportance("notOnCalendar")
      .withMandatory(true)
      .withPriority("high")
      .withActivityClass("task")
      .withAssignedGroup(Auto1TeamA)
      .withType("general")
      .withEscalationDate(BaseDate.addDays(-2))
      .withStatus("open")
      .withAutoGenerated(true)
      .withLastViewedDate(BaseDate.addDays(-2415))
      .withActivityPattern(findActivityPatternByCode("general_reminder"))
      .withSubject("Determine fault rating")
      .withAssignedUser(AndyApplegate)
      .withTargetDate(BaseDate.addDays(-7))
      .withClaimContact(claim.getClaimContact(contactDemoSample3022))
      .create(bundle)

    new gw.api.databuilder.ActivityBuilder()
      .onClaim(claim)
      .withAssignmentStatus("assigned")
      .withAssignmentDate(BaseDate.addDays(-9))
      .withEscalated(false)
      .withRecurring(false)
      .withImportance("notOnCalendar")
      .withCloseDate(BaseDate.addDays(-8))
      .withMandatory(true)
      .withPriority("high")
      .withActivityClass("task")
      .withAssignedGroup(Auto1TeamA)
      .withType("general")
      .withEscalationDate(BaseDate.addDays(-3))
      .withStatus("complete")
      .withAutoGenerated(true)
      .withLastViewedDate(BaseDate.addDays(-2415))
      .withActivityPattern(findActivityPatternByCode("contact_claimant"))
      .withSubject("Make initial claimant contact")
      .withAssignedUser(AndyApplegate)
      .withTargetDate(BaseDate.addDays(-8))
      .withClaimContact(claim.getClaimContact(contactDemoSample3032))
      .create(bundle)
      
    new gw.api.databuilder.ActivityBuilder()
      .onClaim(claim)
      .withAssignmentStatus("assigned")
      .withAssignmentDate(BaseDate.addDays(-9))
      .withEscalated(false)
      .withRecurring(false)
      .withImportance("notOnCalendar")
      .withMandatory(false)
      .withPriority("normal")
      .withActivityClass("task")
      .withAssignedGroup(Auto1TeamA)
      .withType("general")
      .withEscalationDate(BaseDate.addDays(15))
      .withStatus("open")
      .withAutoGenerated(true)
      .withLastViewedDate(BaseDate.addDays(-2415))
      .withActivityPattern(findActivityPatternByCode("police_report"))
      .withSubject("Get police report")
      .withAssignedUser(AndyApplegate)
      .withTargetDate(BaseDate.addDays(5))
      .withClaimContact(claim.getClaimContact(contactDemoSample3031))
      .create(bundle)

    new gw.api.databuilder.ActivityBuilder()
      .onClaim(claim)
      .withAssignmentStatus("assigned")
      .withAssignmentDate(BaseDate.addDays(-9))
      .withEscalated(false)
      .withRecurring(false)
      .withImportance("notOnCalendar")
      .withMandatory(false)
      .withPriority("normal")
      .withActivityClass("task")
      .withAssignedGroup(Auto1TeamA)
      .withType("general")
      .withEscalationDate(BaseDate.addDays(18))
      .withStatus("open")
      .withAutoGenerated(true)
      .withLastViewedDate(BaseDate.addDays(-2415))
      .withDescription("Saturn SL")
      .withActivityPattern(findActivityPatternByCode("vehicle_inspection"))
      .withSubject("Get vehicle inspected")
      .withAssignedUser(AndyApplegate)
      .withTargetDate(BaseDate.addDays(4))
      .withExposure(exposureDemoSample10001)
      .create(bundle)

    new gw.api.databuilder.ActivityBuilder()
      .onClaim(claim)
      .withAssignmentStatus("assigned")
      .withAssignmentDate(BaseDate.addDays(-9))
      .withEscalated(false)
      .withRecurring(false)
      .withImportance("notOnCalendar")
      .withMandatory(false)
      .withPriority("normal")
      .withActivityClass("task")
      .withAssignedGroup(Auto1TeamA)
      .withType("general")
      .withEscalationDate(BaseDate.addDays(18))
      .withStatus("open")
      .withAutoGenerated(true)
      .withLastViewedDate(BaseDate.addDays(-2415))
      .withDescription("Mazda 626")
      .withActivityPattern(findActivityPatternByCode("vehicle_inspection"))
      .withSubject("Get vehicle inspected")
      .withAssignedUser(AndyApplegate)
      .withTargetDate(BaseDate.addDays(4))
      .withExposure(exposureDemoSample10002)
      .create(bundle)

    new gw.api.databuilder.ActivityBuilder()
      .onClaim(claim)
      .withAssignmentStatus("assigned")
      .withAssignmentDate(BaseDate.addDays(-9))
      .withEscalated(false)
      .withRecurring(false)
      .withImportance("notOnCalendar")
      .withMandatory(false)
      .withPriority("normal")
      .withActivityClass("task")
      .withAssignedGroup(findGroupByName("BI Review Team"))
      .withType("general")
      .withEscalationDate(BaseDate.addDays(7))
      .withStatus("open")
      .withAutoGenerated(true)
      .withLastViewedDate(BaseDate.addDays(-2415))
      .withActivityPattern(findActivityPatternByCode("medical_report_claimant"))
      .withSubject("Review medical reports for claimant injuries")
      .withAssignedUser(findUserByUserName("clevitt"))
      .withTargetDate(BaseDate.addDays(4))
      .withExposure(exposureDemoSample20002)
      .create(bundle)

    new gw.api.databuilder.ActivityBuilder()
      .onClaim(claim)
      .withAssignmentStatus("assigned")
      .withAssignmentDate(BaseDate.addDays(-9))
      .withEscalated(false)
      .withRecurring(false)
      .withImportance("notOnCalendar")
      .withMandatory(false)
      .withPriority("normal")
      .withActivityClass("task")
      .withAssignedGroup(findGroupByName("BI Review Team"))
      .withType("general")
      .withEscalationDate(BaseDate.addDays(19))
      .withStatus("open")
      .withAutoGenerated(true)
      .withLastViewedDate(BaseDate.addDays(-2415))
      .withActivityPattern(findActivityPatternByCode("general_reminder"))
      .withSubject("Use injury evaluation system")
      .withAssignedUser(findUserByUserName("clevitt"))
      .withTargetDate(BaseDate.addDays(5))
      .withExposure(exposureDemoSample20002)
      .create(bundle)

    var transactionSetDemoSample20001 = new gw.api.databuilder.CheckSetBuilder()
      .withApprovalDate(BaseDate.addDays(-6))
      .withRequestingUser(AndyApplegate)
      .withApprovalStatus("approved")
      .onClaim(claim)
      .create(bundle)

    var transactionSetDemoSample20003 = new gw.api.databuilder.ReserveSetBuilder()
      .withApprovalDate(BaseDate.addDays(-9))
      .withRequestingUser(AndyApplegate)
      .withApprovalStatus("approved")
      .onClaim(claim)
      .create(bundle)

    var reserveLineDemoSample1 = new gw.api.databuilder.ReserveLineBuilder()
      .withExposure(exposureDemoSample10001)
      .withCostType("claimcost")
      .withCostCategory("body")
      .withClaim(claim)
      .create(bundle)

    var reserveLineDemoSample2 = new gw.api.databuilder.ReserveLineBuilder()
      .withExposure(exposureDemoSample10002)
      .withCostType("claimcost")
      .withCostCategory("body")
      .withClaim(claim)
      .create(bundle)

    var reserveLineDemoSample3 = new gw.api.databuilder.ReserveLineBuilder()
      .withExposure(exposureDemoSample20001)
      .withCostType("claimcost")
      .withCostCategory("medical")
      .withClaim(claim)
      .create(bundle)

    var reserveLineDemoSample4 = new gw.api.databuilder.ReserveLineBuilder()
      .withExposure(exposureDemoSample20002)
      .withCostType("claimcost")
      .withCostCategory("medical")
      .withClaim(claim)
      .create(bundle)

    var reserveLineDemoSample5 = new gw.api.databuilder.ReserveLineBuilder()
      .withExposure(exposureDemoSample10001)
      .withCostType("aoexpense")
      .withCostCategory("other")
      .withClaim(claim)
      .create(bundle)

    var reserveLineDemoSample6 = new gw.api.databuilder.ReserveLineBuilder()
      .withExposure(exposureDemoSample10002)
      .withCostType("aoexpense")
      .withCostCategory("inspection")
      .withClaim(claim)
      .create(bundle)

    var reserveLineDemoSample7 = new gw.api.databuilder.ReserveLineBuilder()
      .withExposure(exposureDemoSample20001)
      .withCostType("aoexpense")
      .withCostCategory("other")
      .withClaim(claim)
      .create(bundle)

    var reserveLineDemoSample8 = new gw.api.databuilder.ReserveLineBuilder()
      .withExposure(exposureDemoSample20002)
      .withCostType("aoexpense")
      .withCostCategory("other")
      .withClaim(claim)
      .create(bundle)

    var checkDemoSample10100 = new gw.api.databuilder.CheckBuilder()
      .onClaim(claim)
      .withIssueDate(BaseDate.addDays(-6))
      .withScheduledSendDate(BaseDate.addDays(-6))
      .withBankAccount("default")
      .onCheckSet(transactionSetDemoSample20001)
      .withPayTo("Ray Newton")
      .withStatus("issued")
      .withPaymentMethod("check")
      .withCheckNumber("10436")
      .withPayee((new gw.api.databuilder.CheckPayeeBuilder().withPayee(contactDemoSample3022)
        .withPayeeType("claimant")) as gw.api.databuilder.ValueGenerator<CheckPayee>)
      .withType("primary")
      .withDeduction(new gw.api.databuilder.DeductionBuilder()
        .withReportingAmount(100)
        .withDeductionType("irs")
        .withClaimAmount(100)
        .withTransactionAmount(100))
      .create(bundle)

    var transactionDemoSample10001 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample1)
      .onExposure(exposureDemoSample10001)
      .onTransactionSet(transactionSetDemoSample20003)
      .withCostType("claimcost")
      .withCostCategory("body")
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus("submitted")
      .onClaim(claim)
      .withTransToClaimExchangeRate(find(s in ExchangeRate where s.PublicID == "demo_sample:1000").getFirstResult())
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Repairs")
        .withClaimForExAmount(0)
        .withReportingAmount(500)
        .withClaimAmount(500)
        .withTransactionAmount(500)
        .withLineCategory("other")
        .withReportingForExAmount(0))
      .create(bundle)

    var transactionDemoSample10002 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample2)
      .onExposure(exposureDemoSample10002)
      .onTransactionSet(transactionSetDemoSample20003)
      .withCostType("claimcost")
      .withCostCategory("body")
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus("submitted")
      .onClaim(claim)
      .withTransToClaimExchangeRate(find(s in ExchangeRate where s.PublicID == "demo_sample:1000").getFirstResult())
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Repairs")
        .withClaimForExAmount(0)
        .withReportingAmount(4000)
        .withClaimAmount(4000)
        .withTransactionAmount(4000)
        .withLineCategory("other")
        .withReportingForExAmount(0))
      .create(bundle)

    var transactionDemoSample10003 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample3)
      .onExposure(exposureDemoSample20001)
      .onTransactionSet(transactionSetDemoSample20003)
      .withCostType("claimcost")
      .withCostCategory("medical")
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus("submitted")
      .onClaim(claim)
      .withTransToClaimExchangeRate(find(s in ExchangeRate where s.PublicID == "demo_sample:1000").getFirstResult())
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Doctor's visit")
        .withClaimForExAmount(0)
        .withReportingAmount(500)
        .withClaimAmount(500)
        .withTransactionAmount(500)
        .withLineCategory("doctor")
        .withReportingForExAmount(0))
      .create(bundle)

    var transactionDemoSample10004 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample3)
      .onExposure(exposureDemoSample20001)
      .onTransactionSet(transactionSetDemoSample20003)
      .withCostType("claimcost")
      .withCostCategory("medical")
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus("submitted")
      .onClaim(claim)
      .withTransToClaimExchangeRate(find(s in ExchangeRate where s.PublicID == "demo_sample:1000").getFirstResult())
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Physical Therapy")
        .withClaimForExAmount(0)
        .withReportingAmount(2500)
        .withClaimAmount(2500)
        .withTransactionAmount(2500)
        .withLineCategory("pt")
        .withReportingForExAmount(0))
      .create(bundle)

    var transactionDemoSample10005 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample4)
      .onExposure(exposureDemoSample20002)
      .onTransactionSet(transactionSetDemoSample20003)
      .withCostType("claimcost")
      .withCostCategory("medical")
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus("submitted")
      .onClaim(claim)
      .withTransToClaimExchangeRate(find(s in ExchangeRate where s.PublicID == "demo_sample:1000").getFirstResult())
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Emergency room visit")
        .withClaimForExAmount(0)
        .withReportingAmount(6500)
        .withClaimAmount(6500)
        .withTransactionAmount(6500)
        .withLineCategory("doctor")
        .withReportingForExAmount(0))
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Therapy")
        .withClaimForExAmount(0)
        .withReportingAmount(1500)
        .withClaimAmount(1500)
        .withTransactionAmount(1500)
        .withLineCategory("pt")
        .withReportingForExAmount(0))
      .create(bundle)

    var transactionDemoSample10006 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample5)
      .onExposure(exposureDemoSample10001)
      .onTransactionSet(transactionSetDemoSample20003)
      .withCostType("aoexpense")
      .withCostCategory("other")
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus("submitted")
      .onClaim(claim)
      .withTransToClaimExchangeRate(find(s in ExchangeRate where s.PublicID == "demo_sample:1000").getFirstResult())
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Collision specialist fee")
        .withClaimForExAmount(0)
        .withReportingAmount(400)
        .withClaimAmount(400)
        .withTransactionAmount(400)
        .withLineCategory("other")
        .withReportingForExAmount(0))
      .create(bundle)

    var transactionDemoSample10007 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample6)
      .onExposure(exposureDemoSample10002)
      .onTransactionSet(transactionSetDemoSample20003)
      .withCostType("aoexpense")
      .withCostCategory("inspection")
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus("submitted")
      .onClaim(claim)
      .withTransToClaimExchangeRate(find(s in ExchangeRate where s.PublicID == "demo_sample:1000").getFirstResult())
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Vehicle inspection fee")
        .withClaimForExAmount(0)
        .withReportingAmount(1000)
        .withClaimAmount(1000)
        .withTransactionAmount(1000)
        .withLineCategory("other")
        .withReportingForExAmount(0))
      .create(bundle)

    var transactionDemoSample10008 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample7)
      .onExposure(exposureDemoSample20001)
      .onTransactionSet(transactionSetDemoSample20003)
      .withCostType("aoexpense")
      .withCostCategory("other")
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus("submitted")
      .onClaim(claim)
      .withTransToClaimExchangeRate(find(s in ExchangeRate where s.PublicID == "demo_sample:1000").getFirstResult())
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Injury report fee")
        .withClaimForExAmount(0)
        .withReportingAmount(500)
        .withClaimAmount(500)
        .withTransactionAmount(500)
        .withLineCategory("other")
        .withReportingForExAmount(0))
      .create(bundle)

    var transactionDemoSample10009 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample8)
      .onExposure(exposureDemoSample20002)
      .onTransactionSet(transactionSetDemoSample20003)
      .withCostType("aoexpense")
      .withCostCategory("other")
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus("submitted")
      .onClaim(claim)
      .withTransToClaimExchangeRate(find(s in ExchangeRate where s.PublicID == "demo_sample:1000").getFirstResult())
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("BI specialist fee")
        .withClaimForExAmount(0)
        .withReportingAmount(1000)
        .withClaimAmount(1000)
        .withTransactionAmount(1000)
        .withLineCategory("other")
        .withReportingForExAmount(0))
      .create(bundle)

    var transactionDemoSample20001 = new gw.api.databuilder.PaymentBuilder()
      .withReserveLine(reserveLineDemoSample1)
      .onTransactionSet(transactionSetDemoSample20001)
      .withCostCategory("body")
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus("submitted")
      .withTransToClaimExchangeRate(find(s in ExchangeRate where s.PublicID == "demo_sample:1000").getFirstResult())
      .onCheck(checkDemoSample10100)
      .withPaymentType("partial")
      .onExposure(exposureDemoSample10001)
      .withCostType("claimcost")
      .onClaim(claim)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Repairs")
        .withClaimForExAmount(0)
        .withReportingAmount(100)
        .withClaimAmount(100)
        .withTransactionAmount(100)
        .withLineCategory("other")
        .withReportingForExAmount(0))
      .create(bundle)

    var transactionDemoSample20002 = new gw.api.databuilder.PaymentBuilder()
      .withReserveLine(reserveLineDemoSample3)
      .onTransactionSet(transactionSetDemoSample20001)
      .withCostCategory("medical")
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus("submitted")
      .withTransToClaimExchangeRate(find(s in ExchangeRate where s.PublicID == "demo_sample:1000").getFirstResult())
      .onCheck(checkDemoSample10100)
      .withPaymentType("partial")
      .onExposure(exposureDemoSample20001)
      .withCostType("claimcost")
      .onClaim(claim)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Doctor's visit")
        .withClaimForExAmount(0)
        .withReportingAmount(500)
        .withClaimAmount(500)
        .withTransactionAmount(500)
        .withLineCategory("doctor")
        .withReportingForExAmount(0))
      .create(bundle)

    var transactionDemoSample20003 = new gw.api.databuilder.PaymentBuilder()
      .withReserveLine(reserveLineDemoSample3)
      .onTransactionSet(transactionSetDemoSample20001)
      .withCostCategory("medical")
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus("submitted")
      .withTransToClaimExchangeRate(find(s in ExchangeRate where s.PublicID == "demo_sample:1000").getFirstResult())
      .onCheck(checkDemoSample10100)
      .withPaymentType("partial")
      .onExposure(exposureDemoSample20001)
      .withCostType("claimcost")
      .onClaim(claim)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Physical Therapy")
        .withClaimForExAmount(0)
        .withReportingAmount(500)
        .withClaimAmount(500)
        .withTransactionAmount(500)
        .withLineCategory("pt")
        .withReportingForExAmount(0))
      .create(bundle)

    var transactionDemoSample20004 = new gw.api.databuilder.PaymentBuilder()
      .withReserveLine(reserveLineDemoSample5)
      .onTransactionSet(transactionSetDemoSample20001)
      .withCostCategory("other")
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus("submitted")
      .withTransToClaimExchangeRate(find(s in ExchangeRate where s.PublicID == "demo_sample:1000").getFirstResult())
      .onCheck(checkDemoSample10100)
      .withPaymentType("partial")
      .onExposure(exposureDemoSample10001)
      .withCostType("aoexpense")
      .onClaim(claim)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Collision specialist fee")
        .withClaimForExAmount(0)
        .withReportingAmount(400)
        .withClaimAmount(400)
        .withTransactionAmount(400)
        .withLineCategory("other")
        .withReportingForExAmount(0))
      .create(bundle)

    var transactionDemoSample20005 = new gw.api.databuilder.PaymentBuilder()
      .withReserveLine(reserveLineDemoSample7)
      .onTransactionSet(transactionSetDemoSample20001)
      .withCostCategory("other")
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus("submitted")
      .withTransToClaimExchangeRate(find(s in ExchangeRate where s.PublicID == "demo_sample:1000").getFirstResult())
      .onCheck(checkDemoSample10100)
      .withPaymentType("partial")
      .onExposure(exposureDemoSample20001)
      .withCostType("aoexpense")
      .onClaim(claim)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("BI specialist")
        .withClaimForExAmount(0)
        .withReportingAmount(500)
        .withClaimAmount(500)
        .withTransactionAmount(500)
        .withLineCategory("other")
        .withReportingForExAmount(0))
      .create(bundle)

    new gw.api.databuilder.UserRoleAssignmentBuilder()
      .withComments("sample")
      .withActive(true)
      .withAssignedGroup(Auto1TeamA)
      .withAssignmentStatus("assigned")
      .withPublicId("demo_sample:1")
      .withRole("relateduser")
      .withAssignedUser(findUserByUserName("ccraft"))
      .onClaim(claim)
      .create(bundle)

    new gw.api.databuilder.UserRoleAssignmentBuilder()
      .withComments("sample")
      .withActive(true)
      .onExposure(exposureDemoSample10001)
      .withAssignedGroup(Auto1TeamA)
      .withAssignmentStatus("assigned")
      .withPublicId("demo_sample:2")
      .withRole("subrogationowner")
      .withAssignedUser(findUserByUserName("dhenson"))
      .onClaim(claim)
      .create(bundle)

    new gw.api.databuilder.MessageBuilder()
      .withAckCount(3)
      .withDuplicateCount(2)
      .withObjectKey("claim:1")
      .withRetryCount(0)
      .withStatus(4)
      .withCreationTime(BaseDate.addDays(-244))
      .withSendOrder(5)
      .withEventRootKey("claim:1")
      .withPublicId("default_data:5")
      .withDestinationID(65)
      .withErrorDescription("An error occurred")
      .withPayload("Payload 5")
      .withClaim(claim)
      .withEventName("Event 5")
      .create(bundle)

    new gw.api.databuilder.MessageBuilder()
      .withAckCount(0)
      .withDuplicateCount(0)
      .withObjectKey("claim:1")
      .withRetryCount(0)
      .withStatus(1)
      .withCreationTime(BaseDate.addDays(-244))
      .withSendOrder(6)
      .withEventRootKey("claim:1")
      .withPublicId("default_data:8")
      .withDestinationID(65)
      .withPayload("Payload 8")
      .withClaim(claim)
      .withEventName("Event 8")
      .create(bundle)

    new gw.api.databuilder.MessageHistoryBuilder()
      .withAckCount(1)
      .withDuplicateCount(0)
      .withObjectKey("claim:1")
      .withRetryCount(0)
      .withStatus(10)
      .withCreationTime(BaseDate.addDays(-244))
      .withSendOrder(1)
      .withEventRootKey("claim:1")
      .withPublicId("default_data:1")
      .withDestinationID(65)
      .withPayload("Payload 1")
      .withOrigMsgId(1)
      .withClaim(claim)
      .withEventName("Event 1")
      .create(bundle)

    new gw.api.databuilder.MessageHistoryBuilder()
      .withAckCount(0)
      .withDuplicateCount(0)
      .withObjectKey("claim:1")
      .withRetryCount(0)
      .withStatus(13)
      .withCreationTime(BaseDate.addDays(-244))
      .withSendOrder(4)
      .withEventRootKey("claim:1")
      .withPublicId("default_data:4")
      .withDestinationID(65)
      .withPayload("Payload 4")
      .withOrigMsgId(4)
      .withClaim(claim)
      .withEventName("Event 4")
      .create(bundle)

    return rayNewtonClaimInfo
  }
}

