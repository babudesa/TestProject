package rules.Validation.ClaimValidationRules_dir.CLV10000Catastrophe_dir

@gw.rules.RuleName("CLV10200 - Check Loss Date and Zone")
internal class CLV10200CheckLossDateandZone {
  static function doCondition(claim : entity.Claim) : boolean {
    return /*start00rule*/true/*end00rule*/
  }

  static function doAction(claim : entity.Claim, actions : gw.rules.Action) {
/*start00rule*/var dateMatch =
   Claim.Catastrophe.CatastropheValidFrom == null
   or Claim.Catastrophe.CatastropheValidTo == null
   or (Claim.Catastrophe.CatastropheValidFrom <= Claim.LossDate
       and Claim.Catastrophe.CatastropheValidTo >= Claim.LossDate)

var zoneMatch = claim.Catastrophe.CatastropheZones.length == 0
  or claim.getCatastropheMatchesByZoneOnly().contains(claim.Catastrophe)
if (!dateMatch or !zoneMatch) {
  var ruleName = gw.api.util.StringUtil.substring( actions.getRule().DisplayName, 0,8)
  var mainMessage : String;
  if (!dateMatch and !zoneMatch) {
    mainMessage = displaykey.Warning.Catastrophe.LossDateStateNotConsistant(ruleName)
  } else if (!zoneMatch) {
    mainMessage = displaykey.Warning.Catastrophe.ZoneNotConsistant(ruleName,claim.LossLocation)
  } else if (!dateMatch) {
    mainMessage = displaykey.Warning.Catastrophe.LossDateNotConsistant(ruleName)
  }
  Claim.reject("newloss", mainMessage , null, null )
}/*end00rule*/
  }
}
