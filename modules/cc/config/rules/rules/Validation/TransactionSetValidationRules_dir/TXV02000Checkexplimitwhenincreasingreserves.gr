package rules.Validation.TransactionSetValidationRules_dir

@gw.rules.RuleName("TXV02000 - Check exp limit when increasing reserves")
internal class TXV02000Checkexplimitwhenincreasingreserves {
  static function doCondition(transactionSet : entity.TransactionSet) : boolean {
    return /*start00rule*/transactionSet.Subtype =="ReserveSet" 
&& transactionSet.New
//The transactionset.new condition disallows the rule from executing for all transactions associated
//with the claim (because we want the rule to execute only for the new transactions that we are trying to add)./*end00rule*/
  }

  static function doAction(transactionSet : entity.TransactionSet, actions : gw.rules.Action) {
/*start00rule*/uses org.apache.commons.lang.ObjectUtils
uses java.math.BigDecimal
uses gw.api.financials.CurrencyAmount
uses gw.api.util.CurrencyUtil
uses gw.api.financials.FinancialsCalculationUtil

var totalPaymentsIncludingPendingExp = FinancialsCalculationUtil.getTotalPaymentsIncludingPendingExpression()
var availableReservesExp = FinancialsCalculationUtil.getAvailableReservesExpression()
var pendingApprovalReservesExp = FinancialsCalculationUtil.getPendingApprovalReservesExpression()
var committedAndFutureAndPendingApprovalPaymentsAndReservesExpression = totalPaymentsIncludingPendingExp.plus( availableReservesExp ).plus( pendingApprovalReservesExp )
//Set the following warning parameter (warning) to true if you want to throw a warning, but still permit the end-user to continue with the transaction if he/she desires
//Set to false if you want to block this transaction
var warning = true
var costType = CostType.TC_CLAIMCOST
var exposureSet = new java.util.HashSet<Exposure>()
var currency = transactionSet.Claim.Currency

for (transaction in transactionSet.Transactions) {
  exposureSet.add(transaction.Exposure)
}
      
for (exposure in exposureSet) {
  //This rule triggers only if the exposure has a coverage with an exposure limit defined (exp.Coverage.exposurelimit != null ).
  //The reason you have !exp.new AND exp.ExposureType != &quot;vehicledamage is that you don&apos;t want this rule to trigger when 
  //you are creating a exposure (namely VEHICLEDAMAGE) that automatically creates a reserve
  if (exposure.Coverage.ExposureLimit != null) {
    var combined = FinancialsCalculationUtil.getFinancialsCalculation(committedAndFutureAndPendingApprovalPaymentsAndReservesExpression).getAmount( exposure, costType )
    combined = ObjectUtils.defaultIfNull( combined, CurrencyAmount.getStrict(BigDecimal.ZERO, currency )) as CurrencyAmount 

    if (combined > exposure.Coverage.ExposureLimit ) {
      //If Warning is set to TRUE, throw a warning, but permit the transaction to go through if the user desires so
      if (warning == true) {
        transactionSet.reject( null, null, "payment", 
          displaykey.Rules.Validation.Transaction.ReserveExceedsExposureLimitWarning(exposure,CurrencyUtil.renderAsCurrency(combined),CurrencyUtil.renderAsCurrency(exposure.Coverage.ExposureLimit),gw.api.util.StringUtil.substring( actions.getRule().DisplayName,0, 8)))
      } else {
        //If Warning is set to FALSE, block the transaction from going through
        transactionSet.reject("payment", 
          displaykey.Rules.Validation.Transaction.ReserveExceedsExposureLimitError(exposure, CurrencyUtil.renderAsCurrency(combined), CurrencyUtil.renderAsCurrency(exposure.Coverage.ExposureLimit), gw.api.util.StringUtil.substring( actions.getRule().DisplayName,0, 8)), null, null)
      }
    }
  }
}/*end00rule*/
  }
}
