package rules.Segmentation.ClaimSegmentationRules_dir.CSG01000Auto_dir

@gw.rules.RuleName("CSG01100 - Auto")
internal class CSG01100Auto {
  static function doCondition(claim : entity.Claim) : boolean {
    return /*start00rule*/true/*end00rule*/
  }

  static function doAction(claim : entity.Claim, actions : gw.rules.Action) {
/*start00rule*/for (exposures in Claim.Exposures){
	var sgmt = exposures.Segment;
	if (sgmt =="auto_high"){
		Claim.Segment ="auto_high";
		gw.api.util.Logger.logDebug( displaykey.Rules.Segmentation.Claim(gw.api.util.StringUtil.substring(actions.getRule().DisplayName,0, 8)))
                gw.api.util.Logger.logDebug( displaykey.Rules.Segmentation.Claim.SegmentedTo(Claim.Segment))

		actions.exitToNext();			
	}
	if (sgmt == "auto_mid"){
		Claim.Segment = "auto_mid";
		gw.api.util.Logger.logDebug( displaykey.Rules.Segmentation.Claim(gw.api.util.StringUtil.substring(actions.getRule().DisplayName,0, 8)))
                gw.api.util.Logger.logDebug( displaykey.Rules.Segmentation.Claim.SegmentedTo(Claim.Segment))
		actions.exitToNext();			
	}
	if (sgmt == "auto_low"){
		Claim.Segment = "auto_low";
		gw.api.util.Logger.logDebug( displaykey.Rules.Segmentation.Claim(gw.api.util.StringUtil.substring(actions.getRule().DisplayName,0, 8)))
                gw.api.util.Logger.logDebug( displaykey.Rules.Segmentation.Claim.SegmentedTo(Claim.Segment))
		actions.exitToNext();
	}
}/*end00rule*/
  }
}
