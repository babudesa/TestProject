package rules.Workplan.ClaimWorkplan_dir.CLW07000Workerscompclaims_dir

@gw.rules.RuleName("CLW07100 - Initial claim acceptance")
internal class CLW07100Initialclaimacceptance {
  static function doCondition(claim : entity.Claim) : boolean {
    return /*start00rule*/claim.LossDate != null/*end00rule*/
  }

  static function doAction(claim : entity.Claim, actions : gw.rules.Action) {
/*start00rule*///---------------------------------------------
//--------------  Key Variables   -------------
//---------------------------------------------
//Note:  Claim.DateRptdToEmployer or Claim.ClaimantRprtdDate or Claim.ReportedDate are all candidates for NoticeDate
// Some customers may use the eariler of the three
var noticeDate = claim.ReportedDate;

// Number of business days to escalate before or after the jurisdictional due date
// Use a negative number to escalate prior to the due date; 
var numDaysToEscPriorToDueDate = -3;

// business calendar location to calculate the dates
var location = claim.LossLocation

//---------------------------------------------

var additionalComment : String = null;
//    As the effective & expiration dates are set for Date ranges & are for the entire day; therefore, time of day can be ignored
var dayOfLoss = claim.LossDate.trimToMidnight()

// If no denial record is found, the defaults from the Activity Pattern will be utilized.

var specificDenialPeriod = find (var denialPeriodData in WCDenialPeriod
        where denialPeriodData.JurisdictionState == claim.JurisdictionState
        and (denialPeriodData.EffectiveDate <= dayOfLoss or denialPeriodData.EffectiveDate == null)
        and (denialPeriodData.ExpiryDate >= dayOfLoss or denialPeriodData.ExpiryDate == null))
        .getAtMostOneRow()

var dueDateBasedOnLoss : DateTime = null;
var dueDateBasedOnNotice : DateTime = null;

if (specificDenialPeriod.TargetDaysFromLoss != null
        and claim.LossDate != null 
        and specificDenialPeriod.TargetIncludeDays != null) {
  if (specificDenialPeriod.TargetIncludeDays == "businessdays") {
    dueDateBasedOnLoss = claim.LossDate.addBusinessDays(specificDenialPeriod.TargetDaysFromLoss, location)
  } else { // Calendar Days
    dueDateBasedOnLoss = claim.LossDate.addDays(specificDenialPeriod.TargetDaysFromLoss)
  }
} 

if (specificDenialPeriod.TargetDaysFromNotice != null
        and noticeDate != null 
        and specificDenialPeriod.TargetIncludeDays != null) {
  if (specificDenialPeriod.TargetIncludeDays == "businessdays") {
    dueDateBasedOnNotice = noticeDate.addBusinessDays(specificDenialPeriod.TargetDaysFromNotice, location)
  } else { // Calendar Days
    dueDateBasedOnNotice = noticeDate.addDays(specificDenialPeriod.TargetDaysFromNotice)
  }
} 

var activity  = claim.createActivityFromPattern(null, ActivityPattern.finder.getActivityPatternByCode("claim_acceptance"))

switch (specificDenialPeriod.DueDateFormula) {
  case "AfterLossDate" :
    if (dueDateBasedOnLoss != null) {
      activity.TargetDate = dueDateBasedOnLoss;  
    } else {
      additionalComment = displaykey.Rules.Workplan.Compensable.NoJurisdictionalData
    }
    break;
  case "AfterNoticeDate" :
    if (dueDateBasedOnNotice != null) {
      activity.TargetDate = dueDateBasedOnNotice
    } else {
      additionalComment = displaykey.Rules.Workplan.Compensable.NoJurisdictionalData
    }
    break;
  case "AfterLossAndNotice" :
    if (dueDateBasedOnNotice != null and dueDateBasedOnLoss != null) {
      if (dueDateBasedOnNotice > dueDateBasedOnLoss) {
        activity.TargetDate = dueDateBasedOnNotice
      } else {
        activity.TargetDate = dueDateBasedOnLoss
      }
    } else {
      additionalComment = displaykey.Rules.Workplan.Compensable.NoJurisdictionalData
    }
    break;
  default:  
    additionalComment = displaykey.Rules.Workplan.Compensable.NoJurisdictionalData
}

if (additionalComment != null) {
  activity.Description = additionalComment + activity.Description
}
activity.EscalationDate = activity.TargetDate.addBusinessDays(numDaysToEscPriorToDueDate, location)
claim.DateCompDcsnDue = activity.TargetDate;/*end00rule*/
  }
}
