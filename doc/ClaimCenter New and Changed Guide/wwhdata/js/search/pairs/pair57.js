function FileData_Pairs(x)
{
x.t("example","expression");
x.t("min","(proj)");
x.t("available","methods");
x.t("unchanged","reverses");
x.t("unchanged","converts");
x.t("unchanged","methods");
x.t("unchanged","collection");
x.t("unchanged","previous");
x.t("unchanged","accumulates");
x.t("unchanged","maps");
x.t("unchanged","partitions");
x.t("unchanged","easily");
x.t("unchanged","renamed");
x.t("unchanged","returns");
x.t("method","default");
x.t("method","new");
x.t("method","name");
x.t("method","empty");
x.t("method","returns");
x.t("flatmap","(proj)");
x.t("rather","new");
x.t("version","list");
x.t("implement","iterable");
x.t("lists","available");
x.t("5.0","method/property");
x.t("clear","mutation");
x.t("table","lists");
x.t("table","following");
x.t("description","count");
x.t("description","copy");
x.t("description","reverse");
x.t("description","allmatch");
x.t("init","reducer");
x.t("create","new");
x.t("totypedarray","unchanged");
x.t("shuffles","list");
x.t("descending","order");
x.t("related","types");
x.t("hasmatch","(cond)");
x.t("(iter)","unchanged");
x.t("key","reduce");
x.t("removewhere","renamed");
x.t("freeze","new");
x.t("orderbydescending","proj");
x.t("proj","unchanged");
x.t("proj","new");
x.t("crite","ria");
x.t("creates","copy");
x.t("implemented","directly");
x.t("last","unchanged");
x.t("last","element");
x.t("text_val.select","link");
x.t("type","collection");
x.t("type","disjunction");
x.t("satisfy","given");
x.t("satisfy","condition");
x.t("reverses","iterable");
x.t("reverses","collection");
x.t("orders","list");
x.t("what\u2019s","new");
x.t("releases","renamed");
x.t("releases","following");
x.t("asiterable","new");
x.t("retained","list");
x.t("offending","elements");
x.t("sort","new");
x.t("ascending","order");
x.t("count","new");
x.t("default","collection");
x.t("removes","elements");
x.t("new","unchanged");
x.t("new","shuffles");
x.t("new","creates");
x.t("new","reverses");
x.t("new","element");
x.t("new","list");
x.t("new","collections");
x.t("new","iterable");
x.t("new","converts");
x.t("new","union");
x.t("new","changed");
x.t("new","methods");
x.t("new","enhancement");
x.t("new","unmodifiable");
x.t("new","collection");
x.t("new","iterates");
x.t("new","keepmatches");
x.t("new","value");
x.t("new","sorts");
x.t("new","subtraction");
x.t("new","joins");
x.t("new","additionally");
x.t("new","disjunction");
x.t("new","returns");
x.t("link","directly");
x.t("objects","implement");
x.t("objects","objects");
x.t("objects","previous");
x.t("single","new");
x.t("single","list");
x.t("single","value");
x.t("single","intersect");
x.t("element","iterable");
x.t("element","collection");
x.t("element","maps");
x.t("thrown","sum");
x.t("thrown","tocollection");
x.t("comparable","object");
x.t("happening","place");
x.t("block","asiterable");
x.t("satisfies","condition");
x.t("sortby","retained");
x.t("sortby","new");
x.t("delimiter","minby");
x.t("toset","new");
x.t("messsage","claimcenter");
x.t("indicates","whether");
x.t("list","freeze");
x.t("list","element");
x.t("list","average");
x.t("list","place");
x.t("list","empty");
x.t("list","method/property");
x.t("list","fold");
x.t("list","simply");
x.t("list","similar");
x.t("list","already");
x.t("list","sorts");
x.t("list","singlewhere");
x.t("list","ordered");
x.t("list","copy");
x.t("list","reverse");
x.t("list","elements");
x.t("list","shuffle");
x.t("col.haselements","returns");
x.t("sum","(proj)");
x.t("sum","numeric");
x.t("eachwithindex","new");
x.t("guide","what\u2019s");
x.t("countmatches","returns");
x.t("thenbydescending","(proj)");
x.t("collections","related");
x.t("collections","last");
x.t("collections","enhancement");
x.t("collections","(cond)");
x.t("throws","illegalstateexception");
x.t("throws","exception");
x.t("tolist","unchanged");
x.t("removematches","removes");
x.t("directly","collection");
x.t("directly","page");
x.t("iterable","satisfy");
x.t("iterable","objects");
x.t("iterable","single");
x.t("iterable","new");
x.t("iterable","iterable");
x.t("iterable","words");
x.t("iterable","additional");
x.t("iterable","value");
x.t("iterable","already");
x.t("iterable","copy");
x.t("true","collection");
x.t("true","elements");
x.t("converts","collection");
x.t("text_val.focus","text_val.select");
x.t("name","description");
x.t("name","new");
x.t("name","applicable");
x.t("no","value");
x.t("no","elements");
x.t("union","two");
x.t("union","(col)");
x.t("changed","guide");
x.t("changed","gosu");
x.t("changed","6.0");
x.t("gosu","6.0");
x.t("gosu","contains");
x.t("illegalstateexception","thrown");
x.t("illegalstateexception","element");
x.t("findall","returns");
x.t("old","method");
x.t("average","selector");
x.t("average","numeric");
x.t("methods","unchanged");
x.t("methods","implemented");
x.t("methods","new");
x.t("methods","list");
x.t("methods","collections");
x.t("methods","iterable");
x.t("methods","gosu");
x.t("methods","collection");
x.t("methods","method/property");
x.t("methods","function");
x.t("methods","better");
x.t("methods","described");
x.t("methods","including");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("cond","returns");
x.t("none","flatmap");
x.t("subtract","new");
x.t("haselements","new");
x.t("haselements","interacts");
x.t("place","rather");
x.t("place","descending");
x.t("place","orderbydescending");
x.t("place","sort");
x.t("place","ascending");
x.t("place","sortby");
x.t("place","partition");
x.t("projection","comparable");
x.t("mutation","happening");
x.t("enhancement","methods");
x.t("map","keys");
x.t("map","(proj)");
x.t("partition","(proj)");
x.t("partitionuniquely","proj");
x.t("claimcenter","5.0");
x.t("claimcenter","new");
x.t("empty","haselements");
x.t("empty","firstwhere");
x.t("empty","lastwhere");
x.t("orderby","thenbydescending");
x.t("orderby","tolist");
x.t("orderby","(proj)");
x.t("sortbydescending","retained");
x.t("sortbydescending","new");
x.t("array","union");
x.t("string","delimiter");
x.t("unmodifiable","version");
x.t("6.0","new");
x.t("6.0","changed");
x.t("understand","changes");
x.t("second","column");
x.t("countwhere","(cond)");
x.t("selector","new");
x.t("selected","collection");
x.t("selected","values");
x.t("error","occurred");
x.t("findbytype","returns");
x.t("mapped","new");
x.t("collection","min");
x.t("collection","method");
x.t("collection","totypedarray");
x.t("collection","satisfy");
x.t("collection","single");
x.t("collection","new");
x.t("collection","satisfies");
x.t("collection","toset");
x.t("collection","list");
x.t("collection","eachwithindex");
x.t("collection","throws");
x.t("collection","methods");
x.t("collection","map");
x.t("collection","partitionuniquely");
x.t("collection","empty");
x.t("collection","orderby");
x.t("collection","array");
x.t("collection","countwhere");
x.t("collection","mapped");
x.t("collection","collection");
x.t("collection","index");
x.t("collection","match");
x.t("collection","return");
x.t("collection","matches");
x.t("collection","already");
x.t("collection","values");
x.t("collection","based");
x.t("collection","created");
x.t("collection","elements");
x.t("collection","pure");
x.t("collection","thenby");
x.t("first","new");
x.t("first","element");
x.t("minimum","selected");
x.t("minimum","collection");
x.t("guidewire_selectall","var");
x.t("method/property","new");
x.t("method/property","name");
x.t("number","elements");
x.t("seed","value");
x.t("iterates","element");
x.t("powerset","new");
x.t("function","guidewire_selectall");
x.t("better","method");
x.t("better","understand");
x.t("better","null");
x.t("col","null");
x.t("max","(proj)");
x.t("maximum","selected");
x.t("maximum","collection");
x.t("whether","method");
x.t("words","list");
x.t("different","sortby");
x.t("different","sortbydescending");
x.t("(type)","renamed");
x.t("minby","new");
x.t("cannot","chained");
x.t("reduce","init");
x.t("index","join");
x.t("types","methods");
x.t("changes","second");
x.t("returned","otherwise");
x.t("match","map");
x.t("match","given");
x.t("fold","unchanged");
x.t("reducer","unchanged");
x.t("initial","seed");
x.t("simply","return");
x.t("return","null");
x.t("return","otherwise");
x.t("previous","releases");
x.t("(cond)","unchanged");
x.t("(cond)","new");
x.t("(cond)","renamed");
x.t("given","crite");
x.t("given","type");
x.t("given","block");
x.t("given","initial");
x.t("given","value");
x.t("given","condition");
x.t("given","criteria");
x.t("matches","given");
x.t("together","string");
x.t("keepmatches","removes");
x.t("occurred","messsage");
x.t("compared","claimcenter");
x.t("null","list");
x.t("null","no");
x.t("null","first");
x.t("null","collection");
x.t("null","values");
x.t("firstwhere","(cond)");
x.t("keys","list");
x.t("keys","elements");
x.t("additional","methods");
x.t("value","max");
x.t("value","cannot");
x.t("value","returned");
x.t("value","given");
x.t("value","note");
x.t("value","reverse");
x.t("value","even");
x.t("similar","objects");
x.t("interacts","better");
x.t("findfirst","cond");
x.t("power","freeze");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("already","type");
x.t("already","list");
x.t("already","ordered");
x.t("condition","hasmatch");
x.t("condition","throws");
x.t("condition","haselements");
x.t("condition","returned");
x.t("condition","null");
x.t("condition","wheretypeis");
x.t("exception","none");
x.t("sorts","list");
x.t("sorts","place");
x.t("expression","col.haselements");
x.t("expression","col");
x.t("ria","method");
x.t("page","error");
x.t("applicable","description");
x.t("singlewhere","(cond)");
x.t("subtraction","collection");
x.t("accumulates","values");
x.t("lastwhere","(cond)");
x.t("values","example");
x.t("values","iterable");
x.t("values","selected");
x.t("values","collection");
x.t("values","flattens");
x.t("non-true","value");
x.t("(proj)","unchanged");
x.t("(proj)","new");
x.t("join","new");
x.t("chained","series");
x.t("described","following");
x.t("maps","key");
x.t("maps","element");
x.t("intersect","(iter)");
x.t("ordered","orderby");
x.t("ordered","given");
x.t("partitions","collection");
x.t("maxby","new");
x.t("column","indicates");
x.t("otherwise","create");
x.t("otherwise","illegalstateexception");
x.t("otherwise","copy");
x.t("two","collections");
x.t("note","different");
x.t("easily","understand");
x.t("copy","new");
x.t("copy","list");
x.t("copy","collection");
x.t("copy","powerset");
x.t("copy","values");
x.t("numeric","values");
x.t("joins","elements");
x.t("based","projection");
x.t("renamed","countmatches");
x.t("renamed","removematches");
x.t("renamed","findall");
x.t("renamed","old");
x.t("renamed","findbytype");
x.t("renamed","compared");
x.t("renamed","findfirst");
x.t("reverse","unchanged");
x.t("reverse","orders");
x.t("reverse","new");
x.t("reverse","ordered");
x.t("created","offending");
x.t("order","new");
x.t("order","sortbydescending");
x.t("following","table");
x.t("elements","satisfy");
x.t("elements","iterable");
x.t("elements","collection");
x.t("elements","better");
x.t("elements","match");
x.t("elements","given");
x.t("elements","together");
x.t("elements","removed");
x.t("allmatch","(cond)");
x.t("additionally","orders");
x.t("additionally","reverse");
x.t("disjunction","new");
x.t("disjunction","collection");
x.t("returns","last");
x.t("returns","new");
x.t("returns","list");
x.t("returns","sum");
x.t("returns","true");
x.t("returns","no");
x.t("returns","average");
x.t("returns","collection");
x.t("returns","first");
x.t("returns","minimum");
x.t("returns","number");
x.t("returns","maximum");
x.t("returns","power");
x.t("returns","non-true");
x.t("returns","elements");
x.t("returns","intersection");
x.t("tocollection","new");
x.t("intersection","two");
x.t("(col)","unchanged");
x.t("criteria","retainwhere");
x.t("series","clear");
x.t("pure","iterable");
x.t("var","text_val=eval");
x.t("including","unchanged");
x.t("including","methods");
x.t("flattens","single");
x.t("wheretypeis","(type)");
x.t("shuffle","new");
x.t("even","expression");
x.t("thenby","(proj)");
x.t("retainwhere","new");
x.t("removed","subtract");
x.t("contains","new");
x.t("object","removewhere");
x.t("object","maxby");
}
