function FileData_Pairs(x)
{
x.t("example","assign");
x.t("example","suppose");
x.t("example","first");
x.t("example","assigns");
x.t("root","instead");
x.t("searching","children");
x.t("complex","claim");
x.t("complex","issues");
x.t("equitable","basis");
x.t("passed-in","grouptype");
x.t("method","example");
x.t("method","performs");
x.t("method","situations");
x.t("method","uses");
x.t("method","distribute");
x.t("method","filters");
x.t("method","assign");
x.t("method","searches");
x.t("method","reference");
x.t("method","assigns");
x.t("method","considers");
x.t("method","ignores");
x.t("method","starts");
x.t("method","returns");
x.t("method","restricts");
x.t("indicated","group");
x.t("else","activity.currentassignment.assigngroup");
x.t("parameter","method");
x.t("parameter","true");
x.t("parameter","null");
x.t("available","groups");
x.t("(0)","example");
x.t("theactivity","activity");
x.t("claim","complex");
x.t("claim","loss");
x.t("claim","groups");
x.t("claim","location");
x.t("within","currently");
x.t("within","assignment");
x.t("within","global");
x.t("secondarygrouptype","result");
x.t("currently","assigned");
x.t("ensures","method");
x.t("responsible","assigning");
x.t("performs","round-robin");
x.t("user","group");
x.t("user","simply");
x.t("user","assigngroup");
x.t("user","var");
x.t("situations","want");
x.t("zip","county");
x.t("current","group");
x.t("claim.assignedgroup","assigngroupbyroundrobin");
x.t("high-complexity","items");
x.t("contexts","need");
x.t("uses","root");
x.t("uses","location-based");
x.t("text_val.select","link");
x.t("state","first");
x.t("people","specialize");
x.t("type","method");
x.t("type","claim");
x.t("type","segment");
x.t("grouptype","parameter");
x.t("grouptype","address");
x.t("grouptype","fields");
x.t("grouptype","non-");
x.t("grouptype","includesubgroups");
x.t("time","zone");
x.t("hierarchy","cause");
x.t("distribute","work");
x.t("filters","group");
x.t("filters","groups");
x.t("link","directly");
x.t("advanced","topics");
x.t("want","assign");
x.t("want","rotate");
x.t("currentsiuser","user");
x.t("currentsiuser","therelatedcontact.user");
x.t("currentsiuser","null");
x.t("items","among");
x.t("items","want");
x.t("among","different");
x.t("among","groups");
x.t("closeness","particular");
x.t("top","group");
x.t("messsage","claimcenter");
x.t("need","assign");
x.t("couple","possibilities");
x.t("siuinvestigator","currentsiuser");
x.t("found","matching");
x.t("group","method");
x.t("group","parameter");
x.t("group","contexts");
x.t("group","type");
x.t("group","hierarchy");
x.t("group","assignment");
x.t("group","during");
x.t("group","specified");
x.t("group","claim.assigngroupbyroundrobin");
x.t("group","useful");
x.t("group","search");
x.t("group","claimcenter");
x.t("group","subgroups");
x.t("group","group.loadfactor");
x.t("group","first");
x.t("group","based");
x.t("group","itself");
x.t("group","following");
x.t("group","demo_sample:46");
x.t("group","therefore");
x.t("group","var");
x.t("assignment","method");
x.t("assignment","within");
x.t("assignment","assignment");
x.t("assignment","rule");
x.t("assignment","methods");
x.t("assignment","claimcenter");
x.t("assignment","three");
x.t("assignment","groups");
x.t("assignment","rules");
x.t("assignment","process");
x.t("assign","indicated");
x.t("assign","claim");
x.t("assign","user");
x.t("assign","group");
x.t("assign","assignable");
x.t("assign","activity");
x.t("assign","known");
x.t("assign","item");
x.t("assignable","items");
x.t("assignable","entity");
x.t("assignable","item");
x.t("during","rest");
x.t("complete","assignment");
x.t("guide","advanced");
x.t("directchildrenonly","parameter");
x.t("directchildrenonly","group");
x.t("primarygrouptype","claim.losslocation");
x.t("primarygrouptype","result");
x.t("false","claim.assignedgroup");
x.t("directly","underneath");
x.t("directly","page");
x.t("specified","group");
x.t("specified","claimcenter");
x.t("true","method");
x.t("equitably","note");
x.t("text_val.focus","text_val.select");
x.t("wins","two");
x.t("no","group");
x.t("[1]","claim.losslocation");
x.t("searches","children");
x.t("underneath","current");
x.t("performance","issues");
x.t("perform","assignments");
x.t("possibilities","var");
x.t("claim.losstype","var");
x.t("claim.assigngroupbyroundrobin","autocomplex");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("methods","assign");
x.t("methods","perform");
x.t("methods","include");
x.t("useful","within");
x.t("rule","responsible");
x.t("boolean","assigngroup");
x.t("boolean","assigngroupbylocation");
x.t("boolean","assigngroupbyroundrobin");
x.t("groupbase","group");
x.t("zero","(0)");
x.t("makes","sense");
x.t("up","specific");
x.t("rest","assignment");
x.t("address","method");
x.t("address","directchildrenonly");
x.t("county","state");
x.t("search","no");
x.t("search","stops");
x.t("search","begins");
x.t("basis","passed-in");
x.t("claimcenter","uses");
x.t("claimcenter","assignment");
x.t("claimcenter","rules");
x.t("claimcenter","include");
x.t("therelatedcontact.user","currentsiusergroup");
x.t("activity.currentassignment.assigngroup","group");
x.t("activity.currentassignment.assigngroup","currentsiusergroup");
x.t("segment","assign");
x.t("segment","claim.segment");
x.t("segment","var");
x.t("fields","thus");
x.t("understand","methods");
x.t("three","groups");
x.t("siu","actions.exit");
x.t("geographic","closeness");
x.t("error","occurred");
x.t("severe","performance");
x.t("subgroups","using");
x.t("group.loadfactor","value");
x.t("losstype","claim.losstype");
x.t("losstype","segment");
x.t("suppose","several");
x.t("rotate","among");
x.t("first","zip");
x.t("first","filters");
x.t("first","found");
x.t("first","match");
x.t("issues","high-complexity");
x.t("issues","following");
x.t("non-","null");
x.t("guidewire_selectall","var");
x.t("activity","therelatedcontact");
x.t("activity","based");
x.t("location-based","assigner");
x.t("processing","office");
x.t("stops","without");
x.t("cause","severe");
x.t("function","guidewire_selectall");
x.t("particular","processing");
x.t("particular","level");
x.t("different","groups");
x.t("western","siu");
x.t("office","match");
x.t("begins","children");
x.t("instead","specify");
x.t("types","assignment");
x.t("match","wins");
x.t("match","up");
x.t("match","particular");
x.t("loss","type");
x.t("handling","complex");
x.t("important","understand");
x.t("important","pass");
x.t("simply","pick");
x.t("assigned","group");
x.t("reference","group");
x.t("assignments","methods");
x.t("assigns","claim");
x.t("assigns","specific");
x.t("assigns","entity");
x.t("groups","equitable");
x.t("groups","within");
x.t("groups","people");
x.t("groups","grouptype");
x.t("groups","group");
x.t("groups","equitably");
x.t("groups","match");
x.t("groups","following");
x.t("groups","matching");
x.t("level","method");
x.t("thus","three");
x.t("known","group");
x.t("activity.claim.roleassignments","therelatedcontact.role==");
x.t("given","address");
x.t("matches","group");
x.t("considers","round-robin");
x.t("rules","group");
x.t("rules","guide");
x.t("rules","methods");
x.t("rules","function");
x.t("occurred","messsage");
x.t("pick","group");
x.t("null","ensures");
x.t("null","activity.currentassignment.assigngroup");
x.t("null","matches");
x.t("null","value");
x.t("null","claim.currentassignment.assigngroupbylocation");
x.t("include","specified");
x.t("include","following");
x.t("libraries.claimassignment.getgrouptypebasedonclaimsegment","losstype");
x.t("value","grouptype");
x.t("value","group");
x.t("value","zero");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("specific","time");
x.t("specific","group");
x.t("therelatedcontact","activity.claim.roleassignments");
x.t("claim.losslocation","false");
x.t("claim.losslocation","null");
x.t("several","groups");
x.t("process","complete");
x.t("[0]","var");
x.t("page","error");
x.t("location","var");
x.t("claim.segment","var");
x.t("result","[1]");
x.t("result","libraries.claimassignment.getgrouptypebasedonclaimsegment");
x.t("result","[0]");
x.t("ignores","group");
x.t("therelatedcontact.role==","siuinvestigator");
x.t("assigner","assign");
x.t("zone","method");
x.t("case","insensitive");
x.t("global","assignment");
x.t("therelatedcontact.group","currentsiuser");
x.t("children","specified");
x.t("children","directly");
x.t("children","important");
x.t("children","children");
x.t("topics","assignment");
x.t("sense","types");
x.t("assigngroup","boolean");
x.t("assigngroup","groupbase");
x.t("assigngroup","assigngroupbylocation");
x.t("note","important");
x.t("note","assigngroupbyroundrobin");
x.t("two","groups");
x.t("based","couple");
x.t("based","geographic");
x.t("based","given");
x.t("currentsiusergroup","group");
x.t("currentsiusergroup","therelatedcontact.group");
x.t("currentsiusergroup","actions.exit");
x.t("itself","search");
x.t("work","assignable");
x.t("claim.currentassignment.assigngroupbylocation","primarygrouptype");
x.t("following","example");
x.t("following","assigngroup");
x.t("entity","group");
x.t("entity","based");
x.t("insensitive","search");
x.t("starts","top");
x.t("autocomplex","false");
x.t("assigngroupbylocation","grouptype");
x.t("assigngroupbylocation","boolean");
x.t("assigngroupbylocation","assigngroupbyroundrobin");
x.t("demo_sample:46","western");
x.t("includesubgroups","group");
x.t("using","round-robin");
x.t("assigning","group");
x.t("returns","first");
x.t("pass","null");
x.t("restricts","available");
x.t("therefore","makes");
x.t("without","searching");
x.t("var","theactivity");
x.t("var","secondarygrouptype");
x.t("var","currentsiuser");
x.t("var","primarygrouptype");
x.t("var","text_val=eval");
x.t("var","segment");
x.t("var","losstype");
x.t("var","result");
x.t("var","currentsiusergroup");
x.t("actions.exit","else");
x.t("actions.exit","assigngroupbylocation");
x.t("specialize","handling");
x.t("assigngroupbyroundrobin","method");
x.t("assigngroupbyroundrobin","grouptype");
x.t("assigngroupbyroundrobin","boolean");
x.t("assigngroupbyroundrobin","note");
x.t("item","user");
x.t("matching","specified");
x.t("matching","value");
x.t("matching","case");
x.t("specify","directchildrenonly");
x.t("round-robin","assignment");
}
