function FileData_Pairs(x)
{
x.t("example","mappings");
x.t("example","multiple");
x.t("example","suppose");
x.t("example","xml");
x.t("example","company");
x.t("supports","situations");
x.t("possible","meanings");
x.t("possible","configure");
x.t("properties","no");
x.t("method","verify");
x.t("exports","array");
x.t("mycode","mapper.getinternalcodebyalias");
x.t("tlapi","(itypelisttoolsapi)");
x.t("lists","namespaces");
x.t("within","typelist");
x.t("wish","define");
x.t("integration","guide");
x.t("built-in","utility");
x.t("description","properties");
x.t("situation","getaliasesbyinternalcode");
x.t("contact","abc:system1");
x.t("contact","typelist");
x.t("mapper.getinternalcodebyalias","contact");
x.t("always","related");
x.t("related","utility");
x.t("name=","ns1");
x.t("name=","ns2");
x.t("name=","losstype");
x.t("abc","check");
x.t("alias","alias");
x.t("alias","namespace");
x.t("alias","code");
x.t("alias","given");
x.t("alias","value");
x.t("alias","gettypelistvalues");
x.t("version=","1.0");
x.t("cpl","/typelist");
x.t("abc:checkprint","typecode");
x.t("situations","multiple");
x.t("plugin","utilities");
x.t("plugin","code");
x.t("gw.api.util.typecodemapperutil.gettypecodemapper","var");
x.t("text_val.select","link");
x.t("support","simple");
x.t("/typelist","/typecodemapping");
x.t("interface","methods");
x.t("type","codes");
x.t("missing","mapping");
x.t("external","codes");
x.t("external","legacy");
x.t("external","aliases");
x.t("external","internal");
x.t("external","code");
x.t("external","systems");
x.t("external","system");
x.t("mappings","mappings");
x.t("mappings","translate");
x.t("mappings","go");
x.t("mappings","first");
x.t("mappings","different");
x.t("however","installations");
x.t("however","indicate");
x.t("multiple","external");
x.t("multiple","mapping");
x.t("sections","typelist");
x.t("prop","mapping");
x.t("getaliasesbyinternalcode","during");
x.t("link","directly");
x.t("new","entity");
x.t("ns1","namespace");
x.t("ns1","alias=");
x.t("translate","typecode");
x.t("translate","internal");
x.t("translate","code");
x.t("translate","typecodes");
x.t("itypelisttoolsapi","web");
x.t("objects","given");
x.t("want","translate");
x.t("details","plugin");
x.t("ns2","/namespacelist");
x.t("ns2","alias=");
x.t("printing","service");
x.t("messsage","claimcenter");
x.t("need","map");
x.t("file","lists");
x.t("file","following");
x.t("file","used");
x.t("file","contains");
x.t("namespaces","namespaces");
x.t("namespaces","correspond");
x.t("finds","alias");
x.t("finds","internal");
x.t("indicates","internal");
x.t("found","two");
x.t("utilities","java");
x.t("typecode","contact");
x.t("typecode","alias");
x.t("typecode","mappings");
x.t("typecode","external");
x.t("typecode","typecodemapperutil");
x.t("typecode","namespace");
x.t("typecode","map");
x.t("typecode","code");
x.t("typecode","given");
x.t("typecode","values");
x.t("typecode","translation");
x.t("add","elements");
x.t("during","exports");
x.t("during","data");
x.t("during","imports");
x.t("guide","general");
x.t("simple","example");
x.t("simple","typecode");
x.t("go","claimcenter/modules/configuration/config/typelists/");
x.t("entry","contains");
x.t("check","printing");
x.t("meanings","indicate");
x.t("api","getinternalcodebyalias");
x.t("api","lowers");
x.t("overview","typecodes");
x.t("depends","context");
x.t("soap","api");
x.t("soap","following");
x.t("url","su");
x.t("directly","page");
x.t("/namespacelist","typelist");
x.t("requires","mapping");
x.t("su","gw");
x.t("high","performance");
x.t("typecodemapperutil","provides");
x.t("typecodemapperutil","code");
x.t("text_val.focus","text_val.select");
x.t("typelists","include");
x.t("installations","infeasible");
x.t("typecodemapping","namespacelist");
x.t("name","example");
x.t("name","description");
x.t("name","abc");
x.t("name","external");
x.t("name","system");
x.t("name","typelist");
x.t("no","alias");
x.t("no","mapping");
x.t("codes","example");
x.t("codes","external");
x.t("codes","however");
x.t("codes","overview");
x.t("codes","map");
x.t("codes","gettypekeybyalias");
x.t("codes","function");
x.t("codes","may");
x.t("codes","systems");
x.t("codes","mapping");
x.t("codes","using");
x.t("gosu","translate");
x.t("gosu","java");
x.t("performance","gosu");
x.t("performance","cases");
x.t("(itypelisttoolsapi)","apilocator.getauthenticatedproxy");
x.t("frequently","gosu");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("provides","built-in");
x.t("provides","similar");
x.t("/typecodemapping","first");
x.t("methods","soap");
x.t("methods","getaliasbyinternalcode");
x.t("namespacelist","namespace");
x.t("namespace","supports");
x.t("namespace","name=");
x.t("namespace","alias");
x.t("namespace","name");
x.t("namespace","no");
x.t("namespace","namespace");
x.t("namespace","rest");
x.t("namespace","strings");
x.t("namespace","internal");
x.t("namespace","returns");
x.t("indicate","external");
x.t("indicate","mapping");
x.t("web","services");
x.t("web","service");
x.t("map","example");
x.t("map","codes");
x.t("map","namespace");
x.t("map","claimcenter");
x.t("map","internal");
x.t("namespace=","ns1");
x.t("namespace=","ns2");
x.t("rest","mapping");
x.t("strings","company");
x.t("gw","typekeystring");
x.t("claimcenter","integration");
x.t("claimcenter","typecode");
x.t("claimcenter","typelists");
x.t("claimcenter","provides");
x.t("claimcenter","match");
x.t("claimcenter","code");
x.t("alias=","cpl");
x.t("alias=","prop");
x.t("array","string");
x.t("array","typekey");
x.t("array","typekeydata");
x.t("string","values");
x.t("gettypekeybyalias","finds");
x.t("legacy","systems");
x.t("getinternalcodebyalias","details");
x.t("error","occurred");
x.t("syntax","depends");
x.t("1.0","typecodemapping");
x.t("losstype","mapping");
x.t("suppose","want");
x.t("first","step");
x.t("first","section");
x.t("lowers","server");
x.t("guidewire_selectall","var");
x.t("function","guidewire_selectall");
x.t("maximum","claimcenter");
x.t("pr","namespace=");
x.t("aliases","internal");
x.t("define","mappings");
x.t("define","namespace");
x.t("different","external");
x.t("different","two");
x.t("may","wish");
x.t("may","occur");
x.t("step","using");
x.t("match","claimcenter");
x.t("match","already");
x.t("match","system");
x.t("internal","external");
x.t("internal","typecode");
x.t("internal","codes");
x.t("internal","code");
x.t("internal","typecodes");
x.t("xml","version=");
x.t("xml","file");
x.t("section","mapping");
x.t("verify","external");
x.t("infeasible","map");
x.t("abc:system1","tlapi");
x.t("abc:system1","attorney");
x.t("calling","soap");
x.t("correspond","different");
x.t("code","situation");
x.t("code","translate");
x.t("code","during");
x.t("code","name");
x.t("code","namespace");
x.t("code","claimcenter");
x.t("code","calling");
x.t("code","typekey");
x.t("code","gettypekeysbyalias");
x.t("code","valid");
x.t("code","gettypelistvalues");
x.t("code","var");
x.t("code","attorney");
x.t("typekey","instances");
x.t("typekey","tk");
x.t("client","code");
x.t("typecodes","external");
x.t("typecodes","new");
x.t("typecodes","typecode");
x.t("typecodes","define");
x.t("typecodes","given");
x.t("return","value");
x.t("given","name");
x.t("given","typelist");
x.t("typekeydata","objects");
x.t("tlapi.getaliasbyinternalcode","contact");
x.t("java","always");
x.t("java","plugin");
x.t("java","translate");
x.t("java","web");
x.t("occurred","messsage");
x.t("mapping/typecodemapping.xml","file");
x.t("null","return");
x.t("null","null");
x.t("include","typecode");
x.t("instances","contained");
x.t("value","indicates");
x.t("value","typecode");
x.t("similar","methods");
x.t("mapper","gw.api.util.typecodemapperutil.gettypecodemapper");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("already","used");
x.t("import","using");
x.t("gettypekeysbyalias","during");
x.t("tk","typecodemapperutil.getinternalcodebyalias");
x.t("services","translate");
x.t("services","mapping");
x.t("systems","however");
x.t("systems","need");
x.t("systems","namespace");
x.t("systems","match");
x.t("valid","internal");
x.t("represent","external");
x.t("page","error");
x.t("context","possible");
x.t("getaliasbyinternalcode","finds");
x.t("configure","claimcenter");
x.t("typecode=","pr");
x.t("tool","translates");
x.t("data","import");
x.t("data","object");
x.t("values","match");
x.t("values","represent");
x.t("utility","support");
x.t("utility","define");
x.t("utility","class");
x.t("called","typecodemapperutil");
x.t("two","possible");
x.t("two","external");
x.t("cases","high");
x.t("mapping","within");
x.t("mapping","missing");
x.t("mapping","file");
x.t("mapping","found");
x.t("mapping","entry");
x.t("mapping","code");
x.t("mapping","typecodes");
x.t("mapping","typecode=");
x.t("mapping","entries");
x.t("system","multiple");
x.t("system","name");
x.t("system","codes");
x.t("system","maximum");
x.t("system","xml");
x.t("system","abc:system1");
x.t("entity","syntax");
x.t("used","external");
x.t("used","tool");
x.t("following","itypelisttoolsapi");
x.t("following","simple");
x.t("following","java");
x.t("elements","mapping");
x.t("translates","type");
x.t("service","abc:checkprint");
x.t("service","interface");
x.t("service","client");
x.t("typecode\u2019s","code");
x.t("contained","within");
x.t("general","web");
x.t("using","gosu");
x.t("using","web");
x.t("using","utility");
x.t("using","following");
x.t("claimcenter/modules/configuration/config/typelists/","mapping/typecodemapping.xml");
x.t("typelist","example");
x.t("typelist","name=");
x.t("typelist","alias");
x.t("typelist","add");
x.t("typelist","soap");
x.t("typelist","requires");
x.t("typelist","namespace");
x.t("typelist","code");
x.t("typelist","returns");
x.t("gettypelistvalues","method");
x.t("gettypelistvalues","given");
x.t("typekeystring","tlapi.getaliasbyinternalcode");
x.t("class","called");
x.t("company","name");
x.t("returns","array");
x.t("returns","null");
x.t("returns","data");
x.t("translation","may");
x.t("occur","frequently");
x.t("var","mycode");
x.t("var","text_val=eval");
x.t("var","mapper");
x.t("apilocator.getauthenticatedproxy","itypelisttoolsapi.class");
x.t("entries","typecode");
x.t("entries","mapping");
x.t("imports","array");
x.t("attorney","external");
x.t("attorney","gosu");
x.t("attorney","using");
x.t("itypelisttoolsapi.class","url");
x.t("contains","sections");
x.t("contains","typecode");
x.t("contains","typecode\u2019s");
x.t("object","contains");
x.t("server","performance");
x.t("typecodemapperutil.getinternalcodebyalias","contact");
}
