function FileData_Pairs(x)
{
x.t("interfaces","interfaces");
x.t("interfaces","fairly");
x.t("interfaces","handle");
x.t("example","claim");
x.t("example","acordconfig");
x.t("example","contacts");
x.t("supports","two");
x.t("root","acordfnolmapper");
x.t("root","absolute");
x.t("fault","mapper.file");
x.t("passed","argument");
x.t("claimcontactrole","claimrole.role");
x.t("claimcontactrole","var");
x.t("included","simple");
x.t("included","contactmanager");
x.t("rolecodes","property");
x.t("method","discussed");
x.t("method","convert");
x.t("method","signature");
x.t("method","allows");
x.t("method","instead");
x.t("method","variant");
x.t("method","mapper");
x.t("method","called");
x.t("method","acord");
x.t("possible","acord");
x.t("provide","new");
x.t("provide","alternative");
x.t("available","case");
x.t("properties","version");
x.t("properties","file");
x.t("properties","mapper.alias.default");
x.t("properties","node");
x.t("properties","calling");
x.t("properties","object");
x.t("incidents","acord");
x.t("parameter","earlier");
x.t("(rolename:string)","claimcontactrole");
x.t("dates","times");
x.t("gw.fnolmapper.acord.iexposuremapper","gw.fnolmapper.acord.impl.acordexposuremapper");
x.t("defines","method");
x.t("defines","series");
x.t("claim","refer");
x.t("claim","party");
x.t("protected","function");
x.t("version","takes");
x.t("version","location");
x.t("gettypecodemapper","returns");
x.t("role","name");
x.t("role","codes");
x.t("role","ids");
x.t("easy","understand");
x.t("day","gw.xml.xsd.types.xsdtime");
x.t("fnol","mapper");
x.t("files","create");
x.t("files","default");
x.t("files","typecode");
x.t("files","claimcenter");
x.t("files","format");
x.t("files","dateenhancement");
x.t("files","contains");
x.t("lists","component");
x.t("acordconfig","directly");
x.t("acordconfig","class");
x.t("acordconfig","modify");
x.t("acordconfig","gets");
x.t("comment","property");
x.t("integration","source");
x.t("integration","guide");
x.t("built-in","files");
x.t("built-in","acordmapperfactory");
x.t("built-in","typecodes");
x.t("built-in","implementation");
x.t("built-in","acordcontactmapper");
x.t("built-in","acord");
x.t("table","lists");
x.t("contact","gw.fnolmapper.acord.icontactmapper");
x.t("contact","exposure");
x.t("contact","types");
x.t("contact","manager");
x.t("contact","mapping");
x.t("contact","roles");
x.t("create","new");
x.t("create","mapper");
x.t("getcontactrolemap","map");
x.t("claimrole.role","config.getcontactrolemap");
x.t("refer","source");
x.t("refer","implementation");
x.t("studio","details");
x.t("instance","fnolmapperconfig");
x.t("key","parameter");
x.t("key","used");
x.t("source","multiple");
x.t("source","allowed");
x.t("source","following");
x.t("typekeymap","typekeymap");
x.t("typekeymap","getter");
x.t("typekeymap","class");
x.t("wrapper","around");
x.t("keep","mapping");
x.t("enhances","type");
x.t("gw.api.fnolmapper.fnolmapper","interface");
x.t("likely","requires");
x.t("ability","read");
x.t("alias","during");
x.t("alias","name");
x.t("alias","string");
x.t("alias","means");
x.t("alias","internal");
x.t("alias","acord");
x.t("typecodemapper","typecode");
x.t("typecodemapper","performing");
x.t("typecodemapper","object");
x.t("enumerations","acord");
x.t("contactrole","typecodes");
x.t("gw.fnolmapper.acord.impl.acordpolicymapper","significant");
x.t("contacts","current");
x.t("contacts","exposures");
x.t("contacts","acord");
x.t("discussed","later");
x.t("topic","gettypecodemapper");
x.t("easy-to-read","example");
x.t("easy-to-read","gosu");
x.t("current","claim");
x.t("later","section");
x.t("uses","default");
x.t("uses","typecode");
x.t("uses","namespace");
x.t("uses","map");
x.t("shows","relationships");
x.t("text_val.select","link");
x.t("support","ability");
x.t("support","basic");
x.t("support","gosu");
x.t("interface","defines");
x.t("interface","built-in");
x.t("interface","however");
x.t("interface","want");
x.t("interface","address");
x.t("interface","implementation");
x.t("interface","class");
x.t("interface","contains");
x.t("look","up");
x.t("look","lines");
x.t("createmapperfactory","imapperfactory");
x.t("module_root","/config/typelists/mapping/typecodemapping.xml");
x.t("basic","properties");
x.t("basic","acord");
x.t("insuredorprincipal_type","claimsparty_type");
x.t("claimsparty_type","claimcenter");
x.t("type","typecodemapper");
x.t("type","xsd.acord.date");
x.t("type","xsd.acord.detailaddr_type");
x.t("type","gosu");
x.t("type","claimcenter");
x.t("type","xsd.acord.claimsparty_type");
x.t("type","enhancements");
x.t("type","acord");
x.t("type","xsd.acord.datetime");
x.t("change","instantiate");
x.t("mapper.alias.default=default","typecode");
x.t("please","getinternalcodebyalias");
x.t("times","addresses");
x.t("java.util.date","object");
x.t("gw.fnolmapper.acord.icontactmapper","gw.fnolmapper.acord.impl.acordcontactmapper");
x.t("mappings","instead");
x.t("fairly","simple");
x.t("calls","acordconfig");
x.t("calls","acordmapperfactory");
x.t("external","integration");
x.t("external","alias");
x.t("external","code");
x.t("external","system");
x.t("/config/typelists/mapping/typecodemapping.xml","modify");
x.t("non-null","array");
x.t("getter","methods");
x.t("time","day");
x.t("however","provide");
x.t("however","built-in");
x.t("however","acordfnolmapper");
x.t("however","modify");
x.t("however","manipulates");
x.t("party","type");
x.t("parsing","xml");
x.t("claimcenter/modules/configuraiton/config/fnolmapper/acord/mapper.properties","default");
x.t("multiple","namespaces");
x.t("multiple","typecodes");
x.t("default","key");
x.t("default","alias");
x.t("default","mappings");
x.t("default","however");
x.t("default","claimcenter");
x.t("default","mapper");
x.t("default","implementation");
x.t("default","location");
x.t("default","mapper.properties");
x.t("default","mapping");
x.t("default","behavior");
x.t("customization","files");
x.t("entities","icontactmapper");
x.t("convert","role");
x.t("convert","java.util.date");
x.t("convert","acord");
x.t("text","gosu");
x.t("text","data");
x.t("typesafe","wrapper");
x.t("typesafe","easy-to-read");
x.t("typesafe","need");
x.t("(this)","change");
x.t("(this)","configuration");
x.t("guidewire","typekeys");
x.t("guidewire","typekey");
x.t("guidewire","typecodes");
x.t("property","default");
x.t("property","no");
x.t("property","return");
x.t("property","mapper");
x.t("property","contains");
x.t("back","web");
x.t("require","namespace-alias");
x.t("claimsparty","fnol");
x.t("link","directly");
x.t("customer-viewable","gosu");
x.t("element","objects");
x.t("objects","gosu");
x.t("objects","correct");
x.t("objects","cases");
x.t("objects","naturally");
x.t("objects","following");
x.t("new","claimcontactrole");
x.t("new","acordmapperfactory");
x.t("new","implementations");
x.t("new","address");
x.t("new","abc.claimcenter.fnolmapper.abcmapperfactory");
x.t("new","mapper");
x.t("new","imapperfactory");
x.t("icontactmapper","interface");
x.t("want","replace");
x.t("want","follow");
x.t("access","information");
x.t("single","typecode");
x.t("signature","getinternalcodesbyalias");
x.t("signature","getinternalcodebyalias");
x.t("details","contact");
x.t("details","refer");
x.t("details","acord");
x.t("includes","built-in");
x.t("includes","gosu");
x.t("includes","configuration");
x.t("includes","native");
x.t("includes","utility");
x.t("includes","special");
x.t("mapper.file","path");
x.t("messsage","claimcenter");
x.t("file","properties");
x.t("file","look");
x.t("file","file");
x.t("file","name");
x.t("file","relative");
x.t("file","specifies");
x.t("file","starting");
x.t("file","{cc}");
x.t("file","adds");
x.t("file","information");
x.t("file","mapper.properties");
x.t("file","mapping");
x.t("file","class");
x.t("file","object");
x.t("need","direct");
x.t("found","external");
x.t("found","throws");
x.t("found","returns");
x.t("namespaces","per");
x.t("gw.fnolmapper.acord.iaddressmapper","gw.fnolmapper.acord.impl.acordaddressmapper");
x.t("typecode","contact");
x.t("typecode","please");
x.t("typecode","map");
x.t("typecode","given");
x.t("typecode","e.g");
x.t("typecode","mapper");
x.t("typecode","mapping");
x.t("add","rolecodes");
x.t("add","displayname");
x.t("add","additional");
x.t("add","two");
x.t("add","todate");
x.t("during","imports");
x.t("around","typecodemapper");
x.t("guide","fnol");
x.t("guide","new");
x.t("guide","specify");
x.t("simple","built-in");
x.t("simple","interface");
x.t("simple","constants");
x.t("simple","class");
x.t(".get","(rolename)");
x.t("xsd.acord.date","add");
x.t("soap","fault");
x.t("throws","nonuniquetypecodeexception");
x.t("xsd.acord.detailaddr_type","add");
x.t("displayname","property");
x.t("directly","create");
x.t("directly","however");
x.t("directly","page");
x.t("directly","cases");
x.t("requires","customization");
x.t("handle","specific");
x.t("gw.api.fnolmapper.fnolmapperconfig","methods");
x.t("gw.api.fnolmapper.fnolmapperconfig","mappers");
x.t("getinternalcodesbyalias","during");
x.t("getinternalcodesbyalias","string");
x.t("writing","code");
x.t("text_val.focus","text_val.select");
x.t("name","passed");
x.t("name","built-in");
x.t("name","internal");
x.t("name","claimspartyenhancement");
x.t("name","mapping");
x.t("name","used");
x.t("name","getproperties");
x.t("no","default");
x.t("no","match");
x.t("no","typecodes");
x.t("no","mapping");
x.t("path","comment");
x.t("path","xml");
x.t("gosu","example");
x.t("gosu","objects");
x.t("gosu","includes");
x.t("gosu","gosu");
x.t("gosu","enhancement");
x.t("gosu","representation");
x.t("gosu","throw");
x.t("gosu","xml");
x.t("gosu","reference");
x.t("gosu","code");
x.t("gosu","native");
x.t("gosu","mappers");
x.t("gosu","enhancements");
x.t("gosu","work");
x.t("gosu","class");
x.t("addresses","contacts");
x.t("addresses","easier");
x.t("acordmapperfactory","(this)");
x.t("acordmapperfactory","class");
x.t("codes","gosu");
x.t("codes","claimspartyrolecd");
x.t("codes","used");
x.t("corresponds","external");
x.t("typekeys","typesafe");
x.t("typekeys","string");
x.t("component","interface");
x.t("direct","parsing");
x.t("perform","following");
x.t("argument","time");
x.t("argument","getdefaultkey");
x.t("avoid","writing");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("claimsnotificationaddrq","subelement");
x.t("alternatively","provide");
x.t("methods","fnol");
x.t("methods","built-in");
x.t("methods","include");
x.t("methods","core");
x.t("methods","todate");
x.t("methods","class");
x.t("methods","typelist");
x.t("/config/typelists/mapping","mapper.file=typecodemapping.xml");
x.t("namespace-alias","resolve");
x.t("namespace-alias","tuple");
x.t("provides","typesafe");
x.t("config.getcontactrolemap",".get");
x.t("implementations","interfaces");
x.t("standard","typecode");
x.t("up","catch-all");
x.t("namespace","alias");
x.t("namespace","string");
x.t("namespace","acord");
x.t("namespace","generally");
x.t("constants","processing");
x.t("exposures","incidents");
x.t("exposures","including");
x.t("map","contact");
x.t("map","enumerations");
x.t("map","contactrole");
x.t("map","external");
x.t("map","convert");
x.t("map","data");
x.t("address","contact");
x.t("address","gw.fnolmapper.acord.iaddressmapper");
x.t("modifying","built-in");
x.t("allows","multiple");
x.t("allows","store");
x.t("web","services");
x.t("strings","representing");
x.t("enhancement","files");
x.t("claimspartyrolecd","claimsparty");
x.t("claimcenter","integration");
x.t("claimcenter","includes");
x.t("claimcenter","claimcontact");
x.t("claimcenter","correspond");
x.t("claimcenter","data");
x.t("claimcenter","returns");
x.t("exposure","gw.fnolmapper.acord.iexposuremapper");
x.t("exposure","incident");
x.t("write","gosu");
x.t("write","customize");
x.t("lines","protected");
x.t("array","namespace");
x.t("array","strings");
x.t("string","alias");
x.t("string","however");
x.t("string","namespace");
x.t("string","getinternalcodebyalias");
x.t("string","values");
x.t("string","corresponding");
x.t("string","typelist");
x.t("acordutil","contains");
x.t("subelement","default");
x.t("manipulate","xml");
x.t("manipulate","acord");
x.t("relative","config");
x.t("earlier","topic");
x.t("understand","possible");
x.t("acordfnolmapper","instantiate");
x.t("acordfnolmapper","class");
x.t("store","mapping");
x.t("getinternalcodebyalias","method");
x.t("getinternalcodebyalias","string");
x.t("getinternalcodebyalias","return");
x.t("gw.xml.xsd.types.xsdtime","object");
x.t("error","occurred");
x.t("claimcontact","entities");
x.t("claimcontact","object");
x.t("raw","text");
x.t("tion","directory");
x.t("config","root");
x.t("nonuniquetypecodeexception","exception");
x.t("getrole","(rolename:string)");
x.t("display","name");
x.t("delegate","implementation");
x.t("know","convert");
x.t("representation","xml");
x.t("mapped","specify");
x.t("absolute","path");
x.t("appears","gosu");
x.t("means","unmapped");
x.t("throw","exception");
x.t("allowed","method");
x.t("resolve","single");
x.t("guidewire_selectall","var");
x.t("cause","gosu");
x.t("conversions","specific");
x.t("processing","acord");
x.t("function","createmapperfactory");
x.t("function","getrole");
x.t("function","guidewire_selectall");
x.t("implements","interface");
x.t("implements","default");
x.t("implements","imapperfactory");
x.t("approach","keep");
x.t("imple","mentation");
x.t("specifies","following");
x.t("private","function");
x.t("customize","mappers");
x.t("contactmanager","class");
x.t("different","classes");
x.t("starting","claimsnotificationaddrq");
x.t("instead","method");
x.t("instead","default");
x.t("instead","modifying");
x.t("instead","delegates");
x.t("replace","implementation");
x.t("mapper.alias.default","default");
x.t("claimrole","new");
x.t("claimrole","write");
x.t("(rolename)","return");
x.t("real-world","implementation");
x.t("changes","default");
x.t("variant","object");
x.t("format","supports");
x.t("format","mapping");
x.t("types","method");
x.t("types","insuredorprincipal_type");
x.t("types","details");
x.t("xml","role");
x.t("xml","support");
x.t("xml","text");
x.t("xml","guidewire");
x.t("xml","objects");
x.t("xml","file");
x.t("xml","gosu");
x.t("xml","raw");
x.t("xml","mapped");
x.t("xml","node");
x.t("xml","data");
x.t("xml","mapping");
x.t("xml","encoding");
x.t("directory","access");
x.t("section","mapper");
x.t("catch-all","typecode");
x.t("internal","typecode");
x.t("internal","code");
x.t("match","found");
x.t("important","information");
x.t("important","work");
x.t("node","objects");
x.t("node","object");
x.t("xsd.acord.claimsparty_type","add");
x.t("xsd.acord.claimsparty_type","gosu");
x.t("abc.claimcenter.fnolmapper.abcmapperfactory","(this)");
x.t("fnolmapperconfig","class");
x.t("{cc}","/config/typelists/mapping");
x.t("calling","methods");
x.t("tuple","require");
x.t("correspond","claimcontact");
x.t("reference","guide");
x.t("code","easy");
x.t("code","contact");
x.t("code","alias");
x.t("code","guidewire");
x.t("code","private");
x.t("code","non-typesafe");
x.t("typekey","name");
x.t("client","soap");
x.t("follow","approach");
x.t("typecodes","external");
x.t("typecodes","found");
x.t("typecodes","codes");
x.t("typecodes","namespace-alias");
x.t("typecodes","map");
x.t("typecodes","cause");
x.t("typecodes","real-world");
x.t("typecodes","given");
x.t("instantiate","new");
x.t("instantiate","mapper");
x.t("instantiate","implementation");
x.t("instantiate","versions");
x.t("return","properties");
x.t("return","role");
x.t("return","type");
x.t("return","new");
x.t("return","claimrole");
x.t("return","internal");
x.t("adds","additional");
x.t("mapper.file=typecodemapping.xml","add");
x.t("ids","refer");
x.t("tracks","roles");
x.t("gw.fnolmapper.acord.impl.acordincidentmapper","policy");
x.t("given","name");
x.t("given","namespace");
x.t("given","typelist");
x.t("matches","given");
x.t("performing","alias-to-typekey");
x.t("e.g","mapper.alias.default=default");
x.t("occurred","messsage");
x.t("null","match");
x.t("acord-specific","mapping");
x.t("factory","protected");
x.t("factory","however");
x.t("factory","instead");
x.t("factory","class");
x.t("configuration","files");
x.t("configuration","file");
x.t("configuration","information");
x.t("configuration","utility");
x.t("include","getfile");
x.t("getfile","returns");
x.t("natively","following");
x.t("mapper","root");
x.t("mapper","properties");
x.t("mapper","built-in");
x.t("mapper","uses");
x.t("mapper","calls");
x.t("mapper","getinternalcodesbyalias");
x.t("mapper","know");
x.t("mapper","return");
x.t("mapper","factory");
x.t("mapper","structure");
x.t("mapper","classes");
x.t("manipulating","xml");
x.t("core","configuration");
x.t("additional","properties");
x.t("additional","convenience");
x.t("non-typesafe","claimcenter");
x.t("easier","manipulate");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("implementation","studio");
x.t("implementation","gw.api.fnolmapper.fnolmapper");
x.t("implementation","likely");
x.t("implementation","uses");
x.t("implementation","interface");
x.t("implementation","calls");
x.t("implementation","customer-viewable");
x.t("implementation","claimcenter");
x.t("implementation","acord-specific");
x.t("implementation","classes");
x.t("implementation","class");
x.t("implementation","modify");
x.t("implementation","acord");
x.t("gw.fnolmapper.acord.acordfnolmapper","maps");
x.t("delegates","important");
x.t("delegates","work");
x.t("specific","element");
x.t("specific","typelist");
x.t("specific","acord");
x.t("configura","tion");
x.t("unmapped","typecodes");
x.t("util","included");
x.t("gw.fnolmapper.acord.impl.acordcontactmapper","exposure");
x.t("native","gosu");
x.t("native","xml");
x.t("exception","method");
x.t("exception","back");
x.t("exception","eventually");
x.t("zero-length","non-null");
x.t("manager","included");
x.t("manages","mapping");
x.t("read","write");
x.t("services","client");
x.t("takes","argument");
x.t("page","error");
x.t("nodes","native");
x.t("compile-time","type");
x.t("convenience","method");
x.t("convenience","methods");
x.t("location","module_root");
x.t("location","claimcenter/modules/configuraiton/config/fnolmapper/acord/mapper.properties");
x.t("diagram","shows");
x.t("diagram","following");
x.t("data","delegate");
x.t("data","important");
x.t("data","nodes");
x.t("data","model");
x.t("acordcontactmapper","uses");
x.t("acordcontactmapper","class");
x.t("correct","compile-time");
x.t("information","standard");
x.t("information","manipulating");
x.t("information","configura");
x.t("information","convenience");
x.t("imapperfactory","interface");
x.t("imapperfactory","return");
x.t("imapperfactory","implementation");
x.t("gw.fnolmapper.acord.ipolicymapper","gw.fnolmapper.acord.impl.acordpolicymapper");
x.t("spec","appears");
x.t("detailaddressenhancement","enhances");
x.t("claimspartyenhancement","enhances");
x.t("policy","gw.fnolmapper.acord.ipolicymapper");
x.t("mappers","built-in");
x.t("mappers","want");
x.t("mappers","addresses");
x.t("mappers","manipulate");
x.t("case","acord");
x.t("utility","class");
x.t("values","avoid");
x.t("todatetime","version");
x.t("todatetime","convert");
x.t("structure","fnol");
x.t("called","acordconfig");
x.t("called","getcontactrolemap");
x.t("called","gw.api.fnolmapper.fnolmapperconfig");
x.t("called","gw.fnolmapper.acord.acordfnolmapper");
x.t("maps","basic");
x.t("gw.fnolmapper.acord.impl.acordaddressmapper","contact");
x.t("gw.fnolmapper.acord.iincidentmapper","gw.fnolmapper.acord.impl.acordincidentmapper");
x.t("specialized","mappers");
x.t("eventually","claimcenter");
x.t("enhancements","dates");
x.t("enhancements","claimcenter");
x.t("classes","built-in");
x.t("classes","support");
x.t("classes","alternatively");
x.t("classes","address");
x.t("classes","function");
x.t("classes","instantiate");
x.t("classes","structure");
x.t("classes","specialized");
x.t("gw.fnolmapper.acord.impl.acordexposuremapper","incident");
x.t("incident","perform");
x.t("incident","gw.fnolmapper.acord.iincidentmapper");
x.t("incident","mapping");
x.t("two","contact");
x.t("two","methods");
x.t("alias-to-typekey","conversions");
x.t("work","objects");
x.t("work","configuration");
x.t("work","mapping");
x.t("significant","changes");
x.t("cases","file");
x.t("cases","xsd");
x.t("based","default");
x.t("datetimeenhancement","enhances");
x.t("mapping","interfaces");
x.t("mapping","files");
x.t("mapping","guidewire");
x.t("mapping","found");
x.t("mapping","file");
x.t("mapping","name");
x.t("mapping","claimcenter");
x.t("mapping","xml");
x.t("mapping","code");
x.t("mapping","typecodes");
x.t("mapping","configuration");
x.t("mapping","classes");
x.t("mapping","used");
x.t("mapping","class");
x.t("naturally","typesafe");
x.t("mapper.properties","files");
x.t("mapper.properties","file");
x.t("dateenhancement","enhances");
x.t("model","claims");
x.t("following","table");
x.t("following","basic");
x.t("following","default");
x.t("following","gosu");
x.t("following","methods");
x.t("following","diagram");
x.t("following","modify");
x.t("used","typecodemapper");
x.t("used","look");
x.t("used","no");
x.t("used","xml");
x.t("system","codes");
x.t("corresponding","typecode");
x.t("special","gosu");
x.t("todate","method");
x.t("todate","todatetime");
x.t("relationships","different");
x.t("class","defines");
x.t("class","acordconfig");
x.t("class","typekeymap");
x.t("class","interface");
x.t("class","directly");
x.t("class","gw.api.fnolmapper.fnolmapperconfig");
x.t("class","provides");
x.t("class","allows");
x.t("class","acordutil");
x.t("class","implements");
x.t("class","instead");
x.t("class","instantiate");
x.t("class","tracks");
x.t("class","delegates");
x.t("class","specific");
x.t("class","manages");
x.t("class","diagram");
x.t("class","acordcontactmapper");
x.t("class","called");
x.t("class","based");
x.t("class","gets");
x.t("getdefaultkey","gets");
x.t("typelist","acordconfig");
x.t("typelist","built-in");
x.t("typelist","namespace");
x.t("typelist","string");
x.t("typelist","matches");
x.t("xsd","example");
x.t("xsd","available");
x.t("xsd","type");
x.t("xsd","types");
x.t("returns","built-in");
x.t("returns","file");
x.t("returns","typecode");
x.t("returns","map");
x.t("returns","array");
x.t("returns","string");
x.t("returns","null");
x.t("returns","exception");
x.t("returns","zero-length");
x.t("alternative","imple");
x.t("per","source");
x.t("series","typekeymap");
x.t("modify","file");
x.t("modify","simple");
x.t("modify","directly");
x.t("modify","acordfnolmapper");
x.t("modify","mapper");
x.t("behavior","map");
x.t("var","text_val=eval");
x.t("var","claimrole");
x.t("acord","properties");
x.t("acord","files");
x.t("acord","file");
x.t("acord","no");
x.t("acord","format");
x.t("acord","types");
x.t("acord","xml");
x.t("acord","mapper");
x.t("acord","implementation");
x.t("acord","util");
x.t("acord","spec");
x.t("acord","called");
x.t("acord","class");
x.t("acord","xsd");
x.t("claims","exposures");
x.t("including","built-in");
x.t("versions","mapping");
x.t("getproperties","return");
x.t("roles","easy-to-read");
x.t("roles","contacts");
x.t("roles","returns");
x.t("xsd.acord.datetime","add");
x.t("imports","returns");
x.t("representing","typecodes");
x.t("contains","method");
x.t("contains","simple");
x.t("contains","display");
x.t("contains","following");
x.t("object","possible");
x.t("object","type");
x.t("object","file");
x.t("object","given");
x.t("object","natively");
x.t("object","detailaddressenhancement");
x.t("object","todatetime");
x.t("object","datetimeenhancement");
x.t("object","returns");
x.t("encoding","type");
x.t("mentation","gosu");
x.t("gets","instance");
x.t("gets","default");
x.t("gets","methods");
x.t("specify","property");
x.t("generally","corresponds");
x.t("manipulates","typekeys");
}
