function FileData_Pairs(x)
{
x.t("example","claim");
x.t("example","typecode");
x.t("example","suppose");
x.t("example","intellij");
x.t("example","call");
x.t("differently","across");
x.t("possible","values");
x.t("properties","methods");
x.t("method","string");
x.t("method","typelist");
x.t("available","typelist");
x.t("tc_","example");
x.t("tc_","prefix");
x.t("claim","few");
x.t("claim","auto");
x.t("claim","worker\u2019s");
x.t("claim","object\u2019s");
x.t("easy","access");
x.t("within","typecode");
x.t("within","class");
x.t("fromstring","fromvalue");
x.t("fromstring","typelist");
x.t("full","typecode");
x.t("integration","guide");
x.t("integration","documentation");
x.t("refer","either");
x.t("describes","contents");
x.t("static","properties");
x.t("create","run");
x.t("create","typelist");
x.t("surrounds","unicode");
x.t("instance","reference");
x.t("few","choices");
x.t("completion","features");
x.t("maximizes","compatibility");
x.t("scripts","integrated");
x.t("text_val.select","link");
x.t("look","typelist");
x.t("modified","encoding");
x.t("interface","function");
x.t("interface","becomes");
x.t("type","losstype");
x.t("type","represented");
x.t("change","maximizes");
x.t("best","determine");
x.t("time","best");
x.t("time","api");
x.t("time","accessing");
x.t("external","system");
x.t("property","look");
x.t("property","name");
x.t("property","discrete");
x.t("property","contains");
x.t("married-joint","across");
x.t("convert","enumerated");
x.t("text","representation");
x.t("link","directly");
x.t("contents","simple");
x.t("prefix","aware");
x.t("access","object");
x.t("objects","improves");
x.t("details","itypelisttools");
x.t("includes","typelist");
x.t("messsage","claimcenter");
x.t("indicates","claim");
x.t("hyphen","character");
x.t("list","typelist");
x.t("need","verify");
x.t("typecode","property");
x.t("typecode","name");
x.t("typecode","enumeration");
x.t("typecode","string");
x.t("typecode","values");
x.t("typecode","contains");
x.t("improves","development");
x.t("guide","web");
x.t("api","list");
x.t("api","reference");
x.t("simple","typelist");
x.t("soap","example");
x.t("soap","interface");
x.t("overview","documentation");
x.t("(ide)","provides");
x.t("features","run");
x.t("directly","page");
x.t("losstype.tc_auto","auto");
x.t("dash","character");
x.t("text_val.focus","text_val.select");
x.t("name","differently");
x.t("name","describes");
x.t("name","official");
x.t("name","changes");
x.t("name","defined");
x.t("symbols","non-english");
x.t("wide","variety");
x.t("dictionary","find");
x.t("dictionary","regeneration");
x.t("dictionary","docu");
x.t("gosu","exposes");
x.t("enumerated","typelist");
x.t("codes","create");
x.t("codes","details");
x.t("codes","data");
x.t("codes","typelist");
x.t("discrete","possible");
x.t("enumeration","constants");
x.t("enumeration","class");
x.t("perform","function");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("methods","objects");
x.t("methods","perform");
x.t("methods","values");
x.t("provides","easy");
x.t("helpful","need");
x.t("find","values");
x.t("constants","defined");
x.t("official","name");
x.t("ascii","letters");
x.t("determine","available");
x.t("web","services");
x.t("web","service");
x.t("ide","code");
x.t("ide","eclipse");
x.t("claimcenter","integration");
x.t("claimcenter","data");
x.t("prefixed","tc_");
x.t("string","tostring");
x.t("string","containing");
x.t("string","pass");
x.t("regeneration","scripts");
x.t("characters","example");
x.t("characters","typecode");
x.t("characters","symbols");
x.t("characters","ascii");
x.t("auto","claim");
x.t("auto","claims");
x.t("losstype.gettc_wc","convert");
x.t("error","occurred");
x.t("choices","example");
x.t("losstype","property");
x.t("losstype","java");
x.t("syntax","describe");
x.t("suppose","typecode");
x.t("representation","pass");
x.t("space","characters");
x.t("guidewire_selectall","var");
x.t("function","guidewire_selectall");
x.t("function","despite");
x.t("function","gettypelistvalues");
x.t("unicode","value");
x.t("different","names");
x.t("language","characters");
x.t("aware","fromstring");
x.t("accessing","typecode");
x.t("loss","type");
x.t("loss","types");
x.t("types","web");
x.t("losstype.tc_wc","losstype.gettc_wc");
x.t("losstype.tc_wc","worker\u2019s");
x.t("changes","change");
x.t("verify","code");
x.t("simply","code");
x.t("tostring","method");
x.t("reference","javadoc");
x.t("reference","similarly");
x.t("client","code");
x.t("code","completion");
x.t("code","modified");
x.t("code","losstype.tc_auto");
x.t("code","losstype.tc_wc");
x.t("code","valid");
x.t("languages","web");
x.t("tc_married$45$joint","45");
x.t("typecodes","external");
x.t("typecodes","web");
x.t("return","text");
x.t("environment","(ide)");
x.t("whose","name");
x.t("worker\u2019s","compensation");
x.t("java","syntax");
x.t("despite","different");
x.t("documentation","includes");
x.t("documentation","overview");
x.t("occurred","messsage");
x.t("intellij","ide");
x.t("variety","programming");
x.t("itypelisttools","interface");
x.t("value","instance");
x.t("value","typecode");
x.t("value","dash");
x.t("value","character");
x.t("value","development");
x.t("value","names");
x.t("value","tc_auto");
x.t("represented","within");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("non-english","language");
x.t("compatibility","wide");
x.t("exposes","typecode");
x.t("programming","languages");
x.t("docu","mentation");
x.t("services","function");
x.t("services","typecodes");
x.t("services","(soap)");
x.t("services","typelist");
x.t("(soap)","typecodes");
x.t("valid","mapping");
x.t("page","error");
x.t("eclipse","ide");
x.t("data","dictionary");
x.t("data","model");
x.t("becomes","tc_married$45$joint");
x.t("defined","within");
x.t("defined","enumeration");
x.t("defined","data");
x.t("values","example");
x.t("values","tc_");
x.t("values","refer");
x.t("values","static");
x.t("values","property");
x.t("values","indicates");
x.t("values","string");
x.t("values","simply");
x.t("values","defined");
x.t("javadoc","claimcenter");
x.t("value\u2019s","name");
x.t("character","married-joint");
x.t("character","characters");
x.t("character","note");
x.t("fromvalue","method");
x.t("fromvalue","methods");
x.t("note","typelist");
x.t("object\u2019s","loss");
x.t("letters","numbers");
x.t("numeric","value");
x.t("numbers","gosu");
x.t("call","losstype.tc_auto.tostring");
x.t("losstype.tc_auto.tostring","return");
x.t("mapping","typecodes");
x.t("either","api");
x.t("model","prefixed");
x.t("service","client");
x.t("45","numeric");
x.t("run","time");
x.t("run","dictionary");
x.t("system","codes");
x.t("typelist","codes");
x.t("typelist","helpful");
x.t("typelist","value");
x.t("typelist","values");
x.t("typelist","value\u2019s");
x.t("typelist","object");
x.t("class","losstype");
x.t("class","whose");
x.t("similarly","create");
x.t("containing","full");
x.t("across","soap");
x.t("pass","fromstring");
x.t("pass","value");
x.t("development","time");
x.t("development","environment");
x.t("names","example");
x.t("names","typelist");
x.t("compensation","claim");
x.t("compensation","claims");
x.t("var","text_val=eval");
x.t("describe","loss");
x.t("claims","typecode");
x.t("claims","losstype.tc_wc");
x.t("object","properties");
x.t("object","property");
x.t("contains","hyphen");
x.t("contains","characters");
x.t("contains","space");
x.t("contains","values");
x.t("encoding","surrounds");
x.t("tc_auto","fromstring");
x.t("mentation","integration");
x.t("integrated","development");
}
