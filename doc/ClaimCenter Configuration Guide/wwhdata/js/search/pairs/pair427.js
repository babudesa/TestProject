function FileData_Pairs(x)
{
x.t("example","construct");
x.t("example","method");
x.t("example","gunit");
x.t("example","class");
x.t("example","asserttrue");
x.t("example","even");
x.t("supports","versions");
x.t("supports","server");
x.t("equal","specific");
x.t("verifynull","verifynotnull");
x.t("assertlistsame","assertmethoddeclaredandoverridesbaseclass");
x.t("mytestclass","menu");
x.t("mytestclass","debug");
x.t("root","node");
x.t("gw.testharness.testbase","construct");
x.t("gw.testharness.testbase","@gw.testharness.servertest");
x.t("construct","method");
x.t("construct","block");
x.t("construct","code");
x.t("construct","testname");
x.t("construct","run");
x.t("somevalue","someothervalue");
x.t("method","method");
x.t("method","rather");
x.t("method","create");
x.t("method","uses");
x.t("method","test");
x.t("method","name");
x.t("method","(test)");
x.t("method","second");
x.t("method","begin");
x.t("method","choosing");
x.t("method","opens");
x.t("method","named");
x.t("method","forms");
x.t("method","takes");
x.t("method","contains");
x.t("provide","functionality");
x.t("parameter","example");
x.t("testsomething","//perform");
x.t("assertiteratorsame","assertlength");
x.t("assertzero","assertthat");
x.t("version","preferable");
x.t("rather","adding");
x.t("full","class");
x.t("files","contains");
x.t("annotation","immediately");
x.t("within","test");
x.t("comment","gunit");
x.t("console","displays");
x.t("console","bottom");
x.t("console","log");
x.t("tree","select");
x.t("tree","free");
x.t("currently","guidewire");
x.t("create","new");
x.t("create","gunit");
x.t("create","individual");
x.t("studio","displays");
x.t("studio","populates");
x.t("studio","assertarraydoesnotcontain");
x.t("studio","failure");
x.t("studio","turns");
x.t("studio","resources");
x.t("preferable","includes");
x.t("green","tests");
x.t("completion","feature");
x.t("action","creates");
x.t("action","opens");
x.t("assertbigdecimalnotequals","assertcollection");
x.t("assertnotzero","assertnull");
x.t("creates","class");
x.t("uses","gw.testharness.testbase");
x.t("uses","verification");
x.t("assertarrayequals","assertbigdecimalequals");
x.t("dialog","class");
x.t("text_val.select","link");
x.t("@gw.testharness.servertest","class");
x.t("//perform","test");
x.t("recognizes","method");
x.t("displays","console");
x.t("displays","text");
x.t("displays","check");
x.t("displays","test");
x.t("displays","information");
x.t("necessary","select");
x.t("icon","next");
x.t("bar","green");
x.t("bar","red");
x.t("sample","code");
x.t("assert","method");
x.t("assert","fails");
x.t("assert","methods");
x.t("type","test");
x.t("basic","assert");
x.t("mytest.gs","studio");
x.t("calls","special");
x.t("verification","method");
x.t("verification","methods");
x.t("however","name");
x.t("multiple","forms");
x.t("assertequals","assertequals");
x.t("assertequals","verifytextinpage");
x.t("assertequals","assertequalsignorecase");
x.t("assertequals","reason");
x.t("guidewire","supports");
x.t("guidewire","recommends");
x.t("guidewire","provides");
x.t("guidewire","strongly");
x.t("text","string");
x.t("link","directly");
x.t("new","test");
x.t("new","package");
x.t("new","object");
x.t("single","condition");
x.t("verifytextinpage","verifyexists");
x.t("assertequalsignorelineending","assertequalsunordered");
x.t("assertmethoddeclaredandoverridesbaseclass","assertnotnull");
x.t("want","run");
x.t("details","configuring");
x.t("block","gosu");
x.t("block","empty");
x.t("block","code");
x.t("includes","failure");
x.t("document","failure");
x.t("choice","continue");
x.t("left-hand","pane");
x.t("messsage","claimcenter");
x.t("file","mytest.gs");
x.t("file","name");
x.t("file","following");
x.t("file","containing");
x.t("initialization","code");
x.t("need","define");
x.t("list","method");
x.t("list","methods");
x.t("list","entirety");
x.t("assertsame","assertset");
x.t("subpackages","choose");
x.t("complete","list");
x.t("recommends","document");
x.t("recommends","appropriate");
x.t("menu","action");
x.t("menu","choice");
x.t("guide","testing");
x.t("testing","gosu");
x.t("right-hand","pane");
x.t("check","mark");
x.t("configuring","test");
x.t("configuring","server");
x.t("assertdateequals","assertempty");
x.t("collections","object");
x.t("reasons","asserts");
x.t("fails","studio");
x.t("fails","test");
x.t("fails","makes");
x.t("run/debug","settings");
x.t("test","method");
x.t("test","console");
x.t("test","action");
x.t("test","assertequals");
x.t("test","single");
x.t("test","subpackages");
x.t("test","configuring");
x.t("test","fails");
x.t("test","test");
x.t("test","gunit");
x.t("test","methods");
x.t("test","provides");
x.t("test","progress");
x.t("test","select");
x.t("test","case-sensitive");
x.t("test","least");
x.t("test","environment");
x.t("test","enter");
x.t("test","word");
x.t("test","result");
x.t("test","classes");
x.t("test","class");
x.t("test","using");
x.t("test","succeeds");
x.t("test","server");
x.t("directly","page");
x.t("assertcomparesequal","assertdateequals");
x.t("desired","create");
x.t("creating","test");
x.t("creating","gunit");
x.t("creating","directory");
x.t("text_val.focus","text_val.select");
x.t("path","tests");
x.t("name","new");
x.t("name","left-hand");
x.t("name","test");
x.t("name","string");
x.t("name","begins");
x.t("name","identical");
x.t("name","match");
x.t("name","end");
x.t("name","class");
x.t("definition","files");
x.t("definition","class");
x.t("definition","contains");
x.t("definition","specify");
x.t("functionality","running");
x.t("operation","equal");
x.t("assertnotsame","assertnotzero");
x.t("assertnull","assertsame");
x.t("(test)","name");
x.t("settings","running");
x.t("gosu","calls");
x.t("gosu","code");
x.t("gosu","package");
x.t("gunit","recognizes");
x.t("gunit","test");
x.t("gunit","creating");
x.t("gunit","recognize");
x.t("gunit","generates");
x.t("tests","provide");
x.t("tests","fail");
x.t("tests","node");
x.t("tests","folder");
x.t("tests","succeed");
x.t("tests","allmytests.mytest");
x.t("tests","specify");
x.t("tests","server");
x.t("construction","example");
x.t("base","configuration");
x.t("part","method");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("exists","package");
x.t("methods","example");
x.t("methods","within");
x.t("methods","complete");
x.t("methods","test");
x.t("methods","begin");
x.t("methods","asserts");
x.t("methods","appear");
x.t("methods","forms");
x.t("methods","child");
x.t("provides","error");
x.t("provides","number");
x.t("place","test");
x.t("assertcollectioncontains","assertcollectiondoesnotcontain");
x.t("assertcollectioncontains","assertcollectionsame");
x.t("assertequalsignorecase","assertequalsignorelineending");
x.t("up","whole");
x.t("makes","easier");
x.t("continue","creating");
x.t("testme","method");
x.t("testme","test");
x.t("assertcollection","assertcollectioncontains");
x.t("assertnotnull","assertnotsame");
x.t("strings","collections");
x.t("claimcenter","configuration");
x.t("string","assert");
x.t("string","testme");
x.t("string","first");
x.t("string","super");
x.t("empty","may");
x.t("contain","initialization");
x.t("second","version");
x.t("understand","reason");
x.t("begin","word");
x.t("progress","bar");
x.t("error","test");
x.t("error","occurred");
x.t("error","failure");
x.t("(testname)","function");
x.t("notice","following");
x.t("recognize","string");
x.t("assertcollectiondoesnotcontain","assertcollectioncontains");
x.t("choosing","assertthat");
x.t("strongly","recommends");
x.t("someothervalue","notice");
x.t("next","method");
x.t("red","(optional)");
x.t("reason","comment");
x.t("reason","assertequals");
x.t("reason","part");
x.t("reason","failure");
x.t("entirety","following");
x.t("feature","studio");
x.t("assertcollectionsame","assertcomparesequal");
x.t("first","parameter");
x.t("select","new");
x.t("select","test");
x.t("select","tests");
x.t("select","either");
x.t("messages","given");
x.t("fail","studio");
x.t("guidewire_selectall","var");
x.t("number","verification");
x.t("assertequalsunordered","assertfalse");
x.t("demo","@gw.testharness.servertest");
x.t("function","testsomething");
x.t("function","guidewire_selectall");
x.t("annotations","construct");
x.t("annotations","currently");
x.t("@servertest","annotation");
x.t("may","contain");
x.t("define","test");
x.t("different","types");
x.t("begins","test");
x.t("assertfalsefor","assertgreaterthan");
x.t("identical","end");
x.t("asserts","guidewire");
x.t("asserts","expected");
x.t("verifyexists","verifynull");
x.t("assertfalse","assertfalsefor");
x.t("opens","test");
x.t("opens","up");
x.t("types","complete");
x.t("types","assertions");
x.t("directory","(package)");
x.t("match","test");
x.t("populates","file");
x.t("allmytests","uses");
x.t("allmytests","thus");
x.t("expected","result");
x.t("node","select");
x.t("node","right-click");
x.t("node","individual");
x.t("stub","class");
x.t("code","completion");
x.t("code","block");
x.t("code","test");
x.t("code","template");
x.t("code","using");
x.t("code","class");
x.t("end","test");
x.t("case-sensitive","example");
x.t("whole","variety");
x.t("thus","full");
x.t("folder","right-click");
x.t("folder","resources");
x.t("dealing","strings");
x.t("succeed","studio");
x.t("testname","construct");
x.t("testname","string");
x.t("environment","information");
x.t("least","method");
x.t("appear","multiple");
x.t("assertarraydoesnotcontain","assertarrayequals");
x.t("(package)","structure");
x.t("given","test");
x.t("assertset","assertsize");
x.t("enter","test");
x.t("occurred","messsage");
x.t("testbase","construct");
x.t("testbase","class");
x.t("assertgreaterthan","assertiteratorequals");
x.t("(optional)","desired");
x.t("configuration","guidewire");
x.t("configuration","guide");
x.t("failure","somevalue");
x.t("failure","create");
x.t("failure","guidewire");
x.t("failure","reasons");
x.t("failure","reason");
x.t("failure","messages");
x.t("include","@servertest");
x.t("variety","different");
x.t("running","test");
x.t("running","server");
x.t("named","gunit");
x.t("value","base");
x.t("assertempty","assertequals");
x.t("easier","understand");
x.t("right-click","menu");
x.t("right-click","select");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("mytest","extends");
x.t("free","however");
x.t("specific","value");
x.t("assertbigdecimalequals","assertbigdecimalnotequals");
x.t("extends","gw.testharness.testbase");
x.t("extends","testbase");
x.t("condition","example");
x.t("forms","code");
x.t("forms","although");
x.t("assertiteratorequals","assertiteratorsame");
x.t("assertthat","method");
x.t("assertthat","asserttrue");
x.t("template","creating");
x.t("word","test");
x.t("although","list");
x.t("takes","string");
x.t("screen","left-hand");
x.t("turns","test");
x.t("page","error");
x.t("asserttruewithin","assertzero");
x.t("nodes","right-hand");
x.t("information","test");
x.t("information","annotations");
x.t("result","operation");
x.t("result","object");
x.t("appropriate","assert");
x.t("expand","studio");
x.t("pane","displays");
x.t("pane","test");
x.t("pane","tests");
x.t("choose","class");
x.t("structure","necessary");
x.t("classes","tests");
x.t("classes","folder");
x.t("classes","package");
x.t("debug","mytestclass");
x.t("debug","resources");
x.t("mark","icon");
x.t("mark","next");
x.t("package","demo");
x.t("package","allmytests");
x.t("package","node");
x.t("package","right-click");
x.t("immediately","test");
x.t("immediately","class");
x.t("following","example");
x.t("following","basic");
x.t("following","assert");
x.t("following","test");
x.t("following","gosu");
x.t("special","construct");
x.t("verifynotnull","methods");
x.t("assertsize","assertsuitetorndown");
x.t("run","mytestclass");
x.t("run","gunit");
x.t("run","debug");
x.t("either","run");
x.t("bottom","screen");
x.t("individual","run/debug");
x.t("individual","methods");
x.t("class","example");
x.t("class","root");
x.t("class","dialog");
x.t("class","sample");
x.t("class","want");
x.t("class","details");
x.t("class","file");
x.t("class","need");
x.t("class","creating");
x.t("class","path");
x.t("class","name");
x.t("class","definition");
x.t("class","exists");
x.t("class","function");
x.t("class","mytest");
x.t("class","extends");
x.t("class","expand");
x.t("class","following");
x.t("using","new");
x.t("using","gunit");
x.t("using","annotations");
x.t("allmytests.mytest","place");
x.t("assertlist","assertlistequals");
x.t("containing","stub");
x.t("adding","reason");
x.t("succeeds","studio");
x.t("assertlength","assertlist");
x.t("child","nodes");
x.t("var","text_val=eval");
x.t("assertlistequals","assertlistsame");
x.t("versions","following");
x.t("generates","error");
x.t("asserttrue","assertequals");
x.t("asserttrue","asserttruewithin");
x.t("even","guidewire");
x.t("log","displays");
x.t("super","(testname)");
x.t("super","testname");
x.t("resources","tree");
x.t("resources","classes");
x.t("contains","construct");
x.t("contains","assert");
x.t("contains","test");
x.t("contains","@servertest");
x.t("object","test");
x.t("object","construction");
x.t("object","types");
x.t("server","test");
x.t("server","tests");
x.t("server","environment");
x.t("server","include");
x.t("specify","type");
x.t("specify","test");
x.t("assertsuitetorndown","assertthat");
x.t("assertions","dealing");
}
