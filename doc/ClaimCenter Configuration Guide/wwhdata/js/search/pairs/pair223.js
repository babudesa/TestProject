function FileData_Pairs(x)
{
x.t("example","defines");
x.t("example","clients");
x.t("example","suppose");
x.t("example","code");
x.t("example","data");
x.t("example","contains");
x.t("root","element");
x.t("looks","similar");
x.t("interfaces","example");
x.t("interfaces","allows");
x.t("interfaces","different");
x.t("taxid.dti","file");
x.t("taxid.dti","select");
x.t("taxid.dti","datatypedef");
x.t("parameter","contacttype");
x.t("parameter","notice");
x.t("parameter","named");
x.t("taxiddatatypedef","example");
x.t("taxiddatatypedef","implements");
x.t("exist","type");
x.t("else","typekey.country.type.isassignablefrom");
x.t("possible","actually");
x.t("construct","countryproperty");
x.t("defines","property");
x.t("defines","new");
x.t("defines","handler");
x.t("defines","persistence");
x.t("defines","following");
x.t("pattern","{pattern}");
x.t("pattern","ctx");
x.t("istringpresentationhandler","private");
x.t("implement","gw.datatype.def.idatatypedef");
x.t("implement","data");
x.t("implement","idatatypedef");
x.t("implement","following");
x.t("create","file");
x.t("create","handle");
x.t("create","persistence");
x.t("create","package");
x.t("studio","classes");
x.t("taxidconstraintshandler","(countryproperty)");
x.t("taxidconstraintshandler","implements");
x.t("taxidconstraintshandler","class");
x.t("{4}","\\\\d");
x.t("getinputmask","ctx");
x.t("required","pattern");
x.t("required","property");
x.t("countryproperty","exist");
x.t("countryproperty","parameter");
x.t("countryproperty","constructs");
x.t("countryproperty","string");
x.t("countryproperty","desc=");
x.t("countryproperty","function");
x.t("countryproperty","identifies");
x.t("countryproperty","override");
x.t("countryproperty","system");
x.t("countryproperty","names");
x.t("various","handlers");
x.t("countryprop","==");
x.t("countryprop","resolve");
x.t("countryprop","prop.ownerstype.typeinfo.getproperty");
x.t("10","//");
x.t("-\\\\d","{4}");
x.t("-\\\\d","{7}");
x.t("-\\\\d","{2}");
x.t("getplaceholderchar","ctx");
x.t("action","creates");
x.t("name=","countryproperty");
x.t("ipropertyinfo","errors");
x.t("ipropertyinfo","string");
x.t("ipropertyinfo","value");
x.t("ipropertyinfo","strvalue");
x.t("ipropertyinfo","integer");
x.t("ipropertyinfo","object");
x.t("likely","need");
x.t("istringconstraintshandler","var");
x.t("11","10");
x.t("creates","empty");
x.t("version=","1.0");
x.t("refers","constraints");
x.t("charsequence","return");
x.t("aspect","handlers");
x.t("xxx","name");
x.t("uses","gw.lang.reflect.ipropertyinfo");
x.t("uses","gw.datatype.def.idatatypedef");
x.t("uses","gw.datatype.impl.varcharpersistencehandler");
x.t("uses","java.lang.iterable");
x.t("uses","gw.datatype.datatypeexception");
x.t("uses","java.lang.integer");
x.t("uses","gw.datatype.handler.idatatypevaluehandler");
x.t("uses","gw.datatype.handler.istringpresentationhandler");
x.t("uses","gw.datatype.handler.istringconstraintshandler");
x.t("uses","gw.datatype.handler.idatatypeconstraintshandler");
x.t("uses","gw.datatype.def.idatatypedefvalidationerrors");
x.t("uses","gw.datatype.handler.idatatypepersistencehandler");
x.t("uses","gw.datatype.handler.idatatypepresentationhandler");
x.t("uses","gw.datatype.impl.simplevaluehandler");
x.t("uses","java.lang.charsequence");
x.t("idatatypepersistencehandler","return");
x.t("text_val.select","link");
x.t("register","new");
x.t("register","data");
x.t("interface","no-argument");
x.t("interface","step");
x.t("interface","implementation");
x.t("interface","data");
x.t("gw.lang.reflect.ipropertyinfo","uses");
x.t("errors","idatatypedefvalidationerrors");
x.t("validateuserinput","ctx");
x.t("type","possible");
x.t("type","defines");
x.t("type","implement");
x.t("type","create");
x.t("type","required");
x.t("type","aspect");
x.t("type","register");
x.t("type","however");
x.t("type","property");
x.t("type","file");
x.t("type","tax");
x.t("type","api");
x.t("type","name");
x.t("type","definition");
x.t("type","handler");
x.t("type","clients");
x.t("type","gw.newdatatypes.taxiddatatypedef");
x.t("type","parameters");
x.t("type","string");
x.t("type","defining");
x.t("type","attribute");
x.t("type","input");
x.t("type","function");
x.t("type","prop.ownerstype");
x.t("type","step");
x.t("type","designers");
x.t("type","factory");
x.t("type","case");
x.t("type","following");
x.t("type","using");
x.t("type","//");
x.t("(countryproperty)","countryprop");
x.t("(countryproperty)","override");
x.t("basic","database");
x.t("xmlns=","http://guidewire.com/datatype");
x.t("gw.datatype.def.idatatypedef","uses");
x.t("gw.datatype.def.idatatypedef","interface");
x.t("calls","pass");
x.t("gw.datatype.impl.varcharpersistencehandler","uses");
x.t("however","define");
x.t("however","reuses");
x.t("java.lang.iterable","uses");
x.t("value.matches","(pattern)");
x.t("property","countryproperty");
x.t("property","countryprop");
x.t("property","name");
x.t("property","typekey.country");
x.t("property","constraintshandler");
x.t("property","valuehandler");
x.t("property","owning");
x.t("property","presentationhandler");
x.t("property","persistencehandler");
x.t("property","named");
x.t("property","context");
x.t("property","data");
x.t("property","called");
x.t("text","file");
x.t("no-argument","constructor");
x.t("prop","ipropertyinfo");
x.t("prop","validation.taxid");
x.t("prop","value");
x.t("prop","strvalue");
x.t("guidewire","defines");
x.t("guidewire","guarantees");
x.t("caller-friendly","interface");
x.t("gw.datatype.datatypeexception","class");
x.t("new","taxidconstraintshandler");
x.t("new","file");
x.t("new","tax");
x.t("new","simplevaluehandler");
x.t("new","data");
x.t("new","varcharpersistencehandler");
x.t("new","taxidpresentationhandler");
x.t("new","datatypeexception");
x.t("link","directly");
x.t("objects","called");
x.t("element","taxid.dti");
x.t("contacttype","implementation");
x.t("details","attributes");
x.t("==","null");
x.t("java.lang.integer","uses");
x.t("getloadervalidationpredicates","columnname");
x.t("size","30");
x.t("30","override");
x.t("usually","need");
x.t("messsage","claimcenter");
x.t("file","studio");
x.t("file","places");
x.t("file","name");
x.t("file","first");
x.t("file","xml");
x.t("file","enter");
x.t("file","named");
x.t("places","datatypes");
x.t("presentation","handlers");
x.t("presentation","class");
x.t("need","create");
x.t("need","define");
x.t("tax","identification");
x.t("simplevaluehandler","(string)");
x.t("{value}","match");
x.t("guide","data");
x.t("validate","prop");
x.t("validate","format");
x.t("gw.datatype.handler.idatatypevaluehandler","uses");
x.t("check","countryproperty");
x.t("api","interfaces");
x.t("api","following");
x.t("java.lang.string","parameterdef");
x.t("java.lang.string","/datatypedef");
x.t("java.lang.string","break");
x.t("false","trimwhitespace");
x.t("getconsistencycheckerpredicates","columnname");
x.t("directly","page");
x.t("true","size");
x.t("true","type=");
x.t("handle","taxid");
x.t("specified","type");
x.t("idatatypevaluehandler","return");
x.t("idatatypedefvalidationerrors","//");
x.t("constraints","presentation");
x.t("iterable","charsequence");
x.t("text_val.focus","text_val.select");
x.t("name","action");
x.t("name","property");
x.t("name","new");
x.t("name","taxid");
x.t("definition","caller-friendly");
x.t("definition","claimcenter");
x.t("someparameter","implementation");
x.t("someparameter","data");
x.t("typekey.country","note");
x.t("typekey.country","var");
x.t("constructor","property");
x.t("(countryprop.type)","errors.adderror");
x.t("handler","interfaces");
x.t("handler","guidewire");
x.t("handler","constraints");
x.t("handler","varcharpersistencehandler");
x.t("clients","imple");
x.t("clients","data");
x.t("argument","values");
x.t("idatatypepresentationhandler","return");
x.t("guarantees","fill");
x.t("fill","implementation");
x.t("guidewire-provided","persistence");
x.t("validation.taxid","value");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("illustrates","steps");
x.t("gw.newdatatypes.taxiddatatypedef","details");
x.t("gw.newdatatypes.taxiddatatypedef","valuetype=");
x.t("gw.newdatatypes.taxiddatatypedef","class");
x.t("parameters","example");
x.t("parameters","calling");
x.t("parameters","implementation");
x.t("(string)","override");
x.t("constructs","constraints");
x.t("gw.datatype.handler.istringpresentationhandler","class");
x.t("namespace","http://guidewire.com/datatype");
x.t("makes","context");
x.t("determine","type");
x.t("constraintshandler","idatatypeconstraintshandler");
x.t("encrypted","false");
x.t("allows","definition");
x.t("typeis","person");
x.t("claimcenter","configuration");
x.t("claimcenter","data");
x.t("empty","data");
x.t("string","parameter");
x.t("string","construct");
x.t("string","countryproperty");
x.t("string","iterable");
x.t("string","switch");
x.t("string","validatevalue");
x.t("string","return");
x.t("string","_countryproperty");
x.t("string","var");
x.t("(pattern)","throw");
x.t("defining","new");
x.t("desc=","name");
x.t("attribute","define");
x.t("[_countryproperty]","country");
x.t("input","mask");
x.t("mask","validation");
x.t("error","occurred");
x.t("errors.adderror","property");
x.t("notice","handlers");
x.t("notice","implementation");
x.t("getlength","ctx");
x.t("involved","defining");
x.t("1.0","datatypedef");
x.t("suppose","new");
x.t("valuehandler","idatatypevaluehandler");
x.t("{3}","-\\\\d");
x.t("validation","string");
x.t("select","new");
x.t("select","resources");
x.t("valuetype=","java.lang.string");
x.t("parameterdef","name=");
x.t("first","create");
x.t("resolve","typekey.country");
x.t("throw","new");
x.t("number","objects");
x.t("number","data");
x.t("guidewire_selectall","var");
x.t("handlers","example");
x.t("handlers","basic");
x.t("handlers","guidewire");
x.t("handlers","makes");
x.t("handlers","define");
x.t("handlers","step");
x.t("handlers","gw.datatype.handler.idatatypeconstraintshandler");
x.t("handlers","data");
x.t("handlers","created");
x.t("function","getinputmask");
x.t("function","getplaceholderchar");
x.t("function","validateuserinput");
x.t("function","getloadervalidationpredicates");
x.t("function","validate");
x.t("function","getconsistencycheckerpredicates");
x.t("function","getlength");
x.t("function","guidewire_selectall");
x.t("function","getcountry");
x.t("function","validatevalue");
x.t("function","validateustaxid");
x.t("function","geteditorvalue");
x.t("function","getdisplayformat");
x.t("/datatypedef","root");
x.t("implements","istringpresentationhandler");
x.t("implements","istringconstraintshandler");
x.t("implements","idatatypedef");
x.t("{pattern}","prop");
x.t("define","new");
x.t("define","handlers");
x.t("define","writable");
x.t("private","function");
x.t("private","var");
x.t("prop.ownerstype","else");
x.t("reads","value");
x.t("different","data");
x.t("imple","mentation-friendly");
x.t("person","11");
x.t("person","\\\\d");
x.t("person","//");
x.t("step","implement");
x.t("step","register");
x.t("designers","example");
x.t("gw.datatype.handler.istringconstraintshandler","uses");
x.t("getcountry","ctx");
x.t("getcountry","(ctx)");
x.t("types","defining");
x.t("types","step");
x.t("xml","version=");
x.t("format","values");
x.t("gw.datatype.handler.idatatypeconstraintshandler","uses");
x.t("gw.datatype.handler.idatatypeconstraintshandler","separation");
x.t("gw.datatype.handler.idatatypeconstraintshandler","gw.datatype.handler.idatatypepersistencehandler");
x.t("gw.datatype.iconstraineddatatype","however");
x.t("match","required");
x.t("owning","type");
x.t("owning","entity");
x.t("presentationhandler","idatatypepresentationhandler");
x.t("prop.ownerstype.typeinfo.getproperty","(countryproperty)");
x.t("calling","handlers");
x.t("separation","interfaces");
x.t("switch","getcountry");
x.t("switch","(country)");
x.t("steps","involved");
x.t("steps","step");
x.t("code","class");
x.t("validatevalue","ctx");
x.t("ctx","prop");
x.t("ctx","typeis");
x.t("ctx","[_countryproperty]");
x.t("ctx","object");
x.t("identifies","country");
x.t("folder","enter");
x.t("folder","package");
x.t("override","property");
x.t("override","function");
x.t("return","new");
x.t("return","ctx");
x.t("return","override");
x.t("return","null");
x.t("persistence","handler");
x.t("persistence","handlers");
x.t("database","column");
x.t("(country)","case");
x.t("identification","number");
x.t("enter","taxid.dti");
x.t("enter","following");
x.t("whose","value");
x.t("actual","property");
x.t("occurred","messsage");
x.t("gw.datatype.def.idatatypedefvalidationerrors","uses");
x.t("persistencehandler","idatatypepersistencehandler");
x.t("null","errors.adderror");
x.t("null","private");
x.t("null","override");
x.t("columnname","string");
x.t("configuration","guide");
x.t("configuration","data");
x.t("factory","pass");
x.t("typekey.country.type.isassignablefrom","(countryprop.type)");
x.t("specifically","data");
x.t("\\\\d","{3}");
x.t("\\\\d","{2}");
x.t("named","taxid.dti");
x.t("named","countryproperty");
x.t("named","someparameter");
x.t("named","xxx.dti");
x.t("right-click","select");
x.t("http://guidewire.com/datatype","example");
x.t("http://guidewire.com/datatype","type=");
x.t("value","countryproperty");
x.t("value","type");
x.t("value","java.lang.string");
x.t("value","string");
x.t("value","class");
x.t("value","contains");
x.t("value","object");
x.t("similar","following");
x.t("trimwhitespace","true");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("implementation","various");
x.t("implementation","type");
x.t("implementation","parameters");
x.t("implementation","reads");
x.t("implementation","implementation");
x.t("implementation","class");
x.t("writable","property");
x.t("xxx.dti","xxx");
x.t("datatypedef","xmlns=");
x.t("datatypedef","namespace");
x.t("type=","java.lang.string");
x.t("type=","gw.newdatatypes.taxiddatatypedef");
x.t("actually","likely");
x.t("validateustaxid","ctx");
x.t("page","error");
x.t("context","validating");
x.t("context","object");
x.t("data","example");
x.t("data","type");
x.t("data","types");
x.t("data","model");
x.t("strvalue","string");
x.t("strvalue","override");
x.t("examples","illustrates");
x.t("validating","data");
x.t("{7}","value.matches");
x.t("idatatypedef","interface");
x.t("idatatypedef","private");
x.t("case","create");
x.t("case","return");
x.t("case","validateustaxid");
x.t("values","implementation");
x.t("values","required=");
x.t("(ctx)","switch");
x.t("(ctx)","case");
x.t("countries","override");
x.t("countries","return");
x.t("called","countryproperty");
x.t("called","taxid");
x.t("gw.newdatatypes","uses");
x.t("required=","true");
x.t("gw.datatype.handler.idatatypepersistencehandler","uses");
x.t("gw.datatype.handler.idatatypepersistencehandler","gw.datatype.handler.idatatypepresentationhandler");
x.t("classes","folder");
x.t("varcharpersistencehandler","usually");
x.t("varcharpersistencehandler","encrypted");
x.t("note","class");
x.t("column","types");
x.t("integer","var");
x.t("idatatypeconstraintshandler","return");
x.t("reuses","guidewire-provided");
x.t("country","validate");
x.t("country","notice");
x.t("country","private");
x.t("country","getcountry");
x.t("country","return");
x.t("country","context");
x.t("package","gw.newdatatypes");
x.t("package","class");
x.t("_countryproperty","countryproperty");
x.t("_countryproperty","string");
x.t("taxidpresentationhandler","(countryproperty)");
x.t("taxidpresentationhandler","implements");
x.t("taxidpresentationhandler","class");
x.t("created","specifically");
x.t("geteditorvalue","ctx");
x.t("order","determine");
x.t("model","step");
x.t("model","configuration");
x.t("following","implement");
x.t("following","create");
x.t("following","text");
x.t("following","gw.datatype.iconstraineddatatype");
x.t("following","gw.datatype.handler.idatatypeconstraintshandler");
x.t("following","steps");
x.t("following","data");
x.t("following","examples");
x.t("following","package");
x.t("entity","whose");
x.t("elements","relevant");
x.t("relevant","data");
x.t("system","calls");
x.t("mentation-friendly","interface");
x.t("break","//");
x.t("using","example");
x.t("taxid","value");
x.t("taxid","data");
x.t("class","looks");
x.t("class","taxiddatatypedef");
x.t("class","defines");
x.t("class","create");
x.t("class","taxidconstraintshandler");
x.t("class","refers");
x.t("class","file");
x.t("class","specified");
x.t("class","taxidpresentationhandler");
x.t("//","type");
x.t("//","check");
x.t("//","countries");
x.t("{2}","-\\\\d");
x.t("pass","countryproperty");
x.t("pass","argument");
x.t("datatypeexception","{value}");
x.t("names","actual");
x.t("var","pattern");
x.t("var","countryprop");
x.t("var","text_val=eval");
x.t("var","_countryproperty");
x.t("var","country");
x.t("gw.datatype.handler.idatatypepresentationhandler","uses");
x.t("gw.datatype.handler.idatatypepresentationhandler","class");
x.t("object","property");
x.t("object","prop");
x.t("object","return");
x.t("object","country");
x.t("object","order");
x.t("object","var");
x.t("contains","country");
x.t("contains","following");
x.t("resources","right-click");
x.t("datatypes","folder");
x.t("attributes","elements");
x.t("gw.datatype.impl.simplevaluehandler","class");
x.t("java.lang.charsequence","uses");
x.t("getdisplayformat","ctx");
}
