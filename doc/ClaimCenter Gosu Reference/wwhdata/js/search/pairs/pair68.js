function FileData_Pairs(x)
{
x.t("cleanup","always");
x.t("example","creates");
x.t("example","shows");
x.t("example","store");
x.t("example","suppose");
x.t("example","function");
x.t("example","opens");
x.t("example","output");
x.t("example","following");
x.t("example","using");
x.t("example","object");
x.t("statements","delimited");
x.t("statements","gosu");
x.t("statements","including");
x.t("readable","gosu");
x.t("synchronized","block");
x.t("supports","assigning");
x.t("tag","class");
x.t("tag","pass");
x.t("happen","within");
x.t("delimited","commas");
x.t("method","type\u2019s");
x.t("method","no");
x.t("method","gosu");
x.t("method","blocks");
x.t("method","release");
x.t("method","return");
x.t("method","depending");
x.t("method","takes");
x.t("method","help");
x.t("method","called");
x.t("method","call");
x.t("method","returns");
x.t("method","even");
x.t("method","clean");
x.t("possible","due");
x.t("monitorlock","using");
x.t("writer.write","streamutil.getcontent");
x.t("writer.write","text");
x.t("hints","gosu");
x.t("implement","icloseable");
x.t("implement","idisposable");
x.t("within","uses");
x.t("within","block");
x.t("within","file");
x.t("within","using");
x.t("cast","arbitrary");
x.t("cast","java");
x.t("cast","object");
x.t("java.util.concurrent.locks.reentrantlock","class");
x.t("ables","assigning");
x.t("rfc","new");
x.t("static","variables");
x.t("refer","http://en.wikipedia.org/wiki/monitor_");
x.t("create","new");
x.t("create","gosu");
x.t("create","resource");
x.t("description","new");
x.t("always","occurs");
x.t("always","using");
x.t("related","resources");
x.t("instance","java.io.filewriter");
x.t("variables","variables");
x.t("variables","inside");
x.t("variables","stored");
x.t("variables","assigning");
x.t("ensures","objects");
x.t("command-seperated","list");
x.t("synchronization","locking");
x.t("arguments","guidewire");
x.t("arguments","enter");
x.t("table2","rs.movetoinsertrow");
x.t("imonitorlock","cast");
x.t("imonitorlock","useful");
x.t("imonitorlock","//");
x.t("imonitorlock","object");
x.t("ability","assign");
x.t("rbuff.array","return");
x.t("regular","expression");
x.t("skips","rest");
x.t("try","writer.write");
x.t("try","//do");
x.t("try","finally");
x.t("try","//");
x.t("try","catch");
x.t("try","object");
x.t("locking","discussed");
x.t("discussed","later");
x.t("discussed","further");
x.t("creates","new");
x.t("creates","acquires");
x.t("creates","output");
x.t("comma-delimited","list");
x.t("icloseable","possible");
x.t("icloseable","interface");
x.t("_lock.lock","try");
x.t("line.matches","regexp");
x.t("later","section");
x.t("uses","java.util.concurrent.locks.reentrantlock");
x.t("uses","java.io.bufferedreader");
x.t("uses","java.io.file");
x.t("uses","clauses");
x.t("uses","result");
x.t("uses","java.io.filereader");
x.t("uses","verbose");
x.t("uses","itself");
x.t("uses","java.sql");
x.t("semicolons","several");
x.t("shows","using");
x.t("casted","gosu");
x.t("until","line");
x.t("line","reader.readline");
x.t("line","return");
x.t("line","matches");
x.t("line","null");
x.t("text_val.select","link");
x.t("statement","discussed");
x.t("statement","list");
x.t("statement","simplifies");
x.t("statement","follows");
x.t("statement","compact");
x.t("statement","return");
x.t("statement","using");
x.t("statement","pass");
x.t("working","resources");
x.t("displays","compile");
x.t("interface","imonitorlock");
x.t("interface","includes");
x.t("interface","approach");
x.t("interface","java.io.icloseable");
x.t("interface","information");
x.t("interface","called");
x.t("interface","class");
x.t("interface","contains");
x.t("open","stream");
x.t("close","method");
x.t("close","exit");
x.t("close","dispose");
x.t("close","output");
x.t("basic","form");
x.t("categories","objects");
x.t("categories","gosu");
x.t("type","implements");
x.t("type","shared");
x.t("type","run");
x.t("type","object");
x.t("type\u2019s","close");
x.t("type\u2019s","dispose");
x.t("times","without");
x.t("c:\\\\temp\\\\usingfun2.txt","writer.write");
x.t("exit","method");
x.t("exit","code");
x.t("acquire","creates");
x.t("acquire","resources");
x.t("payload","xml");
x.t("explicitly","check");
x.t("time","uses");
x.t("time","gosu");
x.t("time","performance");
x.t("time","find");
x.t("satisfy","requirements");
x.t("calls","dispose");
x.t("calls","object\u2019s");
x.t("owns","close");
x.t("owns","dispose");
x.t("filereader","c:\\\\temp\\\\usingfun.txt");
x.t("filereader","file");
x.t("streamutil.getcontent","reader");
x.t("ainsworth","rs.insertrow");
x.t("form","using");
x.t("form","//");
x.t("multiple","times");
x.t("multiple","items");
x.t("multiple","using");
x.t("multiple","threads");
x.t("multiple","item");
x.t("connection","using");
x.t("connection","object");
x.t("re-entrant","objects");
x.t("re-entrant","concurrent");
x.t("execution","example");
x.t("gw.lang.ireentrant","interface");
x.t("inside","statement");
x.t("inside","declaration");
x.t("inside","using");
x.t("lfc.position","lfc.size");
x.t("releases","ones");
x.t("releases","closes");
x.t("//do","something");
x.t("guidewire","profiler");
x.t("guidewire","recommends");
x.t("invoking","method");
x.t("text","within");
x.t("protect","against");
x.t("lock","within");
x.t("lock","function");
x.t("lock","synchronize");
x.t("lock","adding");
x.t("comma","character");
x.t("(this)",".channel");
x.t("apis","profiler");
x.t("reader.readline","line");
x.t("reader.readline","//");
x.t("link","directly");
x.t("new","filereader");
x.t("new","profiler");
x.t("new","bufferedreader");
x.t("new","fileoutputstream");
x.t("new","fileinputstream");
x.t("new","filewriter");
x.t("new","java");
x.t("new","profilertag");
x.t("new","reentrantlock");
x.t("new","using");
x.t("objects","try");
x.t("objects","objects");
x.t("objects","gosu");
x.t("objects","reentrant");
x.t("objects","properly");
x.t("objects","include");
x.t("objects","help");
x.t("objects","disposable");
x.t("objects","data");
x.t("objects","note");
x.t("objects","work");
x.t("objects","package");
x.t("objects","closeable");
x.t("objects","using");
x.t("precedence","disposable");
x.t("single","method");
x.t("single","variable");
x.t("access","multiple");
x.t("access","file");
x.t("access","data");
x.t("access","appropriate");
x.t("want","access");
x.t("want","reference");
x.t("contents","simplify");
x.t("contents","probably");
x.t("items","command-seperated");
x.t("items","using");
x.t("lfc.size","lfc.read");
x.t("details","using");
x.t("loop","finds");
x.t("block","code");
x.t("block","java");
x.t("block","following");
x.t("includes","java");
x.t("profiler","tag");
x.t("profiler","guidewire");
x.t("profiler","actions");
x.t("profiler","tags");
x.t("profiler","system");
x.t("messsage","gosu");
x.t("need","explicitly");
x.t("need","additional");
x.t("list","multiple");
x.t("list","inside");
x.t("list","gosu");
x.t("list","instead");
x.t("appropriately","even");
x.t("file","until");
x.t("file","list");
x.t("file","file");
x.t("file","handle");
x.t("file","iterate");
x.t("file","writer");
x.t("file","finally");
x.t("file","using");
x.t("file","var");
x.t("file","regexp");
x.t("c:\\\\temp\\\\usingfun.txt","var");
x.t("stmt","con.createstatement");
x.t("java.util.concurrent.locks.lock","interface");
x.t("java.util.concurrent.locks.lock","using");
x.t("pacakge","reentrantlock");
x.t("finds","match");
x.t("simplifies","synchronization");
x.t("simplifies","code");
x.t("assignment","run");
x.t("recommends","always");
x.t("recommends","using");
x.t("during","enter");
x.t("assign","variables");
x.t("assign","variable");
x.t("actions","happen");
x.t("complete","calls");
x.t("guide","returning");
x.t("guide","exception");
x.t("check","whether");
x.t("due","faster");
x.t("idisposable","possible");
x.t("idisposable","interface");
x.t("idisposable","contains");
x.t("reflection","examining");
x.t("java.io.filewriter","uses");
x.t("jdbc","java");
x.t("jdbc","resources");
x.t("false","gosu");
x.t("false","out.write");
x.t("fails","create");
x.t("directly","page");
x.t("commas","semicolons");
x.t("requirements","categories");
x.t("detects","object");
x.t("examining","type");
x.t("channels","objects");
x.t("locks","refer");
x.t("locks","exit");
x.t("locks","gosu");
x.t("locks","code");
x.t("handle","pass");
x.t("true","line");
x.t("true","lbuff.clear");
x.t("desired","tag.setcountervalue");
x.t("test","information");
x.t("text_val.focus","text_val.select");
x.t("wrong","using");
x.t("outputstream","os");
x.t("no","arguments");
x.t("no","effect");
x.t("faster","run");
x.t("stored","gosu");
x.t("bytebuffer.allocate","(buffersize)");
x.t("name","description");
x.t("gosu","statements");
x.t("gosu","example");
x.t("gosu","ensures");
x.t("gosu","displays");
x.t("gosu","interface");
x.t("gosu","calls");
x.t("gosu","releases");
x.t("gosu","profiler");
x.t("gosu","reflection");
x.t("gosu","detects");
x.t("gosu","attempt");
x.t("gosu","recognize");
x.t("gosu","simply");
x.t("gosu","reference");
x.t("gosu","code");
x.t("gosu","java");
x.t("gosu","considers");
x.t("gosu","dispose");
x.t("gosu","expression");
x.t("gosu","runs");
x.t("gosu","call");
x.t("gosu","using");
x.t("gosu","class");
x.t("gosu","disposes");
x.t("follows","using");
x.t("returning","values");
x.t("performance","close");
x.t("performance","dispose");
x.t("closed","invoking");
x.t("iterate","across");
x.t("references","variable_name");
x.t("finite","extent");
x.t("reentrant","example");
x.t("reentrant","objects");
x.t("reentrant","object");
x.t("base","types");
x.t("con.createstatement","var");
x.t("lbuff","bytebuffer.allocate");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("further","returning");
x.t("slower","run");
x.t("prominent","type");
x.t("useful","cast");
x.t("useful","expression");
x.t("methods","desired");
x.t("methods","no");
x.t("lbuff.clear","rbuff.clear");
x.t("boolean","using");
x.t("up","appropriately");
x.t("up","stream");
x.t("up","words");
x.t("up","resources");
x.t("standard","return");
x.t("find","method");
x.t("writer","instance");
x.t("writer","objects");
x.t("writer","new");
x.t("writer","null");
x.t("combine","multiple");
x.t("discuss","three");
x.t("final","lifecycle");
x.t("rest","code");
x.t("write","readable");
x.t("concurrent","access");
x.t("concurrent","code");
x.t("attempt","acquire");
x.t("string","boolean");
x.t("string","values");
x.t("tag.setcountervalue","test");
x.t("lines","file");
x.t("extent","code");
x.t("stream","try");
x.t("stream","close");
x.t("stream","outputstream");
x.t("stream","finally");
x.t("stream","code");
x.t("stream","completes");
x.t("stream","already");
x.t("stream","perhaps");
x.t("stream","typically");
x.t("stream","//");
x.t("contain","either");
x.t("three","types");
x.t("java.io","closeable");
x.t("resource","acquire");
x.t("later-appearing","items");
x.t("containstext","file");
x.t("simplify","code");
x.t("simplify","kind");
x.t("store","data");
x.t("_lock1","_lock2");
x.t("ones","succeed");
x.t("error","occurred");
x.t("error","following");
x.t("error","conditions");
x.t("something","single");
x.t("something","wrong");
x.t("something","parentheses");
x.t("something","output");
x.t("recognize","valid");
x.t("contrast","write");
x.t("blocks","code");
x.t("_lock.unlock","contrast");
x.t("equivalent","synchronized");
x.t("_lock2","_lock3");
x.t("bufferedreader","new");
x.t("bufferedreader","class");
x.t("compact","less");
x.t("finally","block");
x.t("finally","writer");
x.t("finally","_lock.unlock");
x.t("finally","clauses");
x.t("finally","clause");
x.t("finally","os.close");
x.t("occurs","without");
x.t("suppose","call");
x.t("_lock3","//");
x.t("calculating","event");
x.t("next","line");
x.t("throw","exception");
x.t("select","table2");
x.t("feature","ability");
x.t("gw.api.profiler.profilertag","hints");
x.t("gw.api.profiler.profilertag","implements");
x.t("guidewire_selectall","var");
x.t("eventpayloadxml","calculating");
x.t("function","monitorlock");
x.t("function","containstext");
x.t("function","guidewire_selectall");
x.t("function","usereentrantlocknew");
x.t("function","usereentrantlockold");
x.t("function","samplejdbc");
x.t("implements","icloseable");
x.t("implements","java.util.concurrent.locks.lock");
x.t("implements","idisposable");
x.t("implements","gosu");
x.t("implements","ireentrant");
x.t("implements","java");
x.t("approach","works");
x.t("approach","effectively");
x.t("parent","type\u2019s");
x.t("design","dispose");
x.t("c:\\\\temp\\\\test1.txt","writer.write");
x.t("c:\\\\temp\\\\test1.txt","try");
x.t("(rbuff)","arrays.equals");
x.t("whether","successfully");
x.t("whether","resources");
x.t("assignment_or_list_of_statements","//");
x.t("words","stream");
x.t("words","object");
x.t("stmt.executequery","select");
x.t("safe","access");
x.t("against","concurrent");
x.t("usereentrantlocknew","using");
x.t(".channel","var");
x.t("arrays.equals","lbuff.array");
x.t("reads","lines");
x.t("con","connection");
x.t("arbitrary","object");
x.t("language","assigning");
x.t("(lbuff)","rfc.read");
x.t("cleaned","up");
x.t("instead","gosu");
x.t("ireentrant","interface");
x.t("handling","object");
x.t("section","example");
x.t("section","concurrency");
x.t("keyword","contain");
x.t("keyword","disposable");
x.t("keyword","monitor");
x.t("keyword","using");
x.t("keyword","//");
x.t("compile","error");
x.t("types","objects");
x.t("types","calling");
x.t("release","locks");
x.t("release","system");
x.t("release","resources");
x.t("properly","lock");
x.t("properly","cleaned");
x.t("fileoutputstream","false");
x.t("acquires","successfully");
x.t("closes","disposes");
x.t("xml","profiler");
x.t("xml","//");
x.t("opens","file");
x.t("match","immediately");
x.t("works","slower");
x.t("calling","parent");
x.t("rs.movetoinsertrow","rs.updatestring");
x.t("simply","releases");
x.t("important","information");
x.t("reference","inside");
x.t("reference","guide");
x.t("code","within");
x.t("code","create");
x.t("code","creates");
x.t("code","uses");
x.t("code","open");
x.t("code","close");
x.t("code","execution");
x.t("code","new");
x.t("code","details");
x.t("code","loop");
x.t("code","assign");
x.t("code","references");
x.t("code","simplify");
x.t("code","implements");
x.t("code","properly");
x.t("code","following");
x.t("code","using");
x.t("completes","exception");
x.t("return","statement");
x.t("return","false");
x.t("return","true");
x.t("return","value");
x.t("return","values");
x.t("readwritelock","condition");
x.t("fileinputstream","(this)");
x.t("fileinputstream","(that)");
x.t("succeed","important");
x.t("adds","hints");
x.t("java.io.bufferedreader","uses");
x.t("successfully","gosu");
x.t("successfully","opened");
x.t("filewriter","c:\\\\temp\\\\usingfun2.txt");
x.t("filewriter","c:\\\\temp\\\\test1.txt");
x.t("database","connection");
x.t("message","payload");
x.t("matches","regular");
x.t("java","try");
x.t("java","interface");
x.t("java","file");
x.t("java","bufferedreader");
x.t("java","language");
x.t("java","database");
x.t("java","monitor");
x.t("java","classes");
x.t("parentheses","using");
x.t("variable","example");
x.t("variable","inside");
x.t("variable","want");
x.t("variable","assignment");
x.t("variable","expression");
x.t("variable","definitions");
x.t("considers","clause");
x.t("considers","object");
x.t("ensure","protect");
x.t("ensure","resources");
x.t("enter","method");
x.t("enter","exit");
x.t("effectively","equivalent");
x.t("kind","code");
x.t("(that)",".channel");
x.t("event","message");
x.t("java.io.file","uses");
x.t("occurred","messsage");
x.t("less","error-prone");
x.t("null","line.matches");
x.t("null","writer.close");
x.t("null","values");
x.t("closing","gosu");
x.t("longer","(non-recommended)");
x.t("concurrency","apis");
x.t("concurrency","section");
x.t("concurrency","including");
x.t("subtopics","discuss");
x.t("include","objects");
x.t("synchronize","data");
x.t("usereentrantlockold","_lock.lock");
x.t("additional","return");
x.t("value","within");
x.t("value","skips");
x.t("value","using");
x.t("rs","stmt.executequery");
x.t("main","work");
x.t("lfc","new");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("several","categories");
x.t("throwing","exception");
x.t("already","closed");
x.t("declaration","example");
x.t("declaration","using");
x.t("rbuff.clear","return");
x.t("depending","type");
x.t("exception","basic");
x.t("exception","words");
x.t("exception","handling");
x.t("exception","following");
x.t("exception","closeable");
x.t("dispose","method");
x.t("dispose","related");
x.t("dispose","close");
x.t("dispose","release");
x.t("perhaps","check");
x.t("condition","casted");
x.t("(synchronization)","implements");
x.t("lfc.read","(lbuff)");
x.t("clauses","cleanup");
x.t("clauses","re-entrant");
x.t("clauses","function");
x.t("clauses","return");
x.t("clauses","disposable");
x.t("clauses","following");
x.t("clauses","using");
x.t("clauses","closeable");
x.t("clauses","var");
x.t("clauses","object");
x.t("expression","comma-delimited");
x.t("expression","something");
x.t("expression","code");
x.t("expression","declaration");
x.t("expression","separate");
x.t("expression","using");
x.t("expression","//");
x.t("expression","pass");
x.t("runs","statements");
x.t("valid","reentrant");
x.t("valid","disposable");
x.t("valid","closeable");
x.t("takes","no");
x.t("(non-recommended)","form");
x.t("lbuff.array","rbuff.array");
x.t("read","next");
x.t("page","error");
x.t("separate","finally");
x.t("separate","item");
x.t("output","stream");
x.t("help","ensure");
x.t("help","manage");
x.t("java.io.icloseable","contains");
x.t("writer.close","contrast");
x.t("rs.updatestring","ainsworth");
x.t("corruption","prominent");
x.t("disposable","objects");
x.t("disposable","closeable");
x.t("disposable","object");
x.t("data","access");
x.t("data","channels");
x.t("data","corruption");
x.t("data","shared");
x.t("data","class");
x.t("data","streams");
x.t("information","profiler");
x.t("information","concurrency");
x.t("information","monitor");
x.t("(buffersize)","lfc.position");
x.t("(buffersize)","var");
x.t("result","object");
x.t("defined","following");
x.t("shared","re-entrant");
x.t("shared","multiple");
x.t("shared","data");
x.t("appropriate","during");
x.t("probably","want");
x.t("tags","profiler");
x.t("tags","using");
x.t("profilertag","methods");
x.t("profilertag","eventpayloadxml");
x.t("lifecycle","finite");
x.t("lifecycle","management");
x.t("values","within");
x.t("values","uses");
x.t("values","name");
x.t("values","using");
x.t("prevent","data");
x.t("reentrantlock","new");
x.t("reentrantlock","function");
x.t("reentrantlock","readwritelock");
x.t("monitor","lock");
x.t("monitor","locks");
x.t("called","close");
x.t("called","idisposable");
x.t("called","dispose");
x.t("owned","base");
x.t("out.write","content");
x.t("character","example");
x.t("java.io.filereader","function");
x.t("requiring","separate");
x.t("note","statements");
x.t("note","need");
x.t("note","gosu");
x.t("note","resources");
x.t("verbose","try");
x.t("classes","pacakge");
x.t("two","methods");
x.t("two","string");
x.t("variable_name","variable");
x.t("variable_name","expression");
x.t("administration","guide");
x.t("typically","code");
x.t("opened","closing");
x.t("work","combine");
x.t("work","finally");
x.t("work","using");
x.t("work","similarly");
x.t("work","//");
x.t("itself","gosu");
x.t("itself","using");
x.t("object\u2019s","final");
x.t("setupmyoutputstream","//do");
x.t("setupmyoutputstream","//");
x.t("call","method");
x.t("call","multiple");
x.t("call","code");
x.t("package","java.io");
x.t("rs.insertrow","reentrant");
x.t("stuff","approach");
x.t("immediately","returns");
x.t("management","method");
x.t("management","using");
x.t("clause","supports");
x.t("clause","uses");
x.t("clause","lock");
x.t("clause","contents");
x.t("clause","need");
x.t("clause","simplifies");
x.t("clause","complete");
x.t("clause","jdbc");
x.t("clause","follows");
x.t("clause","gosu");
x.t("clause","useful");
x.t("clause","declaration");
x.t("clause","expression");
x.t("clause","note");
x.t("following","example");
x.t("following","method");
x.t("following","precedence");
x.t("following","gosu");
x.t("following","code");
x.t("following","subtopics");
x.t("following","clean");
x.t("following","attributes");
x.t("either","gosu");
x.t("run","time");
x.t("manage","safe");
x.t("manage","using");
x.t("system","administration");
x.t("system","resources");
x.t("special","keyword");
x.t("using","imonitorlock");
x.t("using","try");
x.t("using","statement");
x.t("using","type");
x.t("using","new");
x.t("using","profiler");
x.t("using","locks");
x.t("using","gosu");
x.t("using","standard");
x.t("using","_lock1");
x.t("using","assignment_or_list_of_statements");
x.t("using","keyword");
x.t("using","java");
x.t("using","longer");
x.t("using","clauses");
x.t("using","expression");
x.t("using","output");
x.t("using","clause");
x.t("using","special");
x.t("using","using");
x.t("using","_lock");
x.t("using","var");
x.t("//","gosu");
x.t("//","something");
x.t("//","code");
x.t("//","main");
x.t("//","read");
x.t("//","profilertag");
x.t("//","stuff");
x.t("//","class");
x.t("//","insert");
x.t("closeable","objects");
x.t("closeable","reentrant");
x.t("closeable","object");
x.t("class","static");
x.t("class","gw.lang.ireentrant");
x.t("class","gw.api.profiler.profilertag");
x.t("class","reads");
x.t("class","adds");
x.t("class","variable");
x.t("class","itself");
x.t("class","using");
x.t("similarly","cast");
x.t("vari","ables");
x.t("error-prone","working");
x.t("catch","finally");
x.t("pass","multiple");
x.t("pass","value");
x.t("pass","two");
x.t("pass","using");
x.t("reader","new");
x.t("reader","jdbc");
x.t("reader","writer");
x.t("adding","imonitorlock");
x.t("assigning","variables");
x.t("assigning","variable");
x.t("assigning","vari");
x.t("returns","file");
x.t("returns","value");
x.t("across","contents");
x.t("without","throwing");
x.t("without","requiring");
x.t("java.sql","function");
x.t("definitions","var");
x.t("_lock","reentrantlock");
x.t("_lock","//");
x.t("var","rfc");
x.t("var","line");
x.t("var","new");
x.t("var","stmt");
x.t("var","lbuff");
x.t("var","text_val=eval");
x.t("var","writer");
x.t("var","keyword");
x.t("var","rs");
x.t("var","lfc");
x.t("var","variable_name");
x.t("var","reader");
x.t("var","_lock");
x.t("var","rbuff");
x.t("var","os");
x.t("insert","code");
x.t("including","variable");
x.t("including","concurrency");
x.t("effect","throw");
x.t("samplejdbc","con");
x.t("passing","multiple");
x.t("rbuff","bytebuffer.allocate");
x.t("rfc.read","(rbuff)");
x.t("os","setupmyoutputstream");
x.t("os.close","simplify");
x.t("disposes","stream");
x.t("disposes","object");
x.t("category","defined");
x.t("category","run");
x.t("even","implement");
x.t("even","error");
x.t("conditions","design");
x.t("object","example");
x.t("object","create");
x.t("object","imonitorlock");
x.t("object","uses");
x.t("object","satisfy");
x.t("object","already");
x.t("object","dispose");
x.t("object","lifecycle");
x.t("object","monitor");
x.t("object","note");
x.t("object","manage");
x.t("object","following");
x.t("object","category");
x.t("object","object");
x.t("resources","owns");
x.t("resources","fails");
x.t("resources","gosu");
x.t("resources","later-appearing");
x.t("resources","something");
x.t("resources","null");
x.t("resources","owned");
x.t("resources","using");
x.t("resources","clean");
x.t("clean","up");
x.t("attributes","implements");
x.t("contains","single");
x.t("contains","two");
x.t("streams","reader");
x.t("threads","ensure");
x.t("threads","prevent");
x.t("http://en.wikipedia.org/wiki/monitor_","(synchronization)");
x.t("content","passing");
x.t("item","comma");
x.t("item","feature");
x.t("regexp","string");
x.t("regexp","return");
}
