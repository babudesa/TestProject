function FileData_Pairs(x)
{
x.t("statements","rather");
x.t("statements","gosu");
x.t("statements","impermissible");
x.t("supports","compound");
x.t("supports","increment");
x.t("supports","operator");
x.t("example","10");
x.t("example","-10");
x.t("wise","left");
x.t("age","42");
x.t("claim","variable");
x.t("1010","binary");
x.t("1010","1111");
x.t("1010","bit");
x.t("1010","1101");
x.t("1010","decimal");
x.t("right","no");
x.t("right","side");
x.t("right","filling");
x.t("right","result");
x.t("right","shift");
x.t("rather","expressions");
x.t("lists","compound");
x.t("lists","variety");
x.t("bitwise","right");
x.t("bitwise","left");
x.t("bitwise","exclusive");
x.t("bitwise","operation");
x.t("bitwise","inclusive");
x.t("bitwise","value");
x.t("create","assign");
x.t("description","examples");
x.t("table","above");
x.t("variables","create");
x.t("variables","gosu");
x.t("variables","function");
x.t("variables","previous");
x.t("variables","consider");
x.t("10","1010");
x.t("10","/=");
x.t("10","13");
x.t("10","15");
x.t("10","increases");
x.t("10","3.3333");
x.t("10","contrast");
x.t("10","001010");
x.t("10","assigns");
x.t("10","i--");
x.t("10","01010");
x.t("10","print");
x.t("10","//");
x.t("10","&=");
x.t("10","decimal");
x.t("10","-=");
x.t("binary","1010");
x.t("binary","bitwise");
x.t("binary","101000");
x.t("binary","0101");
x.t("binary","1111");
x.t("binary","1000");
x.t("binary","00111111");
x.t("binary","code");
x.t("binary","11111111");
x.t("binary","10100");
x.t("binary","decimal");
x.t("binary","0111");
x.t("always","appear");
x.t("related","information");
x.t("action","assign");
x.t("action","following");
x.t("performs","bitwise");
x.t("11","performs");
x.t("11","--");
x.t("11","decimal");
x.t("preserves","sign");
x.t("unary","--");
x.t("unary","operator");
x.t("current","value");
x.t("uses","standard");
x.t("declared","int");
x.t("13","assigns");
x.t("13","1101");
x.t("13","-=");
x.t("/=","assigns");
x.t("/=","divides");
x.t("increment-by-one","operator");
x.t("text_val.select","link");
x.t("statement","10");
x.t("statement","syntax");
x.t("statement","expression");
x.t("statement","item");
x.t("support","form");
x.t("support","expressions");
x.t("support","forms");
x.t("type","mismatch");
x.t("type","specified");
x.t("type","no");
x.t("type","initialize");
x.t("type","first");
x.t("type","variable");
x.t("type","value");
x.t("type","declaration");
x.t("15","1111");
x.t("15","contrast");
x.t("15","assigns");
x.t("15","decimal");
x.t("time","gosu");
x.t("left","result");
x.t("left","shift");
x.t("compiler","errors");
x.t("however","variable");
x.t("however","following");
x.t("form","statements");
x.t("form","exists");
x.t("form","expression");
x.t("form","operator");
x.t("count","time");
x.t("increases","value");
x.t("original","number");
x.t("original","value");
x.t("original","negative");
x.t("automatically","sets");
x.t("link","directly");
x.t("mismatch","error");
x.t("left-hand","side");
x.t("30","/=");
x.t("usually","appropriate");
x.t("top","sign");
x.t("top","bit");
x.t("messsage","gosu");
x.t("assign","variables");
x.t("assign","value");
x.t("assignment","gosu");
x.t("assignment","operators");
x.t("assignment","variable");
x.t("assignment","compared");
x.t("assignment","operator");
x.t("3.3333","int");
x.t("unsupported","gosu");
x.t("unsupported","generates");
x.t("guide","statements");
x.t("results","incompatible");
x.t("initialized","value");
x.t("assume","variables");
x.t("simple","assignment");
x.t("right-hand","side");
x.t("101000","decimal");
x.t("bits","right");
x.t("11111101","decimal");
x.t("directly","page");
x.t("specified","variable");
x.t("specified","note");
x.t("declare","variable");
x.t("exclusive","operation");
x.t("exclusive","value");
x.t("requires","statement");
x.t("text_val.focus","text_val.select");
x.t("no","type");
x.t("no","filling");
x.t("no","fraction");
x.t("operation","original");
x.t("name","important");
x.t("gosu","supports");
x.t("gosu","variables");
x.t("gosu","uses");
x.t("gosu","support");
x.t("gosu","requires");
x.t("gosu","gosu");
x.t("gosu","operators");
x.t("gosu","reference");
x.t("gosu","invalid");
x.t("gosu","assigns");
x.t("gosu","valid");
x.t("typed","type");
x.t("typed","meaning");
x.t("initialize","null");
x.t("inclusive","operation");
x.t("inclusive","value");
x.t("age2","number");
x.t("perform","action");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("age3","number");
x.t("zero","unsigned");
x.t("exists","languages");
x.t("standard","programming");
x.t("compound","assignment");
x.t("compound","operator");
x.t("sign","bit");
x.t("sign","positive");
x.t("increment","decrement");
x.t("declarations","declarations");
x.t("declarations","style");
x.t("0101","decimal");
x.t("11110110","binary");
x.t("incompatible","value");
x.t("int","type");
x.t("int","values");
x.t("int","&=");
x.t("sets","high-order");
x.t("multiplies","value");
x.t("1111","binary");
x.t("1111","result");
x.t("1111","decimal");
x.t("understand","gosu");
x.t("earlier","gosu");
x.t("1000","decimal");
x.t("high-order","bit");
x.t("error","results");
x.t("error","occurred");
x.t("error","print");
x.t("strongly","typed");
x.t("contrast","example");
x.t("contrast","operator");
x.t("syntax","variable");
x.t("syntax","var");
x.t("operators","always");
x.t("operators","form");
x.t("operators","perform");
x.t("operators","--");
x.t("next","gosu");
x.t("first","non-");
x.t("non-","null");
x.t("means","following");
x.t("guidewire_selectall","var");
x.t("number","10");
x.t("number","13");
x.t("number","15");
x.t("number","-10");
x.t("number","42");
x.t("number","operator");
x.t("number","var");
x.t("number","negative");
x.t("side","10");
x.t("side","important");
x.t("side","operator");
x.t("function","guidewire_selectall");
x.t("001010","binary");
x.t("001010","bit");
x.t("1073741821","original");
x.t("1073741821","negative");
x.t("00111111","11111111");
x.t("expressions","table");
x.t("expressions","10");
x.t("expressions","means");
x.t("expressions","result");
x.t("words","valid");
x.t("cannot","increment");
x.t("left-side","statement");
x.t("assigned","syntax");
x.t("assigned","variable");
x.t("important","related");
x.t("important","gosu");
x.t("important","understand");
x.t("important","signed");
x.t("important","note");
x.t("important","operator");
x.t("reference","guide");
x.t("identifier","type-literal");
x.t("code","bitwise");
x.t("code","bit");
x.t("invalid","statements");
x.t("invalid","form");
x.t("languages","support");
x.t("right-side","statement");
x.t("assigns","value");
x.t("assigns","result");
x.t("adds","current");
x.t("thus","cannot");
x.t("previous","declared");
x.t("previous","value");
x.t("filling","top");
x.t("known","increment-by-one");
x.t("known","decrement-by-one");
x.t("appear","variable");
x.t("variable","type");
x.t("variable","left-hand");
x.t("variable","assignment");
x.t("variable","unsupported");
x.t("variable","initialized");
x.t("variable","name");
x.t("variable","strongly");
x.t("variable","words");
x.t("variable","known");
x.t("variable","variable");
x.t("variable","amount");
x.t("variable","value");
x.t("variable","considered");
x.t("variable","takes");
x.t("variable","expression");
x.t("variable","similarly");
x.t("variable","using");
x.t("variable","without");
x.t("20","contrast");
x.t("20","decimal");
x.t("-10","assigns");
x.t("-10","11111111");
x.t("occurred","messsage");
x.t("consider","type");
x.t("null","value");
x.t("zeros","shift");
x.t("compared","expressions");
x.t("subtracts","current");
x.t("amount","right-hand");
x.t("divides","value");
x.t("variety","compound");
x.t("value","1010");
x.t("value","right");
x.t("value","10");
x.t("value","action");
x.t("value","11");
x.t("value","13");
x.t("value","15");
x.t("value","30");
x.t("value","right-hand");
x.t("value","declare");
x.t("value","no");
x.t("value","compound");
x.t("value","int");
x.t("value","multiplies");
x.t("value","1073741821");
x.t("value","assigned");
x.t("value","right-side");
x.t("value","variable");
x.t("value","20");
x.t("value","40");
x.t("value","-3");
x.t("value","3.333333");
x.t("value","decimal");
x.t("value","without");
x.t("value","filled");
x.t("value","shift");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("declaration","type");
x.t("declaration","variable");
x.t("signed","values");
x.t("signed","integer");
x.t("--","unary");
x.t("--","operators");
x.t("--","important");
x.t("programming","assignment");
x.t("nal","value");
x.t("i--","assigns");
x.t("compilation","error");
x.t("forms","unsupported");
x.t("considered","strongly");
x.t("takes","type");
x.t("expression","gosu");
x.t("expression","thus");
x.t("expression","examples");
x.t("expression","mentioned");
x.t("expression","pass");
x.t("expression","var");
x.t("valid","10");
x.t("valid","invalid");
x.t("page","error");
x.t("strong","type");
x.t("impermissible","expression");
x.t("01010","binary");
x.t("01010","bit");
x.t("information","compound");
x.t("meaning","type");
x.t("examples","count");
x.t("examples","assume");
x.t("examples","simple");
x.t("examples","var");
x.t("result","binary");
x.t("result","variable");
x.t("result","signed");
x.t("result","expression");
x.t("bit","wise");
x.t("bit","right");
x.t("bit","left");
x.t("bit","original");
x.t("bit","previous");
x.t("bit","value");
x.t("bit","result");
x.t("appropriate","behavior");
x.t("type-literal","expression");
x.t("values","usually");
x.t("values","operator");
x.t("40","performs");
x.t("40","decimal");
x.t("-3","performs");
x.t("-3","decimal");
x.t("above","lists");
x.t("print","however");
x.t("print","important");
x.t("note","however");
x.t("note","operators");
x.t("42","var");
x.t("fraction","used");
x.t("origi","nal");
x.t("integer","values");
x.t("two","bits");
x.t("decrement-by-one","operator");
x.t("1101","binary");
x.t("1101","result");
x.t("positive","negative");
x.t("mentioned","earlier");
x.t("11111111","11111101");
x.t("11111111","11110110");
x.t("11111111","11111111");
x.t("following","lists");
x.t("following","gosu");
x.t("used","floating-pointing");
x.t("floating-pointing","type");
x.t("style","exists");
x.t("similarly","variable");
x.t("10100","decimal");
x.t("//","compilation");
x.t("using","variable");
x.t("3.333333","divides");
x.t("returns","remainder");
x.t("remainder","next");
x.t("&=","performs");
x.t("&=","13");
x.t("&=","15");
x.t("decimal","10");
x.t("decimal","performs");
x.t("decimal","11");
x.t("decimal","15");
x.t("decimal","contrast");
x.t("decimal","number");
x.t("decimal","1073741821");
x.t("decimal","20");
x.t("decimal","40");
x.t("decimal","-3");
x.t("pass","statement");
x.t("without","type");
x.t("without","strong");
x.t("operator","description");
x.t("operator","10");
x.t("operator","unary");
x.t("operator","automatically");
x.t("operator","assign");
x.t("operator","sets");
x.t("operator","next");
x.t("operator","important");
x.t("operator","adds");
x.t("operator","variable");
x.t("operator","subtracts");
x.t("operator","value");
x.t("operator","bit");
x.t("operator","returns");
x.t("operator","behavior");
x.t("behavior","contrast");
x.t("behavior","examples");
x.t("filled","zeros");
x.t("var","age");
x.t("var","claim");
x.t("var","age2");
x.t("var","text_val=eval");
x.t("var","age3");
x.t("var","identifier");
x.t("unsigned","integer");
x.t("-=","increases");
x.t("-=","assigns");
x.t("shift","1010");
x.t("shift","preserves");
x.t("shift","unary");
x.t("shift","original");
x.t("shift","zero");
x.t("shift","001010");
x.t("shift","01010");
x.t("shift","origi");
x.t("shift","two");
x.t("generates","compiler");
x.t("item","left-side");
x.t("0111","decimal");
x.t("negative","number");
x.t("negative","result");
x.t("negative","decimal");
x.t("decrement","declarations");
x.t("decrement","operator");
}
