function FileData_Pairs(x)
{
x.t("statements","do...while");
x.t("example","gosu");
x.t("example","expression");
x.t("possible","array");
x.t("within","find");
x.t("autofasttrack","true");
x.t("readily","accessible");
x.t("tables","think");
x.t("until","criteria");
x.t("later","example");
x.t("text_val.select","link");
x.t("basic","find");
x.t("basic","ways");
x.t("type","boolean");
x.t("type","legacy-only");
x.t("evaluates","quickly");
x.t("intelligence","database");
x.t("time","example");
x.t("time","real-world");
x.t("time","usage");
x.t("evaluate","exists");
x.t("initially","load");
x.t("cached","otherwise");
x.t("however","array");
x.t("guidewire","database");
x.t("apis","details");
x.t("high-level","database");
x.t("entities","gosu");
x.t("link","directly");
x.t("element","exists");
x.t("element","matches");
x.t("do...while","rest");
x.t("new","code");
x.t("details","exists");
x.t("details","query");
x.t("think","find");
x.t("==","autofasttrack");
x.t("==","null");
x.t("includes","entities");
x.t("messsage","gosu");
x.t("list","includes");
x.t("list","generate");
x.t("optimize","database");
x.t("group","claim.exposures.assignedgroup");
x.t("testing","expressions");
x.t("guide","gosu");
x.t("simple","looping");
x.t("overview","exists");
x.t("large","array");
x.t("large","task");
x.t("false","no");
x.t("false","exists");
x.t("existence","element");
x.t("existence","testing");
x.t("directly","gosu");
x.t("directly","page");
x.t("processor","time");
x.t("true","false");
x.t("true","indicate");
x.t("true","actually");
x.t("desired","value");
x.t("desired","expression");
x.t("text_val.focus","text_val.select");
x.t("outside","find");
x.t("no","desired");
x.t("gosu","statements");
x.t("gosu","evaluate");
x.t("gosu","initially");
x.t("gosu","optimizations");
x.t("gosu","operators");
x.t("gosu","iterates");
x.t("gosu","reference");
x.t("gosu","optimizes");
x.t("tests","existence");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("exists","[var]");
x.t("exists","expressions");
x.t("exists","expression");
x.t("exists","clause");
x.t("exists","used");
x.t("exists","returns");
x.t("exists","var");
x.t("boolean","expression");
x.t("find","queries");
x.t("find","expressions");
x.t("find","expression");
x.t("[var]","identifier");
x.t("indicate","success");
x.t("rest","section");
x.t("optimizations","compile");
x.t("array","readily");
x.t("array","until");
x.t("array","list");
x.t("array","large");
x.t("array","index");
x.t("array","database");
x.t("array","elements");
x.t("rely","exists");
x.t("legacy","style");
x.t("error","occurred");
x.t("queries","basic");
x.t("queries","gosu");
x.t("queries","array");
x.t("queries","rely");
x.t("queries","legacy");
x.t("operators","expressions");
x.t("syntax","exists");
x.t("feature","databases");
x.t("databases","query");
x.t("guidewire_selectall","var");
x.t("iterates","possible");
x.t("iterates","array");
x.t("iterates","series");
x.t("iterates","across");
x.t("expression1","index");
x.t("function","guidewire_selectall");
x.t("resource-intensive","work");
x.t("expression2","index");
x.t("expressions","high-level");
x.t("expressions","details");
x.t("expressions","existence");
x.t("expressions","outside");
x.t("expressions","exists");
x.t("expressions","function");
x.t("expressions","important");
x.t("expressions","general");
x.t("expressions","alternative");
x.t("ways","exists");
x.t("looping","gosu");
x.t("legacy-only","find");
x.t("push","resource-intensive");
x.t("language","embedded");
x.t("instead","gosu");
x.t("index","identifier");
x.t("index","variable");
x.t("index","values");
x.t("section","focuses");
x.t("compile","time");
x.t("real-world","time");
x.t("important","find");
x.t("accessible","array");
x.t("reference","guide");
x.t("code","query");
x.t("languages","push");
x.t("task","processor");
x.t("identifier","expression1");
x.t("identifier","iterates");
x.t("identifier","expression2");
x.t("optimizes","database");
x.t("return","desired");
x.t("matches","specific");
x.t("database","tables");
x.t("database","new");
x.t("database","queries");
x.t("database","syntax");
x.t("database","query");
x.t("database","joins");
x.t("database","querying");
x.t("memory","expression");
x.t("embedded","directly");
x.t("quickly","however");
x.t("variable","identifier");
x.t("occurred","messsage");
x.t("consider","expressions");
x.t("null","true");
x.t("focuses","type");
x.t("main","two");
x.t("usage","within");
x.t("value","later");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("specific","criteria");
x.t("generate","consider");
x.t("builder","apis");
x.t("builder","overview");
x.t("builder","query");
x.t("actually","save");
x.t("expression","evaluates");
x.t("expression","gosu");
x.t("expression","exists");
x.t("expression","find");
x.t("expression","iterates");
x.t("expression","result");
x.t("expression","using");
x.t("expression","returns");
x.t("terminates","array");
x.t("page","error");
x.t("query","language");
x.t("query","languages");
x.t("query","database");
x.t("query","builder");
x.t("query","itself");
x.t("data","two");
x.t("met","terminates");
x.t("claim.exposures","==");
x.t("appropriate","database");
x.t("result","type");
x.t("result","exists");
x.t("save","return");
x.t("values","result");
x.t("two","basic");
x.t("two","database");
x.t("otherwise","memory");
x.t("joins","feature");
x.t("joins","appropriate");
x.t("work","intelligence");
x.t("itself","instead");
x.t("claim.exposures.assignedgroup","group.grouptype");
x.t("querying","guidewire");
x.t("querying","data");
x.t("elements","cached");
x.t("elements","tests");
x.t("style","querying");
x.t("clause","optimize");
x.t("clause","met");
x.t("used","outside");
x.t("general","outside");
x.t("using","database");
x.t("group.grouptype","==");
x.t("series","elements");
x.t("criteria","main");
x.t("criteria","clause");
x.t("across","array");
x.t("alternative","simple");
x.t("returns","false");
x.t("returns","true");
x.t("load","large");
x.t("var","group");
x.t("var","text_val=eval");
x.t("var","claim.exposures");
x.t("success","element");
}
