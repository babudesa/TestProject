function FileData_Pairs(x)
{
x.t("expression\u2019s","type");
x.t("example","shows");
x.t("example","uses");
x.t("example","type");
x.t("example","common");
x.t("example","illustrates");
x.t("example","prints");
x.t("example","run");
x.t("example","following");
x.t("example","var");
x.t("particularly","valuable");
x.t("statements","statements");
x.t("statements","example");
x.t("statements","next");
x.t("statements","keyword");
x.t("statements","compile");
x.t("statements","switch");
x.t("statements","similar");
x.t("statements","information");
x.t("statements","assigning");
x.t("looks","following");
x.t(".length","//");
x.t("unterminated","break");
x.t("determined","compile");
x.t("method","called");
x.t("method","call");
x.t("downcasting","method");
x.t("downcasting","uses");
x.t("downcasting","property");
x.t("downcasting","typeis");
x.t("downcasting","write");
x.t("downcasting","works");
x.t("downcasting","previous");
x.t("downcasting","happens");
x.t("downcasting","following");
x.t("downcasting","object");
x.t("else","statements");
x.t("properties","example");
x.t("just","single");
x.t("version","type");
x.t("pattern","feature");
x.t("within","statement");
x.t("within","block");
x.t("within","gosu");
x.t("cast","variable");
x.t("cast","var");
x.t("static","type");
x.t("always","boolean");
x.t("performs","run-time");
x.t("void","however");
x.t("void","java.lang.boolean");
x.t("improve","readability");
x.t("easy-to-read","concise");
x.t("situations","cancel");
x.t("uses","java.util.date");
x.t("uses","typeis");
x.t("declared","typeis");
x.t("declared","object");
x.t("shows","variable");
x.t("conditional","ternary");
x.t("conditional","expression");
x.t("text_val.select","link");
x.t("isassignablefrom","exists");
x.t("statement","example");
x.t("statement","downcasting");
x.t("statement","gone");
x.t("statement","need");
x.t("statement","allows");
x.t("statement","string");
x.t("statement","simply");
x.t("statement","end");
x.t("statement","removing");
x.t("statement","case");
x.t("basic","type");
x.t("type","example");
x.t("type","particularly");
x.t("type","void");
x.t("type","type");
x.t("type","objects");
x.t("type","statictypeof");
x.t("type","java.lang.string");
x.t("type","specified");
x.t("type","test");
x.t("type","name");
x.t("type","checking");
x.t("type","typeis");
x.t("type","string");
x.t("type","literal");
x.t("type","subtypes");
x.t("type","expressions");
x.t("type","switch");
x.t("type","variable");
x.t("type","typeof");
x.t("type","reverts");
x.t("type","specifically");
x.t("type","subtype");
x.t("type","result");
x.t("type","switched");
x.t("type","called");
x.t("type","cases");
x.t("type","itself");
x.t("type","system");
x.t("type","returns");
x.t("type","object");
x.t("vary","run");
x.t("evaluates","parameterized");
x.t("java.util.date","var");
x.t("change","type");
x.t("time","example");
x.t("time","type");
x.t("time","property");
x.t("time","contrast");
x.t("time","value");
x.t("time","expression");
x.t("time","contains");
x.t("evaluate","specific");
x.t("left","typeis");
x.t("however","no");
x.t("however","gosu");
x.t("however","compile-time");
x.t("however","run");
x.t("neat","switch");
x.t("sections","using");
x.t("execution","fall");
x.t("automatically","downcasts");
x.t("original","type");
x.t("assumes","subtype_name");
x.t("property","access");
x.t("property","string");
x.t("property","break");
x.t("gone","first");
x.t("link","directly");
x.t("single","type");
x.t("==","object");
x.t("want","information");
x.t("access","type");
x.t("access","fails");
x.t("advanced","manipulation");
x.t("objects","types");
x.t("objects","including");
x.t("statictypeof","example");
x.t("statictypeof","prints");
x.t("statictypeof","keyword");
x.t("statictypeof","expression");
x.t("statictypeof","compile-time");
x.t("block","code");
x.t("fall","next");
x.t("messsage","gosu");
x.t("need","check");
x.t("need","casting");
x.t("need","additional");
x.t("assignable","advanced");
x.t("around","variable");
x.t("around","problem");
x.t("ternary","conditional");
x.t("ternary","expressions");
x.t("beginning","switch");
x.t("guide","type");
x.t("check","object");
x.t("simple","equality");
x.t("applies","types");
x.t("applies","switch");
x.t("remove","first");
x.t("false","string");
x.t("false","similarly");
x.t("false","object");
x.t("java.lang.string","advanced");
x.t("java.lang.string","java.lang.object");
x.t("reflection","automatic");
x.t("reflection","even");
x.t("fails","without");
x.t("remember","compile");
x.t("directly","page");
x.t("specified","type");
x.t("true","auto");
x.t("true","first");
x.t("true","person");
x.t("true","hello");
x.t("true","clause");
x.t("test","against");
x.t("test","value");
x.t("text_val.focus","text_val.select");
x.t("name","typing");
x.t("run-time","check");
x.t("common","pattern");
x.t("x.charat","//");
x.t("path","expressions");
x.t("path","checked");
x.t("reaching","end");
x.t("no","downcasting");
x.t("no","time");
x.t("gosu","statements");
x.t("gosu","uses");
x.t("gosu","automatically");
x.t("gosu","allows");
x.t("gosu","structures");
x.t("gosu","reference");
x.t("gosu","code");
x.t("gosu","runs");
x.t("gosu","implicitly");
x.t("gosu","confirms");
x.t("gosu","run");
x.t("type_name","example");
x.t("type_name","variable_name");
x.t("corresponds","true");
x.t("cancel","typeis");
x.t("part","expression");
x.t("part","information");
x.t("part","entity");
x.t("checking","basic");
x.t("checking","gosu");
x.t("checking","function");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("boolean","assignable");
x.t("boolean","typeis");
x.t("boolean","null");
x.t("illustrates","difference");
x.t("exists","types");
x.t("x.length","downcasting");
x.t("x.length","important");
x.t("methods","properties");
x.t("manipulation","type");
x.t(".time","//");
x.t("typeis","type");
x.t("typeis","string");
x.t("typeis","syntax");
x.t("typeis","number");
x.t("typeis","person");
x.t("typeis","instead");
x.t("typeis","keyword");
x.t("typeis","typeof");
x.t("typeis","expression");
x.t("typeis","examples");
x.t("typeis","inference");
x.t("typeis","subtype_name");
x.t("typeis","company");
x.t("typeis","operator");
x.t("typeis","object");
x.t("allows","execution");
x.t("allows","remove");
x.t("string",".length");
x.t("string","within");
x.t("string","static");
x.t("string","evaluates");
x.t("string","true");
x.t("string","gosu");
x.t("string","x.length");
x.t("string","strlen");
x.t("string","means");
x.t("string","typeof");
x.t("string","value");
x.t("string","subtype");
x.t("string","expression");
x.t("string","case");
x.t("string","print");
x.t("string","following");
x.t("string","object");
x.t("write","easy-to-read");
x.t("write","gosu");
x.t("prints","output");
x.t("structures","within");
x.t("extent","scope");
x.t("auto","typeis");
x.t("auto","string");
x.t("unexpected","conditions");
x.t("error","compile");
x.t("error","occurred");
x.t("error","relies");
x.t("contrast","typeof");
x.t("contrast","following");
x.t("downcasts","typeis");
x.t("equivalent","unnecessary");
x.t("whatever","compile-time");
x.t("syntax","typeof");
x.t("syntax","object");
x.t("automatic","downcasting");
x.t("logical","expression");
x.t("next","gosu");
x.t("next","case");
x.t("feature","looks");
x.t("strlen","x.length");
x.t("strlen","typeis");
x.t("strlen","string");
x.t("means","need");
x.t("concise","gosu");
x.t("first","part");
x.t("first","section");
x.t("first","break");
x.t("guidewire_selectall","var");
x.t("number","true");
x.t("number","real-world");
x.t("number","typeof");
x.t("literal","typeof");
x.t("function","guidewire_selectall");
x.t("better","typeis");
x.t("length","property");
x.t("casts","automatic");
x.t("cannot","fully");
x.t("may","evaluate");
x.t("person","true");
x.t("person","typeis");
x.t("against","type");
x.t("against","specific");
x.t("subtypes","just");
x.t("different","type");
x.t("different","cases");
x.t("expressions","automatic");
x.t("expressions","several");
x.t("expressions","subtype");
x.t("words","type");
x.t("words","end");
x.t("words","following");
x.t("share","series");
x.t("instead","typeof");
x.t("programmatically","statictypeof");
x.t("accessing","type-specific");
x.t("compile","time");
x.t("compile","error");
x.t("real-world","code");
x.t("keyword","performs");
x.t("keyword","logical");
x.t("keyword","accessing");
x.t("keyword","switch");
x.t("keyword","result");
x.t("keyword","symbol");
x.t("keyword","returns");
x.t("types","statements");
x.t("types","type");
x.t("types","objects");
x.t("types","types");
x.t("types","using");
x.t("types","even");
x.t("casting","type");
x.t("casting","around");
x.t("casting","case");
x.t("casting","break");
x.t("casting","//");
x.t("section","unterminated");
x.t("section","change");
x.t("section","however");
x.t("section","automatic");
x.t("section","next");
x.t("section","words");
x.t("section","whose");
x.t("section","two");
x.t("important","note");
x.t("switch","statements");
x.t("switch","statement");
x.t("switch","typeof");
x.t("works","item");
x.t("scope","inference");
x.t("simply","cast");
x.t("reference","guide");
x.t("code","example");
x.t("code","gosu");
x.t("code","equivalent");
x.t("code","automatic");
x.t("code","compile");
x.t("code","bounded");
x.t("code","valid");
x.t("code","typically");
x.t("code","break");
x.t("code","unnecessary");
x.t("end","statement");
x.t("end","ternary");
x.t("end","extent");
x.t("end","switch");
x.t("end","expression");
x.t("fully","determined");
x.t("exact","type");
x.t("affect","null");
x.t("bounded","statement");
x.t("least","within");
x.t("previous","case");
x.t("variable","declared");
x.t("variable","beginning");
x.t("variable","boolean");
x.t("variable","string");
x.t("variable","words");
x.t("variable","keyword");
x.t("variable","checked");
x.t("whose","type");
x.t("whose","break");
x.t("considers","variable\u2019s");
x.t("variable\u2019s","type");
x.t("occurred","messsage");
x.t("typeof","example");
x.t("typeof","improve");
x.t("typeof","applies");
x.t("typeof","string");
x.t("typeof","auto");
x.t("typeof","syntax");
x.t("typeof","number");
x.t("typeof","keyword");
x.t("typeof","typeof");
x.t("typeof","expression");
x.t("typeof","hello");
x.t("typeof","examples");
x.t("typeof","case");
x.t("typeof","print");
x.t("typeof","42");
x.t("typeof","operator");
x.t("typeof","object");
x.t("typing","type");
x.t("null","type");
x.t("null","values");
x.t("null","print");
x.t("nice","var");
x.t("reverts","whatever");
x.t("reverts","compile-time");
x.t("reverts","object");
x.t("specifically","type");
x.t("negated","keyword");
x.t("value","simple");
x.t("value","part");
x.t("value","variable");
x.t("value","null");
x.t("value","symbol");
x.t("similar","gosu");
x.t("additional","casting");
x.t("type-specific","methods");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("specific","type");
x.t("specific","subtype");
x.t("several","situations");
x.t("expression","vary");
x.t("expression","type");
x.t("expression","true");
x.t("expression","corresponds");
x.t("expression","typeis");
x.t("expression","cannot");
x.t("expression","may");
x.t("expression","end");
x.t("expression","typeof");
x.t("expression","negated");
x.t("expression","result");
x.t("expression","returns");
x.t("subtype","example");
x.t("subtype","original");
x.t("subtype","gosu");
x.t("subtype","type_name");
x.t("subtype","string");
x.t("subtype","least");
x.t("subtype","variable");
x.t("subtype","object");
x.t("hello","==");
x.t("hello","typeis");
x.t("hello","print");
x.t("hello","var");
x.t("java.lang.boolean","run");
x.t("valid","gosu");
x.t("valid","case");
x.t("valid","var");
x.t("runs","print");
x.t("page","error");
x.t("compile-time","type");
x.t("output","void");
x.t("output","java.lang.string");
x.t("x.time","//");
x.t("information","else");
x.t("information","conditional");
x.t("information","type");
x.t("information","switch");
x.t("result","always");
x.t("result","statictypeof");
x.t("result","typeof");
x.t("result","42");
x.t("examples","expression");
x.t("happens","part");
x.t("happens","following");
x.t("inference","reaching");
x.t("inference","appropriate");
x.t("appropriate","words");
x.t("removing","break");
x.t("switched","object");
x.t("values","unexpected");
x.t("implicitly","considers");
x.t("subtype_name","subtype");
x.t("subtype_name","//");
x.t("subtype_name","without");
x.t("downcasted","string");
x.t("case","sections");
x.t("case","string");
x.t("case","section");
x.t("case","date");
x.t("print","statement");
x.t("print","statictypeof");
x.t("print","x.charat");
x.t("print","typeof");
x.t("print","x.time");
x.t("print","date");
x.t("called","isassignablefrom");
x.t("called","string");
x.t("confirms","object");
x.t("problem","remember");
x.t("42","typeis");
x.t("42","number");
x.t("readability","gosu");
x.t("variable_name","type_name");
x.t("variable_name","typeis");
x.t("variable_name","subtype_name");
x.t("note","length");
x.t("date",".time");
x.t("date","print");
x.t("two","different");
x.t("typically","need");
x.t("cases","better");
x.t("cases","share");
x.t("itself","access");
x.t("object\u2019s","type");
x.t("java.lang.object","variable");
x.t("work","around");
x.t("valuable","statements");
x.t("call","fails");
x.t("relies","downcasting");
x.t("system","basic");
x.t("system","behavior");
x.t("run","statements");
x.t("run","time");
x.t("following","example");
x.t("following","gosu");
x.t("following","types");
x.t("following","code");
x.t("following","expression");
x.t("following","case");
x.t("following","var");
x.t("break","statement");
x.t("break","however");
x.t("break","ternary");
x.t("break","case");
x.t("break","work");
x.t("entity","path");
x.t("clause","assigning");
x.t("similarly","typeof");
x.t("using","reflection");
x.t("using","automatic");
x.t("//","assumes");
x.t("//","length");
x.t("//","compile");
x.t("//","valid");
x.t("//","variable_name");
x.t("//","without");
x.t("symbol","variable");
x.t("symbol","entity");
x.t("compare","expression\u2019s");
x.t("company","false");
x.t("returns","false");
x.t("returns","true");
x.t("returns","exact");
x.t("assigning","value");
x.t("series","gosu");
x.t("operator","test");
x.t("operator","object\u2019s");
x.t("operator","compare");
x.t("without","automatic");
x.t("without","casting");
x.t("unnecessary","cast");
x.t("unnecessary","casts");
x.t("behavior","section");
x.t("var","text_val=eval");
x.t("var","boolean");
x.t("var","strlen");
x.t("var","typeof");
x.t("var","hello");
x.t("var","variable_name");
x.t("var","object");
x.t("including","method");
x.t("parameterized","version");
x.t("equality","type");
x.t("conditions","var");
x.t("even","applies");
x.t("even","types");
x.t("object","downcasting");
x.t("object","however");
x.t("object","neat");
x.t("object","want");
x.t("object","no");
x.t("object","typeis");
x.t("object","string");
x.t("object","write");
x.t("object","contrast");
x.t("object","against");
x.t("object","different");
x.t("object","programmatically");
x.t("object","whose");
x.t("object","nice");
x.t("object","reverts");
x.t("object","specific");
x.t("object","subtype");
x.t("object","hello");
x.t("object","downcasted");
x.t("object","following");
x.t("object","using");
x.t("object","operator");
x.t("difference","affect");
x.t("difference","var");
x.t("contains","object");
x.t("item","left");
x.t("checked","typeis");
}
