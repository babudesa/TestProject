function FileData_Pairs(x)
{
x.t("supports","following");
x.t("example","guidewire");
x.t("example","extra");
x.t("example","logical");
x.t("example","causes");
x.t("example","following");
x.t("example","operator");
x.t("possible","short-circuit");
x.t("illustrate","(not)");
x.t("right","evaluates");
x.t("right","tested");
x.t("cast","exception");
x.t("preferred","example");
x.t("(true/true)","true");
x.t("always","evaluates");
x.t("always","boolean");
x.t("negation","logical");
x.t("short-circuit","evaluation");
x.t("uses","either");
x.t("uses","operator");
x.t("asked","typeis");
x.t("text_val.select","link");
x.t("evaluates","false");
x.t("evaluates","true");
x.t("evaluates","any-expression");
x.t("evaluates","expression");
x.t("type","type");
x.t("type","checking");
x.t("type","information");
x.t("type","policyline.bopliabilitycov.limit");
x.t("type","convertible");
x.t("basic","type");
x.t("evaluate","true");
x.t("evaluate","expression");
x.t("explicitly","either");
x.t("left","right");
x.t("associates","operator");
x.t("however","include");
x.t("regardless","actual");
x.t("coerces","false");
x.t("simpler","exactly");
x.t("guidewire","recommends");
x.t("guidewire","gosu");
x.t("link","directly");
x.t("items","explicitly");
x.t("differences","boolean");
x.t("differences","coercion");
x.t("==","policyline.policyperiod.mostrecentpriorboundrevision.bopline.bopliabilitycov.limit");
x.t("messsage","gosu");
x.t("operands","boolean");
x.t("(false)","compatible");
x.t("need","operator");
x.t("during","comparison");
x.t("recommends","following");
x.t("guide","gosu");
x.t("false","evaluate");
x.t("false","however");
x.t("false","==");
x.t("false","false");
x.t("false","true");
x.t("false","gosu");
x.t("false","(false/true)");
x.t("false","logical");
x.t("false","often");
x.t("false","any-expression");
x.t("false","(false/false)");
x.t("false","used");
x.t("false","following");
x.t("directly","page");
x.t("true","example");
x.t("true","false");
x.t("true","gosu");
x.t("true","(true/false)");
x.t("true","(false/true)");
x.t("true","1000");
x.t("true","coerce");
x.t("true","null");
x.t("true","seen");
x.t("true","any-expression");
x.t("true","(false/false)");
x.t("true","used");
x.t("true","following");
x.t("desired","comparison");
x.t("writing","code");
x.t("test","type");
x.t("text_val.focus","text_val.select");
x.t("no","actual");
x.t("gosu","supports");
x.t("gosu","uses");
x.t("gosu","associates");
x.t("gosu","operators");
x.t("gosu","logical");
x.t("gosu","reference");
x.t("gosu","determins");
x.t("gosu","runs");
x.t("follows","boolean");
x.t("exactly","asked");
x.t("comparison","follows");
x.t("comparison","associate");
x.t("limit","better");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("boolean","guidewire");
x.t("boolean","(false)");
x.t("boolean","boolean");
x.t("boolean","operators");
x.t("boolean","syntax");
x.t("boolean","types");
x.t("boolean","data");
x.t("boolean","result");
x.t("boolean","values");
x.t("compatible","limit");
x.t("standard","logical");
x.t("indicate","logical");
x.t("operand","boolean");
x.t("final","code");
x.t("typeis","test");
x.t("typeis","expressions");
x.t("string","value");
x.t("string","values");
x.t("(true/false)","false");
x.t("(true/false)","true");
x.t("(false/true)","false");
x.t("(false/true)","true");
x.t("extra","parentheses");
x.t("exclamation","point");
x.t("1000","false");
x.t("error","occurred");
x.t("error","runs");
x.t("point","character");
x.t("policyline.policyperiod.mostrecentpriorboundrevision.bopline.bopliabilitycov.limit","return");
x.t("policyline.policyperiod.mostrecentpriorboundrevision.bopline.bopliabilitycov.limit","causes");
x.t("logical","negation");
x.t("logical","gosu");
x.t("logical","indicate");
x.t("logical","operators");
x.t("logical","logical");
x.t("logical","expressions");
x.t("logical","expression");
x.t("logical","operator");
x.t("operators","evaluate");
x.t("operators","string");
x.t("operators","number");
x.t("operators","expressions");
x.t("operators","important");
x.t("operators","value");
x.t("syntax","examples");
x.t("bang","operand");
x.t("somewhat","simpler");
x.t("guidewire_selectall","var");
x.t("number","coerces");
x.t("number","values");
x.t("function","guidewire_selectall");
x.t("(not)","operator");
x.t("essence","expression");
x.t("better","example");
x.t("expressions","gosu");
x.t("expressions","standard");
x.t("expressions","logical");
x.t("expressions","function");
x.t("expressions","include");
x.t("expressions","evaluated");
x.t("coerce","false");
x.t("coerce","true");
x.t("types","differences");
x.t("keyword","exclamation");
x.t("important","differences");
x.t("important","important");
x.t("reference","guide");
x.t("determins","expression");
x.t("code","type");
x.t("code","expression");
x.t("often","logical");
x.t("return","true");
x.t("actual","need");
x.t("actual","value");
x.t("variable","right");
x.t("parentheses","force");
x.t("occurred","messsage");
x.t("null","coerces");
x.t("null","true");
x.t("rules","true");
x.t("seen","no");
x.t("include","items");
x.t("include","following");
x.t("value","true");
x.t("value","string");
x.t("value","null");
x.t("any-expression","always");
x.t("any-expression","expression");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("(false/false)","false");
x.t("exception","during");
x.t("force","desired");
x.t("expression","evaluates");
x.t("expression","operands");
x.t("expression","true");
x.t("expression","final");
x.t("expression","somewhat");
x.t("expression","essence");
x.t("expression","becomes");
x.t("expression","result");
x.t("expression","either");
x.t("expression","terms");
x.t("expression","evaluated");
x.t("evaluation","using");
x.t("runs","evaluates");
x.t("runs","gosu");
x.t("page","error");
x.t("tested","possible");
x.t("data","type");
x.t("becomes","false");
x.t("information","basic");
x.t("information","object");
x.t("result","(true/true)");
x.t("result","always");
x.t("result","true");
x.t("examples","illustrate");
x.t("examples","expression");
x.t("policyline.bopliabilitycov.limit","==");
x.t("policyline.bopliabilitycov.limit","policyline.policyperiod.mostrecentpriorboundrevision.bopline.bopliabilitycov.limit");
x.t("values","true");
x.t("values","value");
x.t("values","positive");
x.t("convertible","boolean");
x.t("character","called");
x.t("called","bang");
x.t("positive","negative");
x.t("numbers","regardless");
x.t("causes","error");
x.t("causes","class");
x.t("associate","operator");
x.t("either","true");
x.t("either","indicate");
x.t("either","keyword");
x.t("following","writing");
x.t("following","logical");
x.t("following","number");
x.t("following","better");
x.t("following","rules");
x.t("following","expression");
x.t("following","examples");
x.t("following","bad");
x.t("used","boolean");
x.t("coercion","boolean");
x.t("using","following");
x.t("class","cast");
x.t("terms","boolean");
x.t("evaluated","left");
x.t("evaluated","false");
x.t("evaluated","logical");
x.t("bad","example");
x.t("operator","preferred");
x.t("operator","typeis");
x.t("operator","variable");
x.t("operator","expression");
x.t("operator","policyline.bopliabilitycov.limit");
x.t("operator","bad");
x.t("var","text_val=eval");
x.t("negative","numbers");
x.t("object","information");
}
