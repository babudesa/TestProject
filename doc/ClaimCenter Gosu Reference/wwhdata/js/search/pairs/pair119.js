function FileData_Pairs(x)
{
x.t("supports","programming");
x.t("included","annotation");
x.t("interfaces","ipremethodinterceptor");
x.t("example","suppose");
x.t("example","output");
x.t("example","package");
x.t("debugging","notification");
x.t("debugging","information");
x.t("passed","method");
x.t("method","example");
x.t("method","defines");
x.t("method","within");
x.t("method","arguments");
x.t("method","intercept");
x.t("method","calls");
x.t("method","name");
x.t("method","pre-method");
x.t("method","code");
x.t("method","post-method");
x.t("method","return");
x.t("method","completes");
x.t("method","takes");
x.t("method","captured");
x.t("method","called");
x.t("method","note");
x.t("method","call");
x.t("parameter","string");
x.t("else","return");
x.t("defines","wrapper");
x.t("defines","special");
x.t("com.mycompany.submarine","var");
x.t("2008","method");
x.t("2008","returned");
x.t("annotation","method");
x.t("annotation","new");
x.t("annotation","indicates");
x.t("annotation","definition");
x.t("annotation","methods");
x.t("annotation","takes");
x.t("annotation","class");
x.t("implement","interfaces");
x.t("implement","interceptors");
x.t("implement","following");
x.t("within","interceptor");
x.t("nothing","note");
x.t("onaftermethod","method");
x.t("onaftermethod","instance");
x.t("create","types");
x.t("effects","thoroughly");
x.t("once","implement");
x.t("once","intercepted");
x.t("onbeforemethod","method");
x.t("onbeforemethod","instance");
x.t("onbeforemethod","always");
x.t("instance","gosu");
x.t("instance","acted");
x.t("instance",".name");
x.t("instance","value");
x.t("instance","object");
x.t("always","null");
x.t("wrapper","apply");
x.t("wrapper","called");
x.t("cross","cut");
x.t("arguments","included");
x.t("arguments","instance");
x.t("arguments","args.each");
x.t("arguments","intercepted");
x.t("arguments","true");
x.t("arguments","-5");
x.t("intercept","certain");
x.t("intercept","calling");
x.t("intercept","class");
x.t("methodname","string");
x.t("methodname","print");
x.t("apply","annotation");
x.t("performs","final");
x.t("execute","method");
x.t("cut","aspect");
x.t("aspect","method");
x.t("aspect","feature");
x.t("args.each","arg");
x.t("uses","com.mycompany.submarine");
x.t("text_val.select","link");
x.t("interface","new");
x.t("s.verticalchange","-5");
x.t("basic","debugging");
x.t("change","distance");
x.t("change","-5");
x.t("calls","once");
x.t("calls","pre-method");
x.t("calls","function");
x.t("calls","class\u2019s");
x.t("calls","including");
x.t("public","function");
x.t("timestamps","printed");
x.t("timestamps","using");
x.t("down","mon");
x.t("down","var");
x.t("down","(moveperiscopeup)");
x.t("periscopeaction","moveperiscopeup");
x.t("however","careful");
x.t("link","directly");
x.t("new","annotation");
x.t("new","submarine");
x.t("new","class");
x.t("want","intercept");
x.t("certain","method");
x.t("objects","method");
x.t("passes","arguments");
x.t("chain","override");
x.t("messsage","gosu");
x.t("indicates","class");
x.t("list","method");
x.t("intercepts","methods");
x.t("intercepts","code");
x.t("add","code");
x.t("guide","annotations");
x.t("wrap","calls");
x.t("intercepted","method");
x.t("intercepted","gosu");
x.t("interceptor","intercept");
x.t("interceptor","design");
x.t("interceptor","calling");
x.t("interceptor","code");
x.t("interceptor","optionally");
x.t("interceptor","class");
x.t("directly","page");
x.t("ipremethodinterceptor","implement");
x.t("ipremethodinterceptor","ipostmethodinterceptor");
x.t("specified","ipremethodinterceptor");
x.t("specified","ipostmethodinterceptor");
x.t("test","effects");
x.t("test","code");
x.t("test","inter");
x.t("true","periscope");
x.t("true","code");
x.t("potential","performance");
x.t("text_val.focus","text_val.select");
x.t("definition","addition");
x.t("name","string");
x.t("name","types");
x.t("s.periscopeaction","true");
x.t("gosu","supports");
x.t("gosu","calls");
x.t("gosu","intercepts");
x.t("gosu","feature");
x.t("gosu","reference");
x.t("gosu","interceptors");
x.t("gosu","executes");
x.t("gosu","class");
x.t("gosu","tester");
x.t("constructor","case");
x.t("constructor","special");
x.t("moveperiscopeup","boolean");
x.t("moveperiscopeup","up");
x.t("periscope","moveperiscopeup");
x.t("periscope","up");
x.t("performance","issues");
x.t("performance","carefully");
x.t("performance","implications");
x.t("distance","going");
x.t("distance","up");
x.t("distance","int");
x.t("distance","print");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("methods","method");
x.t("methods","new");
x.t("methods","gosu");
x.t("methods","constructors");
x.t("datetime.currentdate.tostring","print");
x.t("going","down");
x.t("going","distance");
x.t("boolean","string");
x.t("pdt","2008");
x.t("parameters","passed");
x.t("parameters","method");
x.t("pre-method","interceptor");
x.t("pre-method","post-method");
x.t("acted","upon");
x.t("standard","basic");
x.t("up","down");
x.t("up","mon");
x.t("21:03:29","pdt");
x.t("allows","wrap");
x.t("arg","public");
x.t("arg","print");
x.t("vertical","change");
x.t("pasting","following");
x.t("final","interceptor");
x.t("string","list");
x.t("string","printed");
x.t("string","args");
x.t("string","print");
x.t("int","arguments");
x.t("int","distance");
x.t("int","return");
x.t("apr","07");
x.t("addition","implementing");
x.t("prints","standard");
x.t("error","occurred");
x.t("logic","defined");
x.t("sometimes","called");
x.t("com.mycompany","//");
x.t("com.mycompany","class");
x.t("mon","apr");
x.t("suppose","want");
x.t("feature","sometimes");
x.t("feature","define");
x.t("feature","called");
x.t("issues","interceptor");
x.t("issues","anticipate");
x.t("guidewire_selectall","var");
x.t("constructors","additional");
x.t("control","aspect");
x.t("function","onaftermethod");
x.t("function","onbeforemethod");
x.t("function","periscopeaction");
x.t("function","guidewire_selectall");
x.t("function","verticalchange");
x.t("function","called");
x.t("annotations","interceptors");
x.t("implements","iannotation");
x.t("design","test");
x.t("define","new");
x.t("define","interceptor");
x.t("specifies","new");
x.t(".name","methodname");
x.t("language","feature");
x.t("iannotation","interface");
x.t("iannotation","ipremethodinterceptor");
x.t("com.mycompany.submarine.periscopeaction","java.lang.boolean");
x.t("implementing","iannotation");
x.t("returned","com.mycompany.submarine.periscopeaction");
x.t("returned","typeof");
x.t("returned","com.mycompany.submarine.verticalchange");
x.t("types","objects");
x.t("types","parameters");
x.t("types","contextual");
x.t("calling","method");
x.t("calling","constructor");
x.t("reference","guide");
x.t("code","method");
x.t("code","defines");
x.t("code","performs");
x.t("code","execute");
x.t("code","calls");
x.t("code","pasting");
x.t("code","prints");
x.t("code","define");
x.t("code","warning");
x.t("notification","message");
x.t("07","21:03:29");
x.t("07","21:03:31");
x.t("override","intercept");
x.t("post-method","interceptor");
x.t("post-method","interceptors");
x.t("return","value");
x.t("return","view");
x.t("return","dark");
x.t("return","values");
x.t("completes","timestamps");
x.t("message","package");
x.t("message","class");
x.t("upon","method");
x.t("printed","method");
x.t("printed","logme");
x.t("printed","log");
x.t("actual","parameters");
x.t("ensure","code");
x.t("occurred","messsage");
x.t("null","specified");
x.t("null","mon");
x.t("typeof","instance");
x.t("contextual","debugging");
x.t("com.mycompany.submarine.verticalchange","int");
x.t("additional","logic");
x.t("value","onbeforemethod");
x.t("value","null");
x.t("value","view");
x.t("value","returnvalue");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("submarine","s.verticalchange");
x.t("submarine","@logme");
x.t("inter","ceptor");
x.t("programming","language");
x.t("ipostmethodinterceptor","implement");
x.t("ipostmethodinterceptor","public");
x.t("ipostmethodinterceptor","control");
x.t("view","good");
x.t("takes","parameter");
x.t("takes","actual");
x.t("takes","following");
x.t("java.lang.boolean","arguments");
x.t("java.lang.boolean","return");
x.t("page","error");
x.t("good","example");
x.t("good","else");
x.t("output","mon");
x.t("output","contains");
x.t("interceptors","specified");
x.t("interceptors","gosu");
x.t("interceptors","allows");
x.t("interceptors","function");
x.t("interceptors","ensure");
x.t("interceptors","beware");
x.t("dark","test");
x.t("information","create");
x.t("information","however");
x.t("information","intercepted");
x.t("anticipate","potential");
x.t("beware","potential");
x.t("defined","gosu");
x.t("case","instance");
x.t("logme","intercepts");
x.t("logme","implements");
x.t("logme","@logme");
x.t("@logme","function");
x.t("verticalchange","distance");
x.t("verticalchange","output");
x.t("values","method");
x.t("captured","printed");
x.t("implications","test");
x.t("called","cross");
x.t("called","takes");
x.t("called","interceptors");
x.t("called","logme");
x.t("called","immediately");
x.t("args","object");
x.t("print","method");
x.t("print","arguments");
x.t("print","periscope");
x.t("print","datetime.currentdate.tostring");
x.t("print","arg");
x.t("print","vertical");
x.t("print","returned");
x.t("print","return");
x.t("print","print");
x.t("returnvalue","wrapper");
x.t("returnvalue","object");
x.t("ceptor","performance");
x.t("executes","code");
x.t("note","method");
x.t("note","timestamps");
x.t("-5","s.periscopeaction");
x.t("-5","going");
x.t("-5","vertical");
x.t("21:03:31","pdt");
x.t("optionally","passes");
x.t("call","apply");
x.t("call","chain");
x.t("call","add");
x.t("call","com.mycompany.submarine.periscopeaction");
x.t("call","typeof");
x.t("call","com.mycompany.submarine.verticalchange");
x.t("call","following");
x.t("immediately","object");
x.t("created","gosu");
x.t("package","com.mycompany");
x.t("following","method");
x.t("following","arguments");
x.t("following","gosu");
x.t("following","code");
x.t("special","function");
x.t("special","code");
x.t("thoroughly","once");
x.t("class\u2019s","methods");
x.t("class","example");
x.t("class","implement");
x.t("class","instance");
x.t("class","public");
x.t("class","constructor");
x.t("class","methods");
x.t("class","specifies");
x.t("class","submarine");
x.t("class","logme");
x.t("//","annotation");
x.t("//","nothing");
x.t("using","information");
x.t("warning","interceptors");
x.t("var","new");
x.t("var","text_val=eval");
x.t("var","5000000");
x.t("5000000","//");
x.t("including","types");
x.t("log","message");
x.t("careful","performance");
x.t("object","onaftermethod");
x.t("object","onbeforemethod");
x.t("object","methodname");
x.t("object","print");
x.t("object","returnvalue");
x.t("object","created");
x.t("(moveperiscopeup)","return");
x.t("tester","uses");
x.t("contains","information");
}
