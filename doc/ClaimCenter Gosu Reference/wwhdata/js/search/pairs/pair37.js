function FileData_Pairs(x)
{
x.t("example","typekey.addresstype");
x.t("example","gosu");
x.t("example","select");
x.t("example","approach");
x.t("example","code");
x.t("example","variable");
x.t("example","print");
x.t("example","state.tc_ca");
x.t("example","typelist");
x.t("example","//");
x.t("addresstype.tc_business","important");
x.t("included","otherwise");
x.t("debugging","compati");
x.t("debugging","reasons");
x.t("multi-lingual","manipulates");
x.t("method","accepts");
x.t("method","typename");
x.t("available","typekeys");
x.t("properties","typekey");
x.t("mycode",".displayname");
x.t("rare","cases");
x.t("tc_","prefix");
x.t("tc_","typecodename");
x.t("version","display");
x.t("version","code");
x.t("just","non-retired");
x.t("preferred","approach");
x.t("clear","preferable");
x.t("myinstance.actonstate","ca");
x.t("retired","typekeys");
x.t("files","business");
x.t("files","typekeys");
x.t("intended","display");
x.t("addresstype","typelist");
x.t("addresstype","contains");
x.t("business","description");
x.t("business","home");
x.t("business","getting");
x.t("business","displayname");
x.t("business","address");
x.t("business","syntax");
x.t("static","instance");
x.t("preferable","typelistname");
x.t("refer","typekey");
x.t("description","description");
x.t("description","non-");
x.t("description","typekey");
x.t("description","context");
x.t("sending","mail");
x.t("sending","val");
x.t("home","business");
x.t("home","information");
x.t("always","clear");
x.t("always","typesafe");
x.t("always","fully");
x.t("instance","variables");
x.t("instance","syntax");
x.t("instance","typelistname");
x.t("instance","created");
x.t("variables","fully");
x.t("normal","string");
x.t("affaires","unlocalizedname");
x.t("enumerations","unique");
x.t("arguments","function");
x.t("storing","values");
x.t("current","language");
x.t("user","unlocalizedname");
x.t("user","include");
x.t("contexts","case");
x.t("remote","system");
x.t("later","displayname");
x.t("later","comparison");
x.t("text_val.select","link");
x.t("errors","typesafe");
x.t("abbreviations","comparing");
x.t("compati","bility");
x.t(".displayname","example");
x.t("type","static");
x.t("type","type");
x.t("type","typesafe");
x.t("type","list");
x.t("type","directly");
x.t("type","important");
x.t("type","safety");
x.t("capital","letters");
x.t("unsafe","however");
x.t("vary","current");
x.t("time","gosu");
x.t("time","typekeys");
x.t("time","syntax");
x.t("time","words");
x.t("time","capitalization");
x.t("time","explicit");
x.t("time","(non-typesafe)");
x.t("compiler","treats");
x.t("explicitly","coerce");
x.t("external","system");
x.t("followed","typekey\u2019s");
x.t("however","programming");
x.t("releases","business");
x.t("typesafe","technique");
x.t("typesafe","programming");
x.t("typesafe","context");
x.t("typesafe","coercion");
x.t("typesafe","pass");
x.t("checks","text");
x.t("text","type");
x.t("apis","object");
x.t("property","description");
x.t("property","external");
x.t("property","exists");
x.t("property","unlocalizedname");
x.t("property","almost");
x.t("property","code");
x.t("product","releases");
x.t("link","directly");
x.t("access","typecode");
x.t("prefix","followed");
x.t("prefix","words");
x.t("getting","information");
x.t("want","displayname");
x.t("ambiguity","name");
x.t("messsage","gosu");
x.t("list","true");
x.t("list","name");
x.t("list","typekeys");
x.t("proper","capitalization");
x.t("indicates","whether");
x.t("(false)","//");
x.t("need","description");
x.t("typekey.addresstype","typekey");
x.t("typecode","example");
x.t("typecode","type");
x.t("typecode","compile");
x.t("typecode","code");
x.t("typecode","reference");
x.t("typecode","value");
x.t("typecode","typelist");
x.t("typecode","using");
x.t("guide","gosu");
x.t("guide","typelist");
x.t("validate","code");
x.t("accepts","typecode");
x.t("accepts","specific");
x.t("accepts","object");
x.t("fails","run");
x.t("throws","exception");
x.t("displayname","property");
x.t("displayname","displaying");
x.t("displayname","localized");
x.t("displayname","extract");
x.t("reasons","compatibility");
x.t("reasons","general");
x.t("directly","code");
x.t("directly","page");
x.t("requires","references");
x.t("requires","specific");
x.t("true","retired");
x.t("text_val.focus","text_val.select");
x.t("typelists","similar");
x.t("name","rare");
x.t("name","intended");
x.t("name","vary");
x.t("name","typecode");
x.t("name","contain");
x.t("name","information");
x.t("name","based");
x.t("name","package");
x.t("coercions","typekey");
x.t("coercions","using");
x.t("run-time","conversion");
x.t("no","space");
x.t("settings","debugging");
x.t("settings","display");
x.t("typekeys","included");
x.t("typekeys","example");
x.t("typekeys","just");
x.t("typekeys","addresstype");
x.t("typekeys","explicitly");
x.t("typekeys","typelists");
x.t("typekeys","typekeys");
x.t("typekeys","function");
x.t("typekeys","non-retired");
x.t("typekeys","returned");
x.t("typekeys","thus");
x.t("typekeys","retire");
x.t("typekeys","choose");
x.t("typekeys","verbose");
x.t("typekeys","typelist");
x.t("typekeys","including");
x.t("gosu","compiler");
x.t("gosu","checks");
x.t("gosu","access");
x.t("gosu","throws");
x.t("gosu","types");
x.t("gosu","reference");
x.t("gosu","reports");
x.t("gosu","entity");
x.t("codes","business");
x.t("codes","caled");
x.t("typecodename","example");
x.t("typecodename","syntax");
x.t("typed","zz");
x.t("references","typekeys");
x.t("references","comparing");
x.t("conversion","string");
x.t("notifications","local");
x.t("avoid","errors");
x.t("argument","indicates");
x.t("argument","accepts");
x.t("base","class");
x.t("perform","run-time");
x.t("non-localized","string");
x.t("comparison","business");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("boolean","argument");
x.t("addresstype.typekeys","[0]");
x.t("exists","debugging");
x.t("standard","static");
x.t("mytypekey","codestring");
x.t("address","type");
x.t("claimcenter","data");
x.t("appearances","compile");
x.t("string","version");
x.t("string","typesafe");
x.t("string","representation");
x.t("string","code");
x.t("string","value");
x.t("string","data");
x.t("array","print");
x.t("local","language");
x.t("three","typekey");
x.t("earlier","product");
x.t("earlier","section");
x.t("zz","invalid");
x.t("zz","value");
x.t("prints","business");
x.t("prints","typekeys");
x.t("prints","code");
x.t("contain","no");
x.t("characters","abbreviations");
x.t("auto","programming");
x.t("legal","typecode");
x.t("bility","earlier");
x.t("store","compare");
x.t("error","occurred");
x.t("error","warning");
x.t("display","user");
x.t("display","name");
x.t("something","user");
x.t("(addresstype.tc_business.displayname)","code");
x.t("syntax","addresstype.tc_business");
x.t("syntax","avoid");
x.t("syntax","error");
x.t("syntax","typekey");
x.t("syntax","code");
x.t("syntax","typelistname");
x.t("syntax","described");
x.t("syntax","typelistname.tc_typecodename");
x.t("typekey\u2019s","code");
x.t("know","typelist");
x.t("representation","represents");
x.t("unlocalizedname","property");
x.t("unlocalizedname","unlocalized");
x.t("select","addresstype");
x.t("accept","value");
x.t("accept","values");
x.t("first","typekey");
x.t("space","characters");
x.t("non-","localized");
x.t("guidewire_selectall","var");
x.t("literal","typelist");
x.t("myclaim.losstype","auto");
x.t("function","requires");
x.t("function","argument");
x.t("function","guidewire_selectall");
x.t("approach","myclaim.losstype");
x.t("approach","works");
x.t("technique","perform");
x.t("technique","despite");
x.t("unique","codes");
x.t("words","zz");
x.t("words","syntax");
x.t("represents","legal");
x.t("represents","typekey");
x.t("against","cases");
x.t("whether","want");
x.t("whether","typekeys");
x.t("whether","include");
x.t("non-retired","typekeys");
x.t("carefully","whether");
x.t("capitalization","always");
x.t("capitalization","standard");
x.t("instead","code");
x.t("instead","verbose");
x.t("programmatically","list");
x.t("language","affaires");
x.t("language","settings");
x.t("almost","cases");
x.t("types","typekeys");
x.t("compile","time");
x.t("section","using");
x.t("coerce","value");
x.t("returned","list");
x.t("simply","type");
x.t("important","access");
x.t("important","application");
x.t("works","method");
x.t("explicit","coercion");
x.t("reference","static");
x.t("reference","guide");
x.t("reference","typekey");
x.t("reference","existing");
x.t("typekey","always");
x.t("typekey","unsafe");
x.t("typekey","property");
x.t("typekey","gosu");
x.t("typekey","array");
x.t("typekey","compile");
x.t("typekey","code");
x.t("typekey","specific");
x.t("typekey","typelistname");
x.t("typekey","represent");
x.t("typekey","data");
x.t("typekey","values");
x.t("typekey","value\u2019s");
x.t("typekey","typically");
x.t("typekey","literals");
x.t("typekey","following");
x.t("code","business");
x.t("code","static");
x.t("code","refer");
x.t("code","property");
x.t("code","proper");
x.t("code","displayname");
x.t("code","non-localized");
x.t("code","prints");
x.t("code","store");
x.t("code","first");
x.t("code","represents");
x.t("code","against");
x.t("code","typekey");
x.t("code","exporting");
x.t("code","dynamic");
x.t("invalid","typecode");
x.t("reports","compile");
x.t("typecodes","example");
x.t("fully","qualified");
x.t("fully","capitalized");
x.t("thus","type");
x.t("safety","requires");
x.t(".gettypekeys","includeretiredtypekeys");
x.t("return","unretired");
x.t("known","compile");
x.t("despite","appearances");
x.t("variable","function");
x.t("unlocalized","version");
x.t("occurred","messsage");
x.t("existing","typekey");
x.t("mail","notifications");
x.t("configuration","files");
x.t("configuration","guide");
x.t("qualified","syntax");
x.t("include","retired");
x.t("include","sending");
x.t("addresstype.gettypekeys","(false)");
x.t("exporting","typekey");
x.t("similar","enumerations");
x.t("value","capital");
x.t("value","coercions");
x.t("value","gosu");
x.t("value","string");
x.t("value","know");
x.t("value","typekey");
x.t("value","code");
x.t("value","known");
x.t("value","typekey.state");
x.t("value","typelist");
x.t("value","var");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("specific","typecode");
x.t("specific","value");
x.t("typekey.state","myinstance.actonstate");
x.t("typekey.state","warning");
x.t("unretired","typekeys");
x.t("compatibility","reasons");
x.t("programming","contexts");
x.t("programming","context");
x.t("typelistname","example");
x.t("typelistname","tc_");
x.t("typelistname",".tc_");
x.t("exception","available");
x.t("represent","typekey");
x.t("ca","run");
x.t("[0]",".code");
x.t("page","error");
x.t("context","example");
x.t("context","always");
x.t("context","accepts");
x.t("context","accept");
x.t("dynamic","string");
x.t("information","mycode");
x.t("information","claimcenter");
x.t("information","typekey");
x.t("data","model");
x.t("data","coercion");
x.t("data","coerced");
x.t("(non-typesafe)","coercions");
x.t("query","apis");
x.t("gettypekeys","method");
x.t("happens","pass");
x.t("retire","typekey");
x.t("meaning","need");
x.t("values","sending");
x.t("values","later");
x.t("values","codes");
x.t("values","typekeys");
x.t("values","specific");
x.t("case","fully");
x.t("comparing","values");
x.t("application","multi-lingual");
x.t("displaying","something");
x.t("called","addresstype");
x.t("described","earlier");
x.t("choose","whether");
x.t("choose","carefully");
x.t("includeretiredtypekeys","boolean");
x.t("print","addresstype.typekeys");
x.t("print","(addresstype.tc_business.displayname)");
x.t("print","addresstype.gettypekeys");
x.t(".code","code");
x.t("value\u2019s","meaning");
x.t("capitalized","typecode");
x.t("verbose","syntax");
x.t("otherwise","return");
x.t("cases","ambiguity");
x.t("cases","literal");
x.t("cases","instead");
x.t("cases","code");
x.t("letters","tc_");
x.t("treats","normal");
x.t("typically","code");
x.t("val","ues");
x.t("localized","version");
x.t("localized","data");
x.t("based","current");
x.t("literals","reference");
x.t("literals","cases");
x.t("package","typelist");
x.t(".tc_","typecodename");
x.t("created","compile");
x.t("call","gettypekeys");
x.t("caled","typecodes");
x.t("model","claimcenter");
x.t("model","configuration");
x.t("state.tc_ca","preferred");
x.t("run","time");
x.t("entity","query");
x.t("following","properties");
x.t("system","storing");
x.t("system","name");
x.t("ues","remote");
x.t("typelist","example");
x.t("typelist","type");
x.t("typelist","typecode");
x.t("typelist","validate");
x.t("typelist","name");
x.t("typelist","typed");
x.t("typelist","programmatically");
x.t("typelist","simply");
x.t("typelist","programming");
x.t("typelist","called");
x.t("typelist","choose");
x.t("typelist","print");
x.t("typelist","literals");
x.t("typelist","call");
x.t("using","tc_");
x.t("using","string");
x.t("using","typelist");
x.t("warning","string");
x.t("warning","passing");
x.t("coercion","typesafe");
x.t("coercion","fails");
x.t("coercion","happens");
x.t("class","object");
x.t("codestring","typekey.state");
x.t("//","prints");
x.t("general","instead");
x.t("pass","arguments");
x.t("pass","string");
x.t("compare","values");
x.t("var","text_val=eval");
x.t("var","mytypekey");
x.t("passing","string");
x.t("typelistname.tc_typecodename","example");
x.t("coerced","run");
x.t("including","retired");
x.t("contains","three");
x.t("object","typesafe");
x.t("object","references");
x.t("object","base");
x.t("typename",".gettypekeys");
x.t("manipulates","typekeys");
x.t("extract","display");
}
