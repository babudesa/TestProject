function FileData_Pairs(x)
{
x.t("(fake)","instance");
x.t("example","assumes");
x.t("example","allow");
x.t("example","suppose");
x.t("supports","basic");
x.t("(messagemock)","entitymock.newentitymock");
x.t("complex","graph");
x.t("properties","fortunately");
x.t("properties","sends");
x.t("properties","entity");
x.t("fortunately","entitymock");
x.t("method","getter");
x.t("method","calls");
x.t("method","public");
x.t("method","exactly");
x.t("method","handles");
x.t("method","exists");
x.t("method","delegate");
x.t("method","requests");
x.t("method","internal");
x.t("method","added");
x.t("method","message");
x.t("method","mock");
x.t("method","existing");
x.t("method","equals");
x.t("method","message.reportackcalled");
x.t("method","entity");
x.t("method","following");
x.t("method","returns");
x.t("version","reportack");
x.t("version","message");
x.t("just","properties");
x.t("proxy","implements");
x.t("proxy\u2019s","invocation");
x.t("claim","code");
x.t("claim","entity");
x.t("entitymock.newentitymock","(claim.class)");
x.t("entitymock.newentitymock","(messagemock.class)");
x.t("implement","messagemock");
x.t("implement","methods");
x.t("retrieving","values");
x.t("messagemock","instance");
x.t("messagemock","interface");
x.t("messagemock","declare");
x.t("messagemock","message");
x.t("messagemock","extends");
x.t("create","instance");
x.t("create","new");
x.t("create","custom");
x.t("create","delegate");
x.t("create","mock");
x.t("create","implementation");
x.t("create","internally");
x.t("integration","code");
x.t("myclaim","entitymock.newentitymock");
x.t("built-in","domain");
x.t("instance","tests");
x.t("instance","claimcenter");
x.t("instance","delegate");
x.t("instance","transport");
x.t("having","deploy");
x.t("key","entity");
x.t("required","cases");
x.t("transport.send","message");
x.t("storing","retrieving");
x.t("flag","new");
x.t("flag","code");
x.t("intercept","built-in");
x.t("intercept","case");
x.t("void","reportack");
x.t("plugin","interface");
x.t("plugin","test");
x.t("plugin","claimcenter");
x.t("plugin","acknowledges");
x.t("plugin","code");
x.t("plugin","java");
x.t("plugin","usage");
x.t("plugin","cases");
x.t("creates","proxy");
x.t("setter","method");
x.t("setter","methods");
x.t("situations","creating");
x.t("reportack","method");
x.t("reportack","first");
x.t("reportack","_reportackcalled");
x.t("reportack","reportackcalled");
x.t("uses","entities");
x.t("uses","message");
x.t("uses","entity");
x.t("handled","delegate");
x.t("until","queue");
x.t("text_val.select","link");
x.t("interface","messagemock");
x.t("interface","payload");
x.t("interface","add");
x.t("interface","testing");
x.t("interface","implementation");
x.t("interface","extends");
x.t("interface","class");
x.t("interface","using");
x.t("deploy","deploy");
x.t("deploy","test");
x.t("deploy","live");
x.t("necessary","test");
x.t("extension","delegate");
x.t("entitymock.adddelegate","message");
x.t("payload","message");
x.t("type","delegate");
x.t("type","mock");
x.t("com.guidewire.cc.external.entity.claim","myclaim");
x.t("basic","getter");
x.t("basic","implementation");
x.t("entitymock.setid","message");
x.t("change","include");
x.t("external","system");
x.t("calls","message.reportack");
x.t("calls","new");
x.t("calls","methods");
x.t("calls","code");
x.t("calls","following");
x.t("getter","setter");
x.t("getter","methods");
x.t("decorate","entity");
x.t("explicitly","defined");
x.t("public","void");
x.t("public","interface");
x.t("public","boolean");
x.t("public","class");
x.t("sort","messaging");
x.t("extend","original");
x.t("extend","entity");
x.t("form","create");
x.t("however","suppose");
x.t("entities","example");
x.t("entities","just");
x.t("entities","persist");
x.t("entities","called");
x.t("entities","mentioned");
x.t("entities","without");
x.t("default","provides");
x.t("default","logic");
x.t("default","entity");
x.t("original","entity");
x.t("checks","method");
x.t("put","queue");
x.t("queue","emptied");
x.t("queue","multithreaded");
x.t("queue","acknowledge");
x.t("assumes","queue");
x.t("link","directly");
x.t("servers","cases");
x.t("new","interface");
x.t("new","file");
x.t("new","custom");
x.t("new","methods");
x.t("new","messagedelegate");
x.t("new","message");
x.t("new","reportackcalled");
x.t("new","messagetransportimpl");
x.t("new","class");
x.t("objects","declare");
x.t("signature","matching");
x.t("want","capture");
x.t("want","test");
x.t("want","delegate");
x.t("message.reportack","confirm");
x.t("message.reportack","message.reportackcalled");
x.t("@link","messagemock");
x.t("@link","com.guidewire.external.entity.entitymock");
x.t("includes","utility");
x.t("block","until");
x.t("command","test");
x.t("messsage","gosu");
x.t("capture","method");
x.t("status","flag");
x.t("file","messagemock.java");
x.t("emptied","listeners");
x.t("add","delegate");
x.t("add","reportackcalled");
x.t("add","entirely");
x.t("add","signatures");
x.t("assign","delegate");
x.t("intercepts","method");
x.t("id","primary");
x.t("entityfactory","mock");
x.t("entityfactory","java");
x.t("testing","add");
x.t("testing","methods");
x.t("testing","easier");
x.t("testing","extends");
x.t("testing","entity");
x.t("guide","java");
x.t("applies","handler");
x.t("check","entity.getid");
x.t("entitymock","creates");
x.t("entitymock","public");
x.t("entitymock","simplest");
x.t("entitymock","allows");
x.t("entitymock","works");
x.t("entitymock","utility");
x.t("entitymock","class");
x.t("throws","illegalargumentexception");
x.t("false","//");
x.t("directly","page");
x.t("test","calls");
x.t("test","entitymock");
x.t("test","code\u2019s");
x.t("test","changes");
x.t("test","code");
x.t("test","message");
x.t("test","java");
x.t("test","messagetransport");
x.t("test","asserttrue");
x.t("writing","messagetransport");
x.t("handle","methods");
x.t("handle","pretend");
x.t("declare","method");
x.t("declare","new");
x.t("true","//");
x.t("entity.getid","entitymock.setid");
x.t("text_val.focus","text_val.select");
x.t("libraries","claimcenter");
x.t("libraries","invoke");
x.t("functionality","necessary");
x.t("creating","mock");
x.t("creating","real");
x.t("stored","values");
x.t("no","matching");
x.t("simplest","form");
x.t("jvm","messagetransportimpl");
x.t("gosu","testing");
x.t("gosu","reference");
x.t("handler","checks");
x.t("handler","throws");
x.t("handler","follows");
x.t("handler","examines");
x.t("handler","runs");
x.t("follows","following");
x.t("exactly","signature");
x.t("existed","delegate");
x.t("custom","method");
x.t("custom","methods");
x.t("neither","rules");
x.t("handles","storing");
x.t("handles","entity");
x.t("tests","create");
x.t("delegate\u2019s","methods");
x.t("queue.waituntilempty","//");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("useful","quickly");
x.t("methods","implement");
x.t("methods","reportack");
x.t("methods","type");
x.t("methods","explicitly");
x.t("methods","extend");
x.t("methods","however");
x.t("methods","want");
x.t("methods","@link");
x.t("methods","testing");
x.t("methods","existed");
x.t("methods","delegate");
x.t("methods","instead");
x.t("methods","return");
x.t("methods","messagedelegate");
x.t("methods","little");
x.t("methods","entity");
x.t("alternatively","extend");
x.t("alternatively","configure");
x.t("provides","implementation");
x.t("exists","delegate");
x.t("boolean","_reportackcalled");
x.t("boolean","reportackcalled");
x.t("sends","message");
x.t("allows","fake");
x.t("examines","mock");
x.t("confirm","call");
x.t("modifying","entityfactory");
x.t("claimcenter","plugin");
x.t("claimcenter","servers");
x.t("claimcenter","includes");
x.t("claimcenter","jvm");
x.t("claimcenter","database");
x.t("claimcenter","entity");
x.t("claimcenter","server");
x.t("allow","test");
x.t("earlier","applies");
x.t("earlier","simplest");
x.t("developing","code");
x.t("store","properties");
x.t(".newentity","claim");
x.t("error","occurred");
x.t("logic","deploy");
x.t("logic","neither");
x.t("suppose","want");
x.t("suppose","writing");
x.t("acknowledges","message");
x.t("code\u2019s","logic");
x.t("code\u2019s","behavior");
x.t("delegate","intercept");
x.t("delegate","calls");
x.t("delegate","objects");
x.t("delegate","new");
x.t("delegate","no");
x.t("delegate","delegate");
x.t("delegate","implements");
x.t("delegate","override");
x.t("delegate","class");
x.t("delegate","//");
x.t("delegate","object");
x.t("invokes","method");
x.t("next","create");
x.t("next","call");
x.t("finally","test");
x.t("messages","external");
x.t("unit","test");
x.t("domain","method");
x.t("domain","methods");
x.t("first","create");
x.t("guidewire_selectall","var");
x.t("entity\u2019s","delegate");
x.t("cause","code");
x.t("function","guidewire_selectall");
x.t("implements","method");
x.t("implements","setter");
x.t("implements","testing");
x.t("implements","two");
x.t("reads","properties");
x.t("fake","behavior");
x.t("may","add");
x.t("com.guidewire.external.entity.entitymock","passing");
x.t("private","boolean");
x.t("requests","runs");
x.t("instead","naturally");
x.t("changes","code");
x.t("changes","behavior");
x.t("internal","flag");
x.t("transport","plugin");
x.t("transport","new");
x.t("listeners","notified");
x.t("works","situations");
x.t("works","creating");
x.t("tostring","works");
x.t("tostring","cases");
x.t("added","reportackcalled");
x.t("notified","//");
x.t("persist","claimcenter");
x.t("entitymock.initentityfactory","information");
x.t("code","create");
x.t("code","uses");
x.t("code","calls");
x.t("code","useful");
x.t("code","invokes");
x.t("code","changes");
x.t("code","entitymock.initentityfactory");
x.t("code","return");
x.t("code","java");
x.t("code","tries");
x.t("code","import");
x.t("code","actually");
x.t("code","takes");
x.t("code","real");
x.t("code","without");
x.t("code","generates");
x.t("reference","guide");
x.t("task","plugin");
x.t("_reportackcalled","false");
x.t("_reportackcalled","true");
x.t("_reportackcalled","finally");
x.t("return","stored");
x.t("return","_reportackcalled");
x.t("return","mock");
x.t("override","method");
x.t("override","basic");
x.t("messagedelegate","entitymock.adddelegate");
x.t("messagedelegate","delegate");
x.t("messagedelegate","private");
x.t("messagedelegate","package");
x.t("primary","key");
x.t("message","(messagemock)");
x.t("message","version");
x.t("message","transport.send");
x.t("message","reportack");
x.t("message","put");
x.t("message","test");
x.t("message","boolean");
x.t("message","delegate");
x.t("message","reads");
x.t("message","transport");
x.t("message","send");
x.t("message","entity");
x.t("message","message.getpayload");
x.t("message","//");
x.t("message","sent");
x.t("message","object");
x.t("successfully","developing");
x.t("library\u2019s","default");
x.t("database","cause");
x.t("java","plugin");
x.t("java","gosu");
x.t("java","unit");
x.t("java","code");
x.t("java","send");
x.t("java","(entitymock)");
x.t("java","entity");
x.t("mock","(fake)");
x.t("mock","version");
x.t("mock","claim");
x.t("mock","interface");
x.t("mock","entities");
x.t("mock","entity\u2019s");
x.t("mock","message");
x.t("mock","implementation");
x.t("mock","entity");
x.t("quickly","test");
x.t("pretend","handle");
x.t("actual","plugin");
x.t("occurred","messsage");
x.t("rules","handler");
x.t("rules","mentioned");
x.t("(claim.class)","type");
x.t("(claim.class)","change");
x.t("(claim.class)","alternatively");
x.t("existing","method");
x.t("tries","check");
x.t("factory","create");
x.t("include","command");
x.t("main","task");
x.t("easier","entitymock");
x.t("additional","methods");
x.t("running","actual");
x.t("usage","//");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("send","messages");
x.t("send","message");
x.t("send","note");
x.t("send","using");
x.t("little","functionality");
x.t("implementation","messagemock");
x.t("implementation","message");
x.t("implementation","generated");
x.t("implementation","equals");
x.t("implementation","including");
x.t("invocation","handler");
x.t("--","required");
x.t("hashcode","tostring");
x.t("exception","using");
x.t("import","com.guidewire.cc.external.entity.claim");
x.t("import","com.guidewire.cc.external.entity.message");
x.t("acknowledgements","suppose");
x.t("actually","called");
x.t("extends","message");
x.t("extends","entity");
x.t("extends","com.guidewire");
x.t("generated","entitymock");
x.t("(entitymock)","testing");
x.t("(entitymock)","function");
x.t("(entitymock)","help");
x.t("live","claimcenter");
x.t("takes","message");
x.t("runs","default");
x.t("runs","delegate\u2019s");
x.t("multithreaded","queue.waituntilempty");
x.t("page","error");
x.t("help","test");
x.t("com.guidewire.cc.external.entity.message","myclaim");
x.t("com.guidewire.cc.external.entity.message","public");
x.t("com.guidewire.cc.external.entity.message","//");
x.t("good","practice");
x.t("messagetransport","plugin");
x.t("messaging","system");
x.t("cc",".external.entity.message");
x.t("internally","claimcenter");
x.t("configure","entity");
x.t("graph","entities");
x.t("information","entityfactory");
x.t("equals","hashcode");
x.t("defined","delegate");
x.t("message.reportackcalled","handled");
x.t("message.reportackcalled","new");
x.t("message.reportackcalled","modifying");
x.t("practice","case");
x.t("utility","apis");
x.t("utility","class");
x.t("values","default");
x.t("values","code");
x.t("illegalargumentexception","exception");
x.t("reportackcalled","method");
x.t("reportackcalled","next");
x.t("reportackcalled","return");
x.t("reportackcalled","class");
x.t("case","custom");
x.t("case","code");
x.t("called","myclaim");
x.t("called","reportack");
x.t("called","entitymock");
x.t("two","methods");
x.t("note","mock");
x.t("optionally","plugin");
x.t("cases","integration");
x.t("cases","handler");
x.t("cases","java");
x.t("cases","//");
x.t("mentioned","earlier");
x.t("messagemock.java","package");
x.t("real","entities");
x.t("real","claimcenter");
x.t("real","java");
x.t("entirely","new");
x.t("call","new");
x.t("call","happened");
x.t("package","examples.plugins.messaging");
x.t("naturally","test");
x.t("(messagemock.class)","//");
x.t("messagetransportimpl","transport");
x.t("messagetransportimpl","//");
x.t("entityfactory.getinstance",".newentity");
x.t("entity","example");
x.t("entity","supports");
x.t("entity","proxy\u2019s");
x.t("entity","messagemock");
x.t("entity","interface");
x.t("entity","getter");
x.t("entity","decorate");
x.t("entity","public");
x.t("entity","new");
x.t("entity","assign");
x.t("entity","entitymock");
x.t("entity","libraries");
x.t("entity","methods");
x.t("entity","store");
x.t("entity","unit");
x.t("entity","may");
x.t("entity","code");
x.t("entity","library\u2019s");
x.t("entity","factory");
x.t("entity","additional");
x.t("entity","send");
x.t("entity","--");
x.t("entity","com.guidewire.cc.external.entity.message");
x.t("entity","utility");
x.t("entity","using");
x.t("entity","without");
x.t("system","main");
x.t("system","optionally");
x.t("signatures","new");
x.t("following","code");
x.t("following","rules");
x.t("following","entityfactory.getinstance");
x.t("message.getpayload","//");
x.t("class","implement");
x.t("class","create");
x.t("class","implements");
x.t("class","messagedelegate");
x.t("class","called");
x.t("class","designate");
x.t("class","generates");
x.t("using","sort");
x.t("using","@link");
x.t("using","entitymock");
x.t("using","java");
x.t("//","example");
x.t("//","create");
x.t("//","intercept");
x.t("//","block");
x.t("//","add");
x.t("//","id");
x.t("//","custom");
x.t("//","claimcenter");
x.t("//","mock");
x.t("//","send");
x.t("//","good");
x.t("returns","status");
x.t(".external.entity.message","next");
x.t("without","having");
x.t("without","creating");
x.t("without","running");
x.t("behavior","calls");
x.t("behavior","alternatively");
x.t("behavior","domain");
x.t("designate","handle");
x.t("invoke","method");
x.t("acknowledge","message");
x.t("var","text_val=eval");
x.t("including","acknowledgements");
x.t("happened","add");
x.t("passing","instance");
x.t("generates","complex");
x.t("generates","mock");
x.t("sent","successfully");
x.t("com.guidewire","cc");
x.t("asserttrue","message.reportackcalled");
x.t("server","create");
x.t("server","claimcenter");
x.t("server","//");
x.t("object","intercepts");
x.t("object","test");
x.t("object","libraries");
x.t("object","handler");
x.t("object","handles");
x.t("object","delegate");
x.t("object","code");
x.t("object","class");
x.t("matching","method");
x.t("matching","methods");
x.t("examples.plugins.messaging","extension");
x.t("examples.plugins.messaging","import");
}
