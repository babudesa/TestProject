function FileData_Pairs(x)
{
x.t("example","technique");
x.t("example","passing");
x.t("uniquely","identifies");
x.t("uniquely","identifying");
x.t("fp64","(s1)");
x.t("fp64","method");
x.t("fp64","(ba)");
x.t("fp64","fingerprint");
x.t("fp64","new");
x.t("fp64","(f)");
x.t("fp64","s1");
x.t("fp64","(original)");
x.t("fp64","constructor");
x.t("fp64","methods");
x.t("fp64","(ca)");
x.t("fp64","(s2)");
x.t("fp64",".extend");
x.t("fp64","(s)");
x.t("fp64","hello");
x.t("fp64","package");
x.t("fp64","class");
x.t("fp64","object");
x.t("refinements","andrei");
x.t("provide","probabilistic");
x.t("provide","near-certainty");
x.t("possible","guidewire");
x.t("(s1)",".equals");
x.t("(s1)",".extend");
x.t("method","alternate");
x.t("method","tobytes");
x.t("method","calls");
x.t("method","signature");
x.t("method","writes");
x.t("method","tohexstring");
x.t("method","returns");
x.t("(foo)",".extend");
x.t("digital","source");
x.t("computing","64-bit");
x.t("defines","mathematical");
x.t("lead","unexpected");
x.t("testinputstreamconstructor","new");
x.t("preserve","checksum");
x.t("create","fingerprint");
x.t("[4]","var");
x.t("alternate","method");
x.t("source","data");
x.t("kinds","data");
x.t("having","fingerprint");
x.t("variables","s1");
x.t("improve","detection");
x.t("intentionally","unintentionally");
x.t("tobytes","tohexstring");
x.t("tobytes","returns");
x.t("current","data");
x.t("probabilistic","guarantee");
x.t("finger","print");
x.t("later","time");
x.t("hash","transport");
x.t("last","cached");
x.t("fingerprint","uniquely");
x.t("fingerprint","fp64");
x.t("fingerprint","current");
x.t("fingerprint","cached");
x.t("fingerprint","nm");
x.t("fingerprint","bytes");
x.t("fingerprint","concatenation");
x.t("fingerprint","destructive");
x.t("fingerprint","string");
x.t("fingerprint","equivalent");
x.t("fingerprint","newly-allocated");
x.t("fingerprint","essence");
x.t("fingerprint","words");
x.t("fingerprint","value");
x.t("fingerprint","generate");
x.t("fingerprint","output");
x.t("fingerprint","described");
x.t("fingerprint","algorithm");
x.t("fingerprint","itself");
x.t("fingerprint","using");
x.t("fingerprint","var");
x.t("fingerprint","unsigned");
x.t("fingerprint","object");
x.t("(ba)","note");
x.t("leading","zeros");
x.t("text_val.select","link");
x.t("altered","either");
x.t("unintentionally","example");
x.t("physical","data");
x.t("errors","communication");
x.t("modified","data");
x.t("support","64-bit");
x.t("change","source");
x.t("change","fingerprint");
x.t("change","change");
x.t("fact","collisions");
x.t("gw.util.streamutil.tobytes","(s)");
x.t("time","recompute");
x.t("cious","attacker");
x.t("attacker","modify");
x.t("syncing","algorithms");
x.t("external","system");
x.t("ba","hello");
x.t("16","characters");
x.t("16","(hexadecimal)");
x.t("calls","together");
x.t("recompute","checksum");
x.t("cached","copy");
x.t("bound","probability");
x.t("inside","fingerprint");
x.t("total","length");
x.t("channel","aware");
x.t("protect","against");
x.t("detect","intentional");
x.t("guidewire","provides");
x.t("original","fingerprint");
x.t("original","new");
x.t("original","string");
x.t("original","idea");
x.t("no-argument","method");
x.t("link","directly");
x.t("new","fp64");
x.t("new","checksum");
x.t("new","bytearrayinputstream");
x.t("new","stringbuffer");
x.t("objects","example");
x.t("objects","given");
x.t("objects","character");
x.t("distinct","strings");
x.t("signature","takes");
x.t("start","position");
x.t("want","copy");
x.t("block","digital");
x.t("guard","against");
x.t("(f)","output");
x.t("chain","method");
x.t("messsage","gosu");
x.t("need","level");
x.t("resync","data");
x.t("upper","bound");
x.t("s1","s2");
x.t("transit","checksums");
x.t("s2",".equals");
x.t("s2","means");
x.t("s2","using");
x.t(".equals","new");
x.t(".getbytes","var");
x.t("guide","checksums");
x.t("check","integrity");
x.t("check","whether");
x.t("bits","fingerprint");
x.t("due","shorter");
x.t("(original)","//");
x.t("overview","checksums");
x.t("nm","practical");
x.t("duplicate","fingerprint");
x.t("duplicate","original");
x.t("sure","change");
x.t("directly","page");
x.t("directly","in-place");
x.t("ssl/https","warning");
x.t("byte","arrays");
x.t("byte","array");
x.t("guarantee","defines");
x.t("guarantee","invalid");
x.t("texts","million");
x.t("million","characters");
x.t("desired","series");
x.t("true","new");
x.t("text_val.focus","text_val.select");
x.t("stored","checksum");
x.t("creating","fingerprints");
x.t("[1]","[2]");
x.t("resulting","fp64");
x.t("gosu","reference");
x.t("communication","channel");
x.t("changed","last");
x.t("changed","data");
x.t("constructor","fp64");
x.t("constructor","duplicate");
x.t("constructor","pass");
x.t("char","[0]");
x.t("padded","leading");
x.t("mali","cious");
x.t("bytes","fingerprint");
x.t("bytes","alternatively");
x.t("bytes","produced");
x.t("bytes","characters");
x.t("bytes","instead");
x.t("bytes","end");
x.t("bytes","buffer");
x.t("base","16");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("provides","support");
x.t("provides","methods");
x.t("methods","computing");
x.t("methods","tobytes");
x.t("methods","extending");
x.t("parameters","start");
x.t("alternatively","method");
x.t("useful","sure");
x.t("intentional","corruption");
x.t("determine","resync");
x.t("checksums","improve");
x.t("checksums","overview");
x.t("checksums","checksum");
x.t("checksums","fingerprints");
x.t("checksums","addition");
x.t("checksums","function");
x.t("checksums","cannot");
x.t("checksums","match");
x.t("checksums","class");
x.t("modification","data");
x.t("arrays","byte");
x.t("arrays","input");
x.t("strings","having");
x.t("strings","fingerprint");
x.t("strings","characters");
x.t("produced","mathe");
x.t("writes","bytes");
x.t("encoded","base");
x.t("appending","known");
x.t("concatenation","two");
x.t("destructive","words");
x.t("checksum","modified");
x.t("checksum","checksums");
x.t("checksum","computed");
x.t("checksum","value");
x.t("checksum","compare");
x.t("integrity","data");
x.t("fingerprints","uniquely");
x.t("fingerprints","provide");
x.t("fingerprints","create");
x.t("fingerprints","design");
x.t("fingerprints","theoretically");
x.t("fingerprints","following");
x.t("fingerprints","class");
x.t("fingerprints","compare");
x.t("fingerprints","odds");
x.t("string","variables");
x.t("string","objects");
x.t("string","string");
x.t("string","produces");
x.t("string","data");
x.t("string","object");
x.t("mathe","matical");
x.t("implies","new");
x.t("tohexstring","method");
x.t("tohexstring","due");
x.t("shorter","length");
x.t("array","example");
x.t("array","bytes");
x.t("array","var");
x.t("array","buffer");
x.t("bytearrayinputstream","gw.util.streamutil.tobytes");
x.t("addition","checksums");
x.t("input","stream");
x.t("input","streams");
x.t("chosen","texts");
x.t("characters","useful");
x.t("characters","array");
x.t("characters","long");
x.t("characters","extending");
x.t("extra","parameters");
x.t("stream","var");
x.t("small","odds");
x.t("unexpected","collisions");
x.t(".bytes","//");
x.t("error","occurred");
x.t("mathematical","upper");
x.t("raw","bytes");
x.t("supported","objects");
x.t("equivalent","fingerprint");
x.t("occurs","two");
x.t("suppose","distinct");
x.t("[3]","[4]");
x.t("long","less");
x.t("long","odds");
x.t("means","following");
x.t("guidewire_selectall","var");
x.t("computed","value");
x.t("number","bits");
x.t("s1.equals","(s2)");
x.t("(ca)","note");
x.t("newly-allocated","array");
x.t("function","guidewire_selectall");
x.t("technique","help");
x.t("design","caching");
x.t("essence","fingerprint");
x.t("equation","number");
x.t("length","fingerprint");
x.t("length","16");
x.t("length","desired");
x.t("length","least");
x.t("cannot","detect");
x.t("cannot","perfectly");
x.t("against","intentional");
x.t("against","malicious");
x.t("whether","data");
x.t("idea","michael");
x.t("different","strings");
x.t("words","fingerprint");
x.t("words","modify");
x.t("may","lead");
x.t("accidental","modification");
x.t("arbitrary","block");
x.t("almost","certainly");
x.t("aware","checksums");
x.t("instead","no-argument");
x.t("instead","checksums");
x.t("match","data");
x.t("transport","level");
x.t("transport","substitute");
x.t("changes","encryption");
x.t("real-world","change");
x.t("trillion","suppose");
x.t("perfectly","protect");
x.t("algorithms","check");
x.t("(s2)","fingerprint");
x.t("(s2)","s1.equals");
x.t("(s2)","operations");
x.t("reference","guide");
x.t("cryptographic","hash");
x.t("invalid","may");
x.t("end","original");
x.t("level","ssl/https");
x.t("level","cryptographic");
x.t("level","protection");
x.t("identifies","data");
x.t("collision","occurs");
x.t("collision","collision");
x.t("collision","extremely");
x.t("collision","two");
x.t("return","resulting");
x.t("given","two");
x.t("mean","implies");
x.t("least","bytes");
x.t("known","series");
x.t("produces","fingerprint");
x.t("effectively","fingerprint");
x.t("randomly","chosen");
x.t("identifying","bytes");
x.t("extending","fingerprint");
x.t("extending","fingerprints");
x.t("extending","existing");
x.t(".extend","(foo)");
x.t(".extend","(s2)");
x.t(".extend","(92)");
x.t("together","following");
x.t("occurred","messsage");
x.t("encryption","instead");
x.t("encryption","data");
x.t("michael","rabin");
x.t("extremely","small");
x.t("less","trillion");
x.t("zeros","total");
x.t("existing","fingerprint");
x.t("value","fingerprint");
x.t("value","raw");
x.t("value","depending");
x.t("value","generated");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("malicious","changes");
x.t("malicious","agent");
x.t("depending","transport");
x.t("64-bit","checksums");
x.t("64-bit","fingerprints");
x.t("implementation","based");
x.t("generated","arbitrary");
x.t("generate","fingerprint");
x.t("generate","output");
x.t("substitute","new");
x.t("although","fact");
x.t("notation","given");
x.t("hello",".getbytes");
x.t("hello",".bytes");
x.t("hello","world");
x.t("hello","var");
x.t("(s)","example");
x.t("(s)","var");
x.t("ca","char");
x.t("[0]","[1]");
x.t("takes","byte");
x.t("takes","extra");
x.t("f2","new");
x.t("page","error");
x.t("help","detection");
x.t("corruption","errors");
x.t("corruption","malicious");
x.t("purposes","although");
x.t("purposes","treat");
x.t("output","fp64");
x.t("output","data");
x.t("stringbuffer","(g)");
x.t("data","preserve");
x.t("data","finger");
x.t("data","later");
x.t("data","inside");
x.t("data","guard");
x.t("data","transit");
x.t("data","check");
x.t("data","changed");
x.t("data","appending");
x.t("data","fingerprints");
x.t("data","string");
x.t("data","cannot");
x.t("data","almost");
x.t("data","level");
x.t("data","extending");
x.t("data","corruption");
x.t("data","work");
x.t("data","practical");
x.t("data","matching");
x.t("detection","physical");
x.t("detection","accidental");
x.t("certainly","altered");
x.t("agent","need");
x.t("agent","mali");
x.t("protection","encryption");
x.t("save","fingerprint");
x.t("treat","fingerprints");
x.t("(g)","example");
x.t("character","arrays");
x.t("character","array");
x.t("described","following");
x.t("print","fp64");
x.t("near-certainty","real-world");
x.t("two","string");
x.t("two","different");
x.t("two","randomly");
x.t("note","alternate");
x.t("integer","encoded");
x.t("(hexadecimal)","padded");
x.t("copy","fingerprint");
x.t("copy","external");
x.t("copy","new");
x.t("copy","save");
x.t("copy","var");
x.t("work","effectively");
x.t("algorithm","provide");
x.t("practical","purposes");
x.t("based","original");
x.t("itself","probabilistic");
x.t("byes","array");
x.t("package","gw.util.fingerprint");
x.t("either","intentionally");
x.t("caching","syncing");
x.t("system","generate");
x.t("theoretically","possible");
x.t("following","kinds");
x.t("following","new");
x.t("following","true");
x.t("following","equation");
x.t("probability","collision");
x.t("warning","checksums");
x.t("class","fp64");
x.t("class","provides");
x.t("using","64-bit");
x.t("using","symbol");
x.t("symbol","mean");
x.t("[2]","[3]");
x.t("//","duplicate");
x.t("//","hello");
x.t("compare","stored");
x.t("compare","determine");
x.t("collisions","creating");
x.t("collisions","changed");
x.t("andrei","broder");
x.t("pass","fp64");
x.t("pass","supported");
x.t("series","bytes");
x.t("series","characters");
x.t("series","byes");
x.t("returns","fingerprint");
x.t("returns","value");
x.t("modify","fingerprint");
x.t("modify","data");
x.t("gw.util.fingerprint","fp64");
x.t("rabin","refinements");
x.t("operations","return");
x.t("operations","extending");
x.t("(92)","want");
x.t("world","var");
x.t("var","testinputstreamconstructor");
x.t("var","ba");
x.t("var","original");
x.t("var","new");
x.t("var","text_val=eval");
x.t("var","hello");
x.t("var","ca");
x.t("var","f2");
x.t("var","copy");
x.t("passing","fp64");
x.t("passing","byte");
x.t("passing","string");
x.t("passing","stream");
x.t("passing","input");
x.t("passing","character");
x.t("position","length");
x.t("unsigned","integer");
x.t("in-place","operations");
x.t("broder","fingerprints");
x.t("odds","collision");
x.t("odds","two");
x.t("buffer","method");
x.t("buffer","length");
x.t("matching","fingerprints");
x.t("streams","implementation");
x.t("matical","notation");
x.t("object","chain");
x.t("object","directly");
x.t("object","constructor");
x.t("object","copy");
x.t("object","pass");
x.t("object","var");
}
