function FileData_Pairs(x)
{
x.t("example","boolean");
x.t("example","given");
x.t("example","consider");
x.t("if-true","clause");
x.t("looks","types");
x.t("properties","methods");
x.t("creation","gosu");
x.t("version","doing");
x.t("syntactically","right-associative");
x.t("doing","change");
x.t("lowest","down");
x.t("ancestors","common");
x.t("conditional","ternary");
x.t("conditional","expression");
x.t("uses","boolean");
x.t("expr1","expr2");
x.t("expr1","condition");
x.t("text_val.select","link");
x.t("expr2","gosu");
x.t("expr2","condition");
x.t("likewise","gosu");
x.t("statement","var");
x.t("evaluates","false");
x.t("evaluates","true");
x.t("evaluates","second");
x.t("evaluates","first");
x.t("evaluates","f:g");
x.t("type","if-true");
x.t("type","looks");
x.t("type","lowest");
x.t("type","boxed");
x.t("type","hierarchy");
x.t("type","however");
x.t("type","compound");
x.t("type","int");
x.t("type","logical");
x.t("type","detailed");
x.t("type","result");
x.t("boxed","subclass");
x.t("change","example");
x.t("evaluate","logical");
x.t("d:e","f:g");
x.t("hierarchy","ternary");
x.t("hierarchy","types");
x.t("however","true");
x.t("down","type");
x.t("coerces","primitive");
x.t("coerces","boolean");
x.t("primitive","type");
x.t("link","directly");
x.t("details","boolean");
x.t("==","true");
x.t("someconditon","hello");
x.t("messsage","gosu");
x.t("operands","following");
x.t("ternary","expressions");
x.t("ternary","clause");
x.t("ternary","operator");
x.t("guide","gosu");
x.t("false","type");
x.t("false","==");
x.t("false","false");
x.t("false","true");
x.t("false","examples");
x.t("false","clause");
x.t("directly","page");
x.t("true","likewise");
x.t("true","type");
x.t("true","false");
x.t("true","clause");
x.t("text_val.focus","text_val.select");
x.t("no","ancestors");
x.t("common","ancestor");
x.t("common","compile-time");
x.t("coercions","result");
x.t("gosu","coerces");
x.t("gosu","compound");
x.t("gosu","short-circuits");
x.t("gosu","operators");
x.t("gosu","reference");
x.t("gosu","runs");
x.t("b:c","d:e");
x.t("ancestor","type");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("boolean","coerces");
x.t("boolean","no");
x.t("boolean","gosu");
x.t("boolean","logic");
x.t("boolean","value");
x.t("compatible","type");
x.t("methods","call");
x.t("find","common");
x.t("compound","type");
x.t("compound","types");
x.t("decide","two");
x.t("third","operands");
x.t("short-circuits","evaluation");
x.t("int","boolean");
x.t("second","third");
x.t("second","expression");
x.t("result-if-true","result-if-false");
x.t("error","occurred");
x.t("logic","evaluation");
x.t("operators","uses");
x.t("operators","expressions");
x.t("logical","expressions");
x.t("logical","operator");
x.t("syntax","expression");
x.t("explanation","special");
x.t("means","groups");
x.t("first","expression");
x.t("guidewire_selectall","var");
x.t("cause","creation");
x.t("function","guidewire_selectall");
x.t("right-to-left","b:c");
x.t("expressions","conditional");
x.t("expressions","evaluates");
x.t("expressions","evaluate");
x.t("expressions","details");
x.t("expressions","ternary");
x.t("expressions","function");
x.t("different","types");
x.t("combination","types");
x.t("may","affect");
x.t("detailed","explanation");
x.t("types","example");
x.t("types","find");
x.t("types","clauses");
x.t("types","result");
x.t("important","note");
x.t("reference","guide");
x.t("groups","right-to-left");
x.t("return","different");
x.t("given","following");
x.t("affect","coercions");
x.t("right-associative","means");
x.t("occurred","messsage");
x.t("consider","following");
x.t("value","expression");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("condition","expr1");
x.t("condition","evaluates");
x.t("condition","expressions");
x.t("if-false","clause");
x.t("expression","expr1");
x.t("expression","expr2");
x.t("expression","type");
x.t("expression","decide");
x.t("expression","result-if-true");
x.t("expression","operators");
x.t("expression","condition");
x.t("expression","result");
x.t("evaluation","syntax");
x.t("evaluation","expressions");
x.t("runs","evaluates");
x.t("hello","false");
x.t("clauses","either");
x.t("although","compile-time");
x.t("page","error");
x.t("compile-time","type");
x.t("examples","expression");
x.t("result","properties");
x.t("result","type");
x.t("result","true");
x.t("result","combination");
x.t("result","expression");
x.t("result","note");
x.t("result","object");
x.t("two","expressions");
x.t("note","may");
x.t("note","although");
x.t("subclass","object");
x.t("call","result");
x.t("following","conditional");
x.t("following","statement");
x.t("following","compatible");
x.t("clause","primitive");
x.t("clause","false");
x.t("clause","cause");
x.t("clause","return");
x.t("clause","if-false");
x.t("clause","result");
x.t("either","clause");
x.t("special","type");
x.t("result-if-false","gosu");
x.t("operator","example");
x.t("operator","syntactically");
x.t("var","someconditon");
x.t("var","text_val=eval");
x.t("f:g","evaluates");
x.t("f:g","second");
x.t("object","version");
x.t("object","important");
}
