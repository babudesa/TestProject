function FileData_Pairs(x)
{
x.t("statements","statements");
x.t("statements","example");
x.t("statements","else");
x.t("statements","statement");
x.t("statements","do...while");
x.t("statements","gosu");
x.t("statements","three");
x.t("statements","commonly");
x.t("statements","switch");
x.t("statements","similar");
x.t("statements","expression");
x.t("statements","note");
x.t("example","//this");
x.t("example","==");
x.t("example","prints");
x.t("example","iterates");
x.t("example","switch");
x.t("example","100");
x.t("example","//");
x.t("equal","equal");
x.t("equal","improve");
x.t("equal","==");
x.t("particularly","valuable");
x.t("zero-based","index");
x.t(".iterator","example");
x.t(".iterator","print");
x.t("label","default");
x.t("else","statements");
x.t("else","statement");
x.t("else","==");
x.t("else","block");
x.t("else","print");
x.t("method","iteration");
x.t("method","specify");
x.t("illustrate","different");
x.t("properties","using");
x.t("downcasting","details");
x.t("terminating","last");
x.t("claim","properties");
x.t("rather","case");
x.t("five","strordinalname");
x.t("nine","strordinalname");
x.t("within","block");
x.t("within","gosu");
x.t("lists","arrays");
x.t("iteration","statements");
x.t("iteration","type");
x.t("iteration","need");
x.t("iteration","iterate");
x.t("iteration","automatic");
x.t("iteration","index");
x.t("iteration","100");
x.t("iteration","examples");
x.t("iteration","starts");
x.t("iteration","using");
x.t("iteration","object");
x.t("nothing","statement");
x.t("implement","default");
x.t("green","mapcolorsbyname.put");
x.t("green","blue");
x.t("course","action");
x.t("10","switch");
x.t("10","print");
x.t("once","evaluates");
x.t("once","(initially)");
x.t("eight","strordinalname");
x.t("constructions","perform");
x.t("improve","readability");
x.t("//this","example");
x.t("//this","particular");
x.t("java.util.hashmap","mapcolorsbyname.put");
x.t("action","statement");
x.t("action","multiple");
x.t("action","principal");
x.t("action","expression");
x.t("skips","default");
x.t("execute","accompanying");
x.t("conditional","execution");
x.t("uses","multi-part");
x.t("uses","boolean");
x.t("uses","result");
x.t("uses","following");
x.t("program","flow");
x.t("until","terminating");
x.t("until","finds");
x.t("until","gosu");
x.t("until","expression");
x.t("last","case");
x.t("last","member");
x.t("highindex","return");
x.t("highindex","score");
x.t("highindex","//result");
x.t("[highindex]","highindex");
x.t("text_val.select","link");
x.t("statement","example");
x.t("statement","else");
x.t("statement","statement");
x.t("statement","execution");
x.t("statement","do...while");
x.t("statement","block");
x.t("statement","need");
x.t("statement","continues");
x.t("statement","list");
x.t("statement","no");
x.t("statement","ends");
x.t("statement","automatic");
x.t("statement","syntax");
x.t("statement","instead");
x.t("statement","scope");
x.t("statement","switch");
x.t("statement","although");
x.t("statement","expression");
x.t("statement","optional");
x.t("statement","following");
x.t("statement","break");
x.t("type","particularly");
x.t("type","iteration");
x.t("type","checking");
x.t("type","expressions");
x.t("type","subtype");
x.t("basic","type");
x.t("times","variable");
x.t("evaluates","false");
x.t("evaluates","switch");
x.t("evaluates","condition");
x.t("evaluates","expression");
x.t("best","implement");
x.t("evaluate","true");
x.t("evaluate","expression");
x.t("evaluate","following");
x.t("initially","false");
x.t("initially","true");
x.t("execution","continues");
x.t("execution","next");
x.t("execution","looping");
x.t("however","gosu");
x.t("however","cases");
x.t("multiple","choices");
x.t("multiple","case");
x.t("sections","omit");
x.t("sections","switch");
x.t("automatically","array");
x.t("automatically","downcasts");
x.t("original","type");
x.t("guidewire","recommends");
x.t("property","statements");
x.t("property","claim.typeinfo.properties");
x.t("property","var");
x.t("default","rather");
x.t("default","statement");
x.t("default","[statementlistdefault]");
x.t("default","strordinalname");
x.t("default","case");
x.t("[break]","default");
x.t("[break]","case");
x.t("fifth","break");
x.t("link","directly");
x.t("==","==");
x.t("==","print");
x.t("details","basic");
x.t("details","using");
x.t("element","array");
x.t("access","members");
x.t("new","java.util.hashmap");
x.t("new","number");
x.t("new","java.awt.color");
x.t("objects","additional");
x.t("do...while","statement");
x.t("do...while","block");
x.t("block","within");
x.t("block","once");
x.t("block","action");
x.t("block","uses");
x.t("block","evaluates");
x.t("block","block");
x.t("block","continues");
x.t("block","changed");
x.t("block","means");
x.t("block","instead");
x.t("block","code");
x.t("block","similar");
x.t("block","repeatedly");
x.t("block","optional");
x.t("block","//example");
x.t("block","executes");
x.t("block","itself");
x.t("block","causes");
x.t("color","mapcolorsbyname.values");
x.t("color","values");
x.t("color","//result");
x.t("messsage","gosu");
x.t("need","determine");
x.t("need","casting");
x.t("list","statement");
x.t("list","times");
x.t("list","sections");
x.t("list","block");
x.t("list","array");
x.t("list","characters");
x.t("list","members");
x.t("list","technique");
x.t("list","java");
x.t("list","non-sequential");
x.t("continues","until");
x.t("continues","statement");
x.t("continues","next");
x.t("continues","sequentially");
x.t("fashion","using");
x.t("mapcolorsbyname","new");
x.t("found","exposure");
x.t("finds","match");
x.t("recommends","statement");
x.t("89","99");
x.t("guide","statements");
x.t("iterator","method");
x.t("iterator","string");
x.t("iterator","using");
x.t("results","find");
x.t("simple","iteration");
x.t("[statementlist1]","[break]");
x.t("mapcolorsbyname.put","new");
x.t("reflection","property");
x.t("false","gosu");
x.t("false","determine");
x.t("false","point");
x.t("false","previous");
x.t("directly","page");
x.t("test","scores");
x.t("true","false");
x.t("true","gosu");
x.t("handle","unexpected");
x.t("text_val.focus","text_val.select");
x.t("no","case");
x.t("gosu","skips");
x.t("gosu","execute");
x.t("gosu","conditional");
x.t("gosu","uses");
x.t("gosu","evaluates");
x.t("gosu","evaluate");
x.t("gosu","automatically");
x.t("gosu","continues");
x.t("gosu","tests");
x.t("gosu","provides");
x.t("gosu","structures");
x.t("gosu","iterates");
x.t("gosu","language");
x.t("gosu","exits");
x.t("gosu","reference");
x.t("gosu","code");
x.t("gosu","encounters");
x.t("gosu","implicitly");
x.t("gosu","confirms");
x.t("gosu","executes");
x.t("iterate","automatically");
x.t("iterate","members");
x.t("changed","expression");
x.t("ends","gosu");
x.t("perform","program");
x.t("multi-part","construction");
x.t("construction","else");
x.t("construction","default");
x.t("construction","syntax");
x.t("testscores","new");
x.t("testscores","function");
x.t("iterating","list");
x.t("iterating","members");
x.t("tests","expression");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("checking","statements");
x.t("provides","backwards");
x.t("methods","iterating");
x.t("boolean","property");
x.t("boolean","result");
x.t("prior","executing");
x.t("exists","default");
x.t("determine","next");
x.t("determine","index");
x.t("determine","exact");
x.t("find","expressions");
x.t("omit","break");
x.t("typeis","expression");
x.t("arrays","details");
x.t("arrays","accessing");
x.t("map","var");
x.t("array","list");
x.t("array","iterator");
x.t("array","test");
x.t("array","java");
x.t("array","notation");
x.t("array","integer");
x.t("array","contained");
x.t("string","list");
x.t("exposure","coverage");
x.t("third","break");
x.t("flow","else");
x.t("structures","within");
x.t("structures","switch");
x.t("characters","java-based");
x.t("three","ways");
x.t("three","strordinalname");
x.t("prints","claim");
x.t("prints","index");
x.t("prints","letters");
x.t("prints","numbers");
x.t("prints","var");
x.t("coverage","//othercoverage");
x.t("coverage","//");
x.t("second","break");
x.t("...in","statement");
x.t("unexpected","conditions");
x.t("ninth","break");
x.t("error","occurred");
x.t("downcasts","typeis");
x.t("downcasts","object");
x.t("backwards","compatibility");
x.t("point","gosu");
x.t("choices","gosu");
x.t("[statementlistdefault]","example");
x.t("syntax","statements");
x.t("syntax","switch");
x.t("syntax","identifier");
x.t("syntax","expression");
x.t("syntax","member");
x.t("members","iteration");
x.t("members","list");
x.t("members","array");
x.t("members","using");
x.t("automatic","iteration");
x.t("red","green");
x.t("red","mapcolorsbyname.put");
x.t("next","course");
x.t("next","statement");
x.t("next","case");
x.t("collection","java");
x.t("first","exposure");
x.t("first","break");
x.t("executing","statement");
x.t("means","statements");
x.t("guidewire_selectall","var");
x.t("iterates","color");
x.t("iterates","list");
x.t("iterates","case");
x.t("number","number");
x.t("number","91");
x.t("number","var");
x.t("control","statement");
x.t("eighth","break");
x.t("function","guidewire_selectall");
x.t("function","getindexofhighestscore");
x.t("commonly","used");
x.t("java-based","lists");
x.t("technique","adds");
x.t("mapcolorsbyname.values",".iterator");
x.t("expressions","subtype");
x.t("expressions","order");
x.t("expressions","using");
x.t("particular","example");
x.t("particular","element");
x.t("scores","//this");
x.t("scores","[highindex]");
x.t("scores","number");
x.t("scores","index");
x.t("different","methods");
x.t("[statementlistn]","[break]");
x.t("looping","gosu");
x.t("looping","function");
x.t("language","block");
x.t("foreach","statement");
x.t("instead","prior");
x.t("instead","...in");
x.t("index","example");
x.t("index","iteration");
x.t("index","iterator");
x.t("index","determine");
x.t("index","index");
x.t("index","identifier");
x.t("index","value");
x.t("index","score");
x.t("index","loopcount");
x.t("index","highest");
x.t("index","print");
x.t("index","var");
x.t("accessing","list");
x.t("ways","iterate");
x.t("casting","type");
x.t("getindexofhighestscore","testscores");
x.t("getindexofhighestscore","scores");
x.t("exp","claim.exposures");
x.t("exp.othercoverage","print");
x.t("exits","statement");
x.t("exits","do...while");
x.t("match","case");
x.t("accompanying","statement");
x.t("section","label");
x.t("switch","statements");
x.t("switch","within");
x.t("switch","statement");
x.t("switch","expression");
x.t("switch","strdigitname");
x.t("scope","identifier");
x.t("initial","member");
x.t("explicit","index");
x.t("reference","guide");
x.t("code","details");
x.t("code","gosu");
x.t("code","bounded");
x.t("code","several");
x.t("identifier","statement");
x.t("identifier","expression");
x.t("identifier","limited");
x.t("sequentially","until");
x.t("adds","explicit");
x.t("75","97");
x.t("return","highindex");
x.t("gw.api.util.stringutil.splitwhitespace","index");
x.t("(initially)","expression");
x.t("bounded","statement");
x.t("bounded","switch");
x.t("least","within");
x.t("least","once");
x.t("100","property");
x.t("100","89");
x.t("100","print");
x.t("100","//");
x.t("claim.typeinfo.properties","automatic");
x.t("claim.typeinfo.properties","print");
x.t("exact","position");
x.t("message","first");
x.t("previous","case");
x.t("considers","variable\u2019s");
x.t("variable\u2019s","type");
x.t("java","list");
x.t("java","iterator");
x.t("java","collection");
x.t("variable","contains");
x.t("principal","difference");
x.t("encounters","break");
x.t("occurred","messsage");
x.t("obj","list");
x.t("obj","index");
x.t("obj","case");
x.t("non-sequential","fashion");
x.t("strordinalname","fifth");
x.t("strordinalname","third");
x.t("strordinalname","second");
x.t("strordinalname","ninth");
x.t("strordinalname","first");
x.t("strordinalname","eighth");
x.t("strordinalname","strdigitname");
x.t("th","improve");
x.t("similar","block");
x.t("similar","gosu");
x.t("value","default");
x.t("value","access");
x.t("value","equals");
x.t("additional","iteration");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("specific","subtype");
x.t("compatibility","foreach");
x.t("91","75");
x.t("validity","executing");
x.t("labeln","[statementlistn]");
x.t("several","special");
x.t("repeatedly","until");
x.t("condition","nothing");
x.t("expression","statements");
x.t("expression","example");
x.t("expression","uses");
x.t("expression","statement");
x.t("expression","type");
x.t("expression","evaluates");
x.t("expression","initially");
x.t("expression","evaluate");
x.t("expression","gosu");
x.t("expression","iterates");
x.t("expression","index");
x.t("expression","validity");
x.t("expression","becomes");
x.t("expression","case");
x.t("expression","clause");
x.t("subtype","original");
x.t("subtype","block");
x.t("subtype","gosu");
x.t("subtype","least");
x.t("subtype","case");
x.t("although","guidewire");
x.t("notation","iteration");
x.t("notation","specify");
x.t("score","array");
x.t("score","scores");
x.t("digits","var");
x.t("page","error");
x.t("transfer","control");
x.t("label1","[statementlist1]");
x.t("optional","however");
x.t("optional","syntax");
x.t("query","objects");
x.t("//example","prints");
x.t("//example","print");
x.t("claim.exposures","exp.othercoverage");
x.t("becomes","false");
x.t("equals","else");
x.t("equals","==");
x.t("equals","expression");
x.t("equals","equals");
x.t("loopcount","example");
x.t("examples","illustrate");
x.t("examples","following");
x.t("examples","using");
x.t("result","evaluate");
x.t("result","determine");
x.t("result","choose");
x.t("strdigitname","th");
x.t("strdigitname","case");
x.t("implicitly","considers");
x.t("case","five");
x.t("case","nine");
x.t("case","eight");
x.t("case","last");
x.t("case","sections");
x.t("case","list");
x.t("case","handle");
x.t("case","gosu");
x.t("case","exists");
x.t("case","three");
x.t("case","syntax");
x.t("case","expressions");
x.t("case","section");
x.t("case","obj");
x.t("case","strordinalname");
x.t("case","value");
x.t("case","labeln");
x.t("case","label1");
x.t("case","case");
x.t("case","two");
x.t("highest","score");
x.t("97","100");
x.t("values","map");
x.t("blue","color");
x.t("blue","examples");
x.t("letter","gw.api.util.stringutil.splitwhitespace");
x.t("letter","//example");
x.t("letter","letter");
x.t("//othercoverage","boolean");
x.t("print","equal");
x.t("print","statements");
x.t("print","10");
x.t("print","property");
x.t("print","color");
x.t("print","found");
x.t("print","getindexofhighestscore");
x.t("print","message");
x.t("print","100");
x.t("print","digits");
x.t("print","equals");
x.t("print","letter");
x.t("confirms","object");
x.t("java.awt.color","green");
x.t("java.awt.color","red");
x.t("java.awt.color","blue");
x.t("choose","course");
x.t("readability","gosu");
x.t("note","gosu");
x.t("integer","gosu");
x.t("integer","integer");
x.t("99","print");
x.t("99","using");
x.t("executes","statements");
x.t("executes","statement");
x.t("executes","multiple");
x.t("executes","least");
x.t("two","strordinalname");
x.t("itself","expression");
x.t("letters","index");
x.t("cases","best");
x.t("cases","turn");
x.t("valuable","statements");
x.t("numbers","99");
x.t("causes","expression");
x.t("order","until");
x.t("following","constructions");
x.t("following","statement");
x.t("following","array");
x.t("following","syntax");
x.t("following","examples");
x.t("used","statement");
x.t("clause","evaluate");
x.t("contained","statement");
x.t("starts","initial");
x.t("break","statement");
x.t("break","default");
x.t("break","case");
x.t("break","//");
x.t("special","cases");
x.t("turn","downcasting");
x.t("using","lists");
x.t("using","results");
x.t("using","iterator");
x.t("using","simple");
x.t("using","reflection");
x.t("using","array");
x.t("using","query");
x.t("using","following");
x.t("//","example");
x.t("//","transfer");
x.t("//","print");
x.t("limited","statement");
x.t("member","continues");
x.t("member","obj");
x.t("member","specify");
x.t("member","object");
x.t("var","10");
x.t("var","highindex");
x.t("var","mapcolorsbyname");
x.t("var","testscores");
x.t("var","text_val=eval");
x.t("var","exp");
x.t("var","letter");
x.t("var","print");
x.t("position","particular");
x.t("//result","iterator");
x.t("//result","red");
x.t("conditions","syntax");
x.t("object",".iterator");
x.t("object","iterating");
x.t("object","typeis");
x.t("object","specific");
x.t("specify","type");
x.t("contains","zero-based");
x.t("difference","however");
}
