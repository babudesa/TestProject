function FileData_Pairs(x)
{
x.t("example","multiple");
x.t("example","combines");
x.t("example","secondary");
x.t("example","suppose");
x.t("example","database");
x.t("example","imagine");
x.t("example","call");
x.t("example","using");
x.t("searching","want");
x.t("complex","queries");
x.t("[hello]","select");
x.t("columns","database");
x.t("columns","representing");
x.t("properties","exist");
x.t("exist","table");
x.t("method","method");
x.t("method","variants");
x.t("method","signature");
x.t("method","forward");
x.t("method","subselect");
x.t("method","perform");
x.t("method","first");
x.t("method","different");
x.t("method","end");
x.t("method","reduces");
x.t("method","two-parameter");
x.t("method","actually");
x.t("method","defined");
x.t("method","signatures");
x.t("method","following");
x.t("method","general");
x.t("method","returns");
x.t("method","generally");
x.t("possible","example");
x.t("chaining","chaining");
x.t("chaining","methods");
x.t("values=","[hello]");
x.t("values=","select");
x.t("right","hand");
x.t("just","add");
x.t("just","previous");
x.t("building","up");
x.t("pattern","called");
x.t("restriction","class");
x.t("rare","cases");
x.t("version","column");
x.t("every","situation");
x.t("implement","interface");
x.t("cc_samplechild","qroots0");
x.t("cc_parent","qroot");
x.t("table","example");
x.t("table","table");
x.t("table","foreign");
x.t("table","people");
x.t("table","conceptually");
x.t("table","joined");
x.t("table","forward");
x.t("table","name");
x.t("table","secondary");
x.t("table","inner");
x.t("table","determine");
x.t("table","outer");
x.t("table","represents");
x.t("table","outerjoin");
x.t("table","match");
x.t("table","important");
x.t("table","successfully");
x.t("table","database");
x.t("table","null");
x.t("table","specific");
x.t("table","information");
x.t("table","query");
x.t("table","join");
x.t("table","called");
x.t("table","classes");
x.t("table","joins");
x.t("table","reverse");
x.t("table","links");
x.t("table","following");
x.t("table","containing");
x.t("table","compares");
x.t("table","child");
x.t("table","including");
x.t("table","even");
x.t("table","contains");
x.t("refer","people");
x.t("refer","entity");
x.t("refer","following");
x.t("question","table");
x.t("subtleties","database");
x.t("situation","different");
x.t("create","single");
x.t("create","sql");
x.t("qroot.e","qroot.e");
x.t("qroot.e","select");
x.t("key","link");
x.t("key","secondary");
x.t("key","unique");
x.t("key","subobject");
x.t("key","links");
x.t("course","write");
x.t("having","part");
x.t("always","minimize");
x.t("beans","cc_sampleparent");
x.t("negation","variant");
x.t("foreign","key");
x.t("foreign","defined");
x.t("action","directly");
x.t("arguments","following");
x.t("arguments","pass");
x.t("tables","want");
x.t("tables","gosu");
x.t("tables","sake");
x.t("tables","query.subselect");
x.t("tables","linking");
x.t("tables","query");
x.t("tables","defined");
x.t("tables","using");
x.t("tables","restrictions");
x.t("try","multiple");
x.t("field","objects");
x.t("field","following");
x.t("qroots0","qroots0.eid");
x.t("qroots0","qroots0.textfield1");
x.t("qroots0","qroots0.parentid");
x.t("text_val.select","link");
x.t("people","unique");
x.t("people","row");
x.t("contrasts","two");
x.t("necessary","always");
x.t("interface","tables");
x.t("interface","queries");
x.t("basic","queries");
x.t("basic","ways");
x.t("type","automatically");
x.t("type","samplechild");
x.t("type","direct");
x.t("type","inoperation");
x.t("type","database");
x.t("type","join");
x.t("type","sampleparent");
x.t("vary","different");
x.t("lots","results");
x.t("best","create");
x.t("hand","side");
x.t("time","pass");
x.t("dbfunction.count","child");
x.t("(2)","comparein");
x.t("(2)","information");
x.t("multiple","tables");
x.t("multiple","approaches");
x.t("multiple","queries");
x.t("multiple","database");
x.t("multiple","predicates");
x.t("multiple","child");
x.t("however","generally");
x.t("variants","subselect");
x.t("variants","simply");
x.t("sections","grouped");
x.t("qroot.id","select");
x.t("qroot.id","qroots0.textfield1");
x.t("entities","foreign");
x.t("entities","want");
x.t("entities","primary");
x.t("entities","child");
x.t("guidewire","recommends");
x.t("count","(qroots0.id)");
x.t("count","(id)");
x.t("count","constant");
x.t("automatically","compile");
x.t("back","parent");
x.t("property","key");
x.t("property","find");
x.t("property","value");
x.t("advanced","queries");
x.t("link","back");
x.t("link","directly");
x.t("link","secondary");
x.t("link","parent");
x.t("link","primary");
x.t("students","enrolled");
x.t("students","specific");
x.t("want","list");
x.t("want","results");
x.t("want","duplicate");
x.t("want","find");
x.t("want","matches");
x.t("want","entity");
x.t("items","inner");
x.t("items","outer");
x.t("speaking","method");
x.t("speaking","efficient");
x.t("signature","variants");
x.t("signature","following");
x.t("signature","including");
x.t("objects","tables");
x.t("objects","link");
x.t("objects","samplechild");
x.t("objects","subobjects");
x.t("objects","important");
x.t("objects","least");
x.t("new","query");
x.t("new","predicates");
x.t("single","query");
x.t("samplechild","subobjects");
x.t("samplechild","suppose");
x.t("samplechild","parent");
x.t("samplechild","subobject");
x.t("textfield1","property");
x.t("textfield1","value");
x.t("textfield1","equals");
x.t("choice","need");
x.t("conceptually","joins");
x.t("messsage","gosu");
x.t("combines","records");
x.t("combines","joins");
x.t("list","names");
x.t("need","first");
x.t("need","choose");
x.t("id","field");
x.t("id","property");
x.t("id","group");
x.t("id",".compare");
x.t("id","comparein");
x.t("id","person");
x.t("id","comparenotin");
x.t("id","or2.subselect");
x.t("id","produces");
x.t("id","constant");
x.t("id","column");
x.t("joined","table");
x.t("recommends","trying");
x.t("add","additional");
x.t("add","predicates");
x.t("add","two");
x.t("optimize","basic");
x.t("group","method");
x.t(".compare","textfield1");
x.t(".compare","equals");
x.t("guide","query");
x.t("university","table");
x.t("results","foreign");
x.t("results","primary");
x.t("results","join");
x.t("results","following");
x.t("api","method");
x.t("due","subtleties");
x.t("testing","join");
x.t("property1","query");
x.t("duplicate","rows");
x.t("property2","although");
x.t("\\or1-","or1.compare");
x.t("or1.compare","equals");
x.t("directly","new");
x.t("directly","page");
x.t("directly","call");
x.t("selective","words");
x.t("text_val.focus","text_val.select");
x.t("forward","join");
x.t("forward","joins");
x.t("no","link");
x.t("no","joins");
x.t("name","method");
x.t("name","joined");
x.t("name","column");
x.t("name","similarly");
x.t("operation","method");
x.t("operation","comparein");
x.t("operation","comparenotin");
x.t("operation","joining");
x.t("operation","column");
x.t("operation","pass");
x.t("gosu","provides");
x.t("gosu","reference");
x.t("gosu","adds");
x.t("gosu","query");
x.t("gosu","coercion");
x.t("subselect","method");
x.t("subselect","negation");
x.t("subselect","foreign");
x.t("subselect","operation");
x.t("subselect","boolean");
x.t("subselect","subobjects");
x.t("subselect","query");
x.t("subselect","join");
x.t("subselect","dbfunction.constant");
x.t("subselect","joins");
x.t("subselect","reverse");
x.t("optimizers","work");
x.t("performance","vary");
x.t("performance","testing");
x.t("performance","inner");
x.t("performance","query");
x.t("searches","table");
x.t("previously","defined");
x.t("query.make","(sampleparent)");
x.t("query.make","(teste)");
x.t("perform","subselect");
x.t("perform","better");
x.t("perform","query");
x.t("part","sql");
x.t("comparison","match");
x.t("direct","builder");
x.t("argument","operation");
x.t("argument","subselect");
x.t("argument","simply");
x.t("argument","containing");
x.t("ientitypropertyinfo","object");
x.t("enumeration","values");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("exists","tables");
x.t("exists","select");
x.t("exists","clause");
x.t("provides","two");
x.t("methods","create");
x.t("methods","subselect");
x.t("methods","return");
x.t("methods","defined");
x.t("methods","following");
x.t("methods","object");
x.t("secondary","table");
x.t("secondary","clause");
x.t("inner","query");
x.t("inner","join");
x.t("inner","joins");
x.t("boolean","algebra");
x.t("determine","method");
x.t("determine","type");
x.t("determine","real-world");
x.t("trying","approaches");
x.t("up","complex");
x.t("find","sampleparent");
x.t("\\and1-","and1.or");
x.t("records","multiple");
x.t("address","book");
x.t("decide","api");
x.t("search","entities");
x.t("easiest","optimize");
x.t("col0","cc_samplechild");
x.t("col0","cc_test_a");
x.t("algebra","following");
x.t("algebra","var");
x.t("q.and","\\and1-");
x.t("write","code");
x.t("write","join");
x.t("optimization","joins");
x.t("third","arguments");
x.t("third","argument");
x.t("string","version");
x.t("and1.or","\\or1-");
x.t("and1.or","\\or2-");
x.t("sake","documentation");
x.t("realistic","loads");
x.t("inoperation","query");
x.t("subobjects","example");
x.t("subobjects","type");
x.t("subobjects","subobject\u2019s");
x.t("enrolled","courses");
x.t("functions","example");
x.t("functions","columns");
x.t("functions","basic");
x.t("functions","either");
x.t("functions","pass");
x.t("(sampleparent)","q.subselect");
x.t("queries","implement");
x.t("queries","guidewire");
x.t("queries","first");
x.t("queries","subselects");
x.t("queries","together");
x.t("queries","information");
x.t("queries","examples");
x.t("queries","typically");
x.t("queries","operate");
x.t("queries","using");
x.t("error","occurred");
x.t("approaches","try");
x.t("approaches","performance");
x.t("approaches","realistic");
x.t("contrast","calling");
x.t("collect","predicates");
x.t("comparein","dbfunction.count");
x.t("comparein","samplechild");
x.t("comparein","parent");
x.t("comparein","comparenotin");
x.t("comparein","query");
x.t("query.subselect","id");
x.t("(teste)","q.and");
x.t("suppose","table");
x.t("suppose","want");
x.t("suppose","search");
x.t("suppose","parent");
x.t("suppose","query");
x.t("suppose","entity");
x.t("outer","join");
x.t("outer","joins");
x.t("outer","reverse");
x.t("loads","determine");
x.t("operators","perform");
x.t("involve","methods");
x.t("feature","called");
x.t("first","question");
x.t("first","determine");
x.t("first","third");
x.t("first","fourth");
x.t("select","cc_parent");
x.t("select","beans");
x.t("select","count");
x.t("select","qroots0.id");
x.t("select","qroots0.parentid");
x.t("subselects","joins");
x.t("guidewire_selectall","var");
x.t("side","join");
x.t("number","rows");
x.t("number","joins");
x.t("qroot","qroot.e");
x.t("qroot","qroot.id");
x.t("qroot","exists");
x.t("function","just");
x.t("function","dbfunction.count");
x.t("function","operation");
x.t("function","subselect");
x.t("function","select");
x.t("function","guidewire_selectall");
x.t("function","column");
x.t("function","pass");
x.t("parent","table");
x.t("parent","field");
x.t("parent","property");
x.t("parent","want");
x.t("parent","add");
x.t("parent",".compare");
x.t("parent","function");
x.t("parent","reverse");
x.t("parent","entity");
x.t("parent","child");
x.t("parent","object");
x.t("better","example");
x.t("maximum","performance");
x.t("unique","id");
x.t("person","unique");
x.t("person","consequently");
x.t("represents","students");
x.t("against","results");
x.t("whether","want");
x.t("different","method");
x.t("different","rare");
x.t("different","approaches");
x.t("different","cases");
x.t("outerjoin","method");
x.t("words","secondary");
x.t("combination","columns");
x.t("linking","using");
x.t("row","person");
x.t("ways","join");
x.t("instead","important");
x.t("accidental","duplicate");
x.t("(qroots0.id)","col0");
x.t("match","items");
x.t("match","results");
x.t("match","primary");
x.t("match","predicates");
x.t("match","associated");
x.t("real-world","performance");
x.t("types","objects");
x.t("returned","query");
x.t("compile","time");
x.t("q.subselect","id");
x.t("cc_sampleparent","qroot");
x.t("variant","previous");
x.t("important","building");
x.t("important","every");
x.t("important","queries");
x.t("important","join");
x.t("calling","comparison");
x.t("calling","predicate");
x.t("(id)","perform");
x.t("grouped","similar");
x.t("simply","pass");
x.t("reference","guide");
x.t("book","application");
x.t("susceptible","accidental");
x.t("rows","parent");
x.t("rows","returned");
x.t("rows","primary");
x.t("code","result");
x.t("end","type");
x.t("reduces","number");
x.t("comparenotin","example");
x.t("comparenotin","samplechild");
x.t("comparenotin","enumeration");
x.t("or2.subselect","dbfunction.constant");
x.t("primary","table");
x.t("return","duplicates");
x.t("return","two");
x.t("two-parameter","method");
x.t("adds","predicates");
x.t("database","tables");
x.t("database","optimizers");
x.t("database","functions");
x.t("database","function");
x.t("database","query");
x.t("matches","primary");
x.t("matches","discussion");
x.t("successfully","match");
x.t("previous","example");
x.t("previous","group");
x.t("least","samplechild");
x.t("produces","sql");
x.t("imagine","address");
x.t("documentation","refer");
x.t("together","best");
x.t("occurred","messsage");
x.t("null","outer");
x.t("null","reverse");
x.t("courses","university");
x.t("discussion","reducing");
x.t("fourth","arguments");
x.t("child\u2019s","textfield1");
x.t("qroots0.eid","qroot.id");
x.t("additional","argument");
x.t("additional","predicates");
x.t("value","hello");
x.t("value","column");
x.t("similar","method");
x.t("predicate","basic");
x.t("predicate","methods");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("consequently","column");
x.t("specific","course");
x.t("specific","value");
x.t("constant","functions");
x.t("constant","function");
x.t("constant","using");
x.t("already","defined");
x.t("builder","pattern");
x.t("builder","advanced");
x.t("actually","takes");
x.t("although","join");
x.t("subquery","queries");
x.t("takes","ientitypropertyinfo");
x.t("bfunction.constant","(2)");
x.t("hello","produces");
x.t("hello","following");
x.t("(3)","comparein");
x.t("page","error");
x.t("cc_test_a","qroots0");
x.t("query","method");
x.t("query","right");
x.t("query","table");
x.t("query","multiple");
x.t("query","however");
x.t("query","new");
x.t("query","add");
x.t("query","no");
x.t("query","searches");
x.t("query","previously");
x.t("query","secondary");
x.t("query","easiest");
x.t("query","optimization");
x.t("query","contrast");
x.t("query","against");
x.t("query","important");
x.t("query","adds");
x.t("query","database");
x.t("query","builder");
x.t("query","joining");
x.t("query","based");
x.t("query","call");
x.t("query","using");
x.t("query","var");
x.t("query","generates");
x.t("information","example");
x.t("information","tables");
x.t("information","database");
x.t("information","join");
x.t("duplicates","primary");
x.t("duplicates","duplicates");
x.t("duplicates","reverse");
x.t("iquerybuilder","interface");
x.t("iquerybuilder","using");
x.t("joining","query");
x.t("joining","column");
x.t("defined","restriction");
x.t("defined","secondary");
x.t("defined","methods");
x.t("defined","iquerybuilder");
x.t("defined","join");
x.t("defined","child");
x.t("examples","adding");
x.t("result","action");
x.t("equals","or1.compare");
x.t("equals","and1.or");
x.t("equals","hello");
x.t("equals","q.getcolumnref");
x.t("join","example");
x.t("join","method");
x.t("join","refer");
x.t("join","table");
x.t("join","tables");
x.t("join","entities");
x.t("join","want");
x.t("join","combines");
x.t("join","need");
x.t("join","add");
x.t("join","gosu");
x.t("join","subselect");
x.t("join","secondary");
x.t("join","decide");
x.t("join","maximum");
x.t("join","instead");
x.t("join","important");
x.t("join","susceptible");
x.t("join","two-parameter");
x.t("join","query");
x.t("join","two");
x.t("join","column");
x.t("join","joins");
x.t("join","using");
x.t("join","sql");
x.t("application","table");
x.t("recommendations","due");
x.t("predicates","having");
x.t("predicates","type");
x.t("predicates","single");
x.t("predicates","selective");
x.t("predicates","directly");
x.t("predicates","part");
x.t("predicates","calling");
x.t("predicates","clause");
x.t("predicates","altogether");
x.t("predicates","sql");
x.t("values","type");
x.t("dbfunction.constant","(2)");
x.t("dbfunction.constant","(3)");
x.t("qroots0.textfield1","subselect");
x.t("called","chaining");
x.t("called","table");
x.t("called","reverse");
x.t("called","sampleparent");
x.t("choose","whether");
x.t("reducing","duplicates");
x.t("intersect","operators");
x.t("efficient","collect");
x.t("subobject","child\u2019s");
x.t("subobject","entity");
x.t("subobject","links");
x.t("column","table");
x.t("column","foreign");
x.t("column","property1");
x.t("column","property2");
x.t("column","name");
x.t("column","exists");
x.t("column","suppose");
x.t("column","parent");
x.t("column","primary");
x.t("column","query");
x.t("column","join");
x.t("column","either");
x.t("column","child");
x.t("classes","refer");
x.t("two","tables");
x.t("two","basic");
x.t("two","methods");
x.t("two","queries");
x.t("two","types");
x.t("two","compare");
x.t("joins","just");
x.t("joins","table");
x.t("joins","necessary");
x.t("joins","multiple");
x.t("joins","advanced");
x.t("joins","choice");
x.t("joins","forward");
x.t("joins","gosu");
x.t("joins","subselect");
x.t("joins","methods");
x.t("joins","boolean");
x.t("joins","outer");
x.t("joins","function");
x.t("joins","return");
x.t("joins","query");
x.t("joins","join");
x.t("joins","intersect");
x.t("joins","two");
x.t("work","performance");
x.t("cases","using");
x.t("typically","involve");
x.t("optionally","write");
x.t("based","subquery");
x.t("qroots0.id","col0");
x.t("reverse","inner");
x.t("reverse","join");
x.t("reverse","joins");
x.t("operate","table");
x.t("call","subselect");
x.t("call","join");
x.t("call","compare");
x.t("order","column");
x.t("\\or2-","or2.subselect");
x.t("entity","searching");
x.t("entity","properties");
x.t("entity","type");
x.t("entity","want");
x.t("entity","link");
x.t("entity","secondary");
x.t("entity","match");
x.t("entity","called");
x.t("entity","entity");
x.t("entity","child");
x.t("links","table");
x.t("links","tables");
x.t("links","parent");
x.t("links","two");
x.t("following","example");
x.t("following","table");
x.t("following","arguments");
x.t("following","sections");
x.t("following","subselect");
x.t("following","ways");
x.t("following","query");
x.t("following","order");
x.t("clause","possible");
x.t("clause","operation");
x.t("clause","join");
x.t("clause","returns");
x.t("clause","sql");
x.t("signatures","method");
x.t("signatures","additional");
x.t("signatures","already");
x.t("either","argument");
x.t("either","comparein");
x.t("either","first");
x.t("qroots0.parentid","qroot.id");
x.t("qroots0.parentid","col0");
x.t("using","columns");
x.t("using","subselect");
x.t("using","function");
x.t("using","bfunction.constant");
x.t("using","information");
x.t("using","join");
x.t("using","sql");
x.t("containing","query");
x.t("containing","column");
x.t("compares","contrasts");
x.t("general","recommendations");
x.t("minimize","number");
x.t("class","subselect");
x.t("coercion","type");
x.t("similarly","first");
x.t("returns","lots");
x.t("returns","duplicates");
x.t("altogether","clause");
x.t("compare","predicate");
x.t("compare","predicates");
x.t("adding","multiple");
x.t("pass","columns");
x.t("pass","string");
x.t("pass","combination");
x.t("pass","database");
x.t("pass","column");
x.t("pass","either");
x.t("sql","values=");
x.t("sql","count");
x.t("sql","exists");
x.t("sql","feature");
x.t("sql","constant");
x.t("sql","query");
x.t("sql","join");
x.t("sql","clause");
x.t("names","students");
x.t("child","entities");
x.t("child","objects");
x.t("child","id");
x.t("child","matches");
x.t("child","join");
x.t("child","entity");
x.t("associated","entity");
x.t("sampleparent","link");
x.t("sampleparent","objects");
x.t("sampleparent","id");
x.t("sampleparent","subobject");
x.t("var","query.make");
x.t("var","text_val=eval");
x.t("including","table");
x.t("including","predicates");
x.t("restrictions","objects");
x.t("restrictions","optionally");
x.t("subobject\u2019s","textfield1");
x.t("representing","entity");
x.t("even","no");
x.t("even","parent");
x.t("generates","sql");
x.t("q.getcolumnref","id");
x.t("contains","foreign");
x.t("generally","speaking");
x.t("object","example");
x.t("object","id");
x.t("object","gosu");
}
