function FileData_Pairs(x)
{
x.t("passed","plugin");
x.t("passed","back");
x.t("example","expression");
x.t("example","following");
x.t("unlike","entity");
x.t("method","external");
x.t("exist","include");
x.t("exist","system");
x.t("proxy","every");
x.t("proxy","wraps");
x.t("proxy","returns");
x.t("singletons","single");
x.t("every","time");
x.t("create","external");
x.t("create","new");
x.t("currently","singletons");
x.t("preserve","calls");
x.t("always","evaluates");
x.t("instance","class");
x.t("key","type");
x.t("key","objects");
x.t("preserves","references");
x.t("plugin","internal");
x.t("plugin","code");
x.t("plugin","returns");
x.t("getorcreatebycode","method");
x.t("getorcreatebycode","remove");
x.t("current","release");
x.t("current","behavior");
x.t("claimstate.open","instead");
x.t("converting","internal");
x.t("converting","existing");
x.t("text_val.select","link");
x.t("interface","provides");
x.t("interface","entity");
x.t("(internal)","entity");
x.t("evaluates","false");
x.t("evaluates","true");
x.t("type","converting");
x.t("type","keys");
x.t("change","gosu");
x.t("change","typekeys");
x.t("change","similar");
x.t("change","future");
x.t("external","interface");
x.t("external","form");
x.t("external","objects");
x.t("external","internal");
x.t("external","format");
x.t("external","typekey");
x.t("external","entity");
x.t("time","java");
x.t("calls","unlike");
x.t("calls","equals");
x.t("satisfy","requirement");
x.t("form","external");
x.t("form","dynamic");
x.t("however","true");
x.t("however","methods");
x.t("however","behavior");
x.t("entities","start");
x.t("entities","typekeys");
x.t("entities","claimcenter");
x.t("entities","java");
x.t("convert","external");
x.t("convert","internal");
x.t("convert","code");
x.t("convert","java");
x.t("wraps","internal");
x.t("back","gosu");
x.t("back","internal");
x.t("original","(internal)");
x.t("requirement","example");
x.t("requirement","comparing");
x.t("claim.getstate","claim.getstate");
x.t("claim.getstate","==");
x.t("claim.getstate",".equals");
x.t("link","directly");
x.t("objects","proxy");
x.t("objects","key");
x.t("objects","external");
x.t("new","proxy");
x.t("new","claimcenter");
x.t("new","code");
x.t("==","claimstate.open");
x.t("==","claim.getstate");
x.t("==","typekeys");
x.t("==","activity.getclaim");
x.t("==","typekey");
x.t("==","operator");
x.t("==","equality");
x.t("getting","results");
x.t("single","instance");
x.t("start","convert");
x.t("passes","plugin");
x.t("messsage","gosu");
x.t(".equals","(claimstate.open)");
x.t(".equals","activity.getclaim");
x.t("guide","java");
x.t("results","plugin");
x.t("remove","type");
x.t("wrap","key");
x.t("assume","references");
x.t("false","activity.getclaim");
x.t("false","future");
x.t("fails","reasons");
x.t("reasons","external");
x.t("directly","page");
x.t("converts","back");
x.t("converts","internal");
x.t("true","current");
x.t("true","activity.getclaim");
x.t("true","java");
x.t("(claimstate.open)","important");
x.t("text_val.focus","text_val.select");
x.t("libraries","create");
x.t("libraries","wrap");
x.t("libraries","libraries");
x.t("libraries","write");
x.t("libraries","cannot");
x.t("libraries","java");
x.t("libraries","unwrap");
x.t("typekeys","passed");
x.t("typekeys","convert");
x.t("typekeys","typekeys");
x.t("typekeys","accessed");
x.t("typekeys","translated");
x.t("gosu","entities");
x.t("gosu","address");
x.t("gosu","retrieves");
x.t("gosu","reference");
x.t("gosu","code");
x.t("gosu","java");
x.t("gosu","world");
x.t("references","preserve");
x.t("references","however");
x.t("references","internal");
x.t("references","preserved");
x.t("conversion","attempt");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("methods","equals");
x.t("provides","appropriate");
x.t("going","external");
x.t("determine","equality");
x.t("address","passes");
x.t("claimcenter","code");
x.t("claimcenter","entity");
x.t("attempt","fails");
x.t("write","new");
x.t("accessed","entity");
x.t("rely","current");
x.t("rely","==");
x.t("earlier","example");
x.t(".hashcode","==");
x.t(".hashcode","comparing");
x.t("retrieves","internal");
x.t("begin","converting");
x.t("error","occurred");
x.t("contrast","earlier");
x.t("something","claim.getstate");
x.t("means","create");
x.t("guidewire_selectall","var");
x.t("side","cannot");
x.t("side","internal");
x.t("side","entity");
x.t("activity.getclaim","however");
x.t("activity.getclaim","==");
x.t("activity.getclaim",".equals");
x.t("activity.getclaim",".hashcode");
x.t("activity.getclaim","expression");
x.t("function","guidewire_selectall");
x.t("implements","external");
x.t("cannot","assume");
x.t("cannot","rely");
x.t("safe","thus");
x.t("expressions","something");
x.t("expressions","return");
x.t("instead","change");
x.t("instead","==");
x.t("instead","equality");
x.t("internal","external");
x.t("internal","form");
x.t("internal","objects");
x.t("internal","side");
x.t("internal","format");
x.t("internal","code");
x.t("internal","typekey");
x.t("internal","entity");
x.t("format","entities");
x.t("format","libraries");
x.t("format","gosu");
x.t("release","claim.getstate");
x.t("release","cannot");
x.t("release","returns");
x.t("release","behavior");
x.t("tostring","hashcode");
x.t("important","future");
x.t("reference","guide");
x.t("code","plugin");
x.t("code","getorcreatebycode");
x.t("code","satisfy");
x.t("code","gosu");
x.t("code","write");
x.t("code","means");
x.t("code","include");
x.t("code","equals");
x.t("code","relies");
x.t("code","using");
x.t("code","similarly");
x.t("typekey","exist");
x.t("typekey","typekeys");
x.t("typekey","references");
x.t("typekey","instances");
x.t("typekey","constant");
x.t("typekey","actually");
x.t("typekey","based");
x.t("typekey","class");
x.t("prepare","future");
x.t("return","true");
x.t("return","value");
x.t("thus","contrast");
x.t("externally","typekey");
x.t("java","entities");
x.t("java","gosu");
x.t("java","side");
x.t("java","function");
x.t("java","code");
x.t("java","comparing");
x.t("java","classes");
x.t("translated","entity");
x.t("occurred","messsage");
x.t("existing","code");
x.t("include","requirement");
x.t("include","getting");
x.t("keys","entity");
x.t("keys","without");
x.t("instances","currently");
x.t("instances","entities");
x.t("value","object");
x.t("similar","expressions");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("constant","getorcreatebycode");
x.t("hashcode","call");
x.t("actually","exist");
x.t("regenerating","external");
x.t("expression","always");
x.t("expression","evaluates");
x.t("page","error");
x.t("dynamic","proxy");
x.t("internally","externally");
x.t("equals","instead");
x.t("equals","tostring");
x.t("appropriate","external");
x.t("future","change");
x.t("future","release");
x.t("comparing","entities");
x.t("comparing","typekeys");
x.t("comparing","keys");
x.t("classes","begin");
x.t("classes","typekey");
x.t("wrapped","entity");
x.t("based","code");
x.t("call","wrapped");
x.t("preserved","across");
x.t("relies","==");
x.t("entity","preserves");
x.t("entity","converts");
x.t("entity","libraries");
x.t("entity","references");
x.t("entity","implements");
x.t("entity","safe");
x.t("entity","classes");
x.t("following","expressions");
x.t("following","expression");
x.t("system","conversion");
x.t("unwrap","object");
x.t("using","libraries");
x.t("class","typekey");
x.t("class","internally");
x.t("similarly","behavior");
x.t("returns","original");
x.t("returns","false");
x.t("returns","return");
x.t("across","calls");
x.t("world","however");
x.t("operator","change");
x.t("operator","==");
x.t("operator","determine");
x.t("without","regenerating");
x.t("behavior","change");
x.t("behavior","==");
x.t("behavior","prepare");
x.t("var","text_val=eval");
x.t("equality","example");
x.t("equality","comparisons");
x.t("equality","operator");
x.t("object","passed");
x.t("object","going");
}
