function FileData_Pairs(x)
{
x.t("example","subtle");
x.t("example","uses");
x.t("example","populate");
x.t("example","note");
x.t("example","returns");
x.t("example","fetches");
x.t("example","extract");
x.t("looks","inside");
x.t("complex","example");
x.t("complex","calculations");
x.t("min","avg");
x.t("columns","refer");
x.t("columns","hash");
x.t("columns","access");
x.t("columns","block");
x.t("columns","need");
x.t("columns","returning");
x.t("columns","gosu");
x.t("columns","instead");
x.t("columns","database");
x.t("columns","result");
x.t("columns","assuming");
x.t("columns","values");
x.t("columns","following");
x.t("columns","warning");
x.t("columns","load");
x.t("columns","affected");
x.t("method","available");
x.t("method","signature");
x.t("method","no");
x.t("method","provides");
x.t("method","select");
x.t("method","following");
x.t("method","returns");
x.t("available","queries");
x.t("properties","backed");
x.t("properties","enhancement");
x.t("properties","named");
x.t("properties","mentioned");
x.t("properties","load");
x.t("properties","var");
x.t("else","return");
x.t("anything","specify");
x.t("backed","actual");
x.t("hashmap","string");
x.t("within","block");
x.t("within","select");
x.t("within","function");
x.t("full","method");
x.t("full","entities");
x.t("retrieving","entire");
x.t("cast","final");
x.t("cast","becomes");
x.t("cast","associated");
x.t("myentity","hashmap");
x.t("subtle","example");
x.t("subtle","fetches");
x.t("computation","computes");
x.t("implement","complex");
x.t(":a","row.a");
x.t("alternate","method");
x.t("alternate","select");
x.t("tree","select");
x.t("refer","data");
x.t("static","methods");
x.t("testa.a","coerced");
x.t("related","topics");
x.t("kinds","tasks");
x.t("10",":e");
x.t("10","gosu");
x.t("10","return");
x.t("10","e1_minus_e2");
x.t("few","columns");
x.t("arguments","alternate");
x.t("performs","calculation");
x.t("summary","testa.a");
x.t("testa.a2","within");
x.t("situations","need");
x.t("detecting","referenced");
x.t("referenced","address1");
x.t(":e","row.e.e1");
x.t("double","show");
x.t("double","a2");
x.t("program","type");
x.t("field","need");
x.t("hash","map");
x.t("line","computation");
x.t("uses","database");
x.t("text_val.select","link");
x.t("qt","rt");
x.t("support","computed");
x.t("myobject",":a");
x.t("row.a2","returns");
x.t("type","anything");
x.t("type","type");
x.t("type","block");
x.t("type","need");
x.t("type","iterable");
x.t("type","fine");
x.t("type","return");
x.t("type","query");
x.t("type","returns");
x.t("calculations","block");
x.t("calculations","return");
x.t("calculations","following");
x.t("populate","custom");
x.t("e1","e2");
x.t("(testa)",".select");
x.t("explicitly","related");
x.t("public","id");
x.t("time","low");
x.t("time","large");
x.t("time","gosu");
x.t("time","aware");
x.t("time","result");
x.t("row.a","10");
x.t("row.a","double");
x.t("row.a","row.e");
x.t("row.a","1000");
x.t("row.a","row.e.e1");
x.t("e2","var");
x.t("calculation","gosu");
x.t("formats","situations");
x.t("formats","function");
x.t("formats","selecting");
x.t("inside","block");
x.t("inside","gosu");
x.t("original","query");
x.t("apis","alternative");
x.t("entities","retrieving");
x.t("property","properties");
x.t("property","testa.a2");
x.t("property","address");
x.t("link","directly");
x.t("signature","alternate");
x.t("signature","takes");
x.t("want","return");
x.t("access","block");
x.t("single","field");
x.t("low","level");
x.t("new","hashmap");
x.t("new","myobject");
x.t("block","complex");
x.t("block","explicitly");
x.t("block","block");
x.t("block","remember");
x.t("block","references");
x.t("block","argument");
x.t("block","loaded");
x.t("block","determine");
x.t("block","allows");
x.t("block","in-line");
x.t("block","row");
x.t("block","compile");
x.t("block","important");
x.t("block","reduces");
x.t("block","replaces");
x.t("block","return");
x.t("block","takes");
x.t("block","run");
x.t("block","following");
x.t("block","pass");
x.t("block","without");
x.t("row.e","final");
x.t("row.e","returns");
x.t("messsage","gosu");
x.t("need","few");
x.t("need","public");
x.t("need","match");
x.t("need","simply");
x.t("need","database");
x.t("need","specify");
x.t("infer","block");
x.t("generics","blocks");
x.t("generics","help");
x.t("generics","work");
x.t("determines","columns");
x.t("improves","overall");
x.t("id","string");
x.t("optimize","using");
x.t("sum","max");
x.t("results","custom");
x.t("results","selecting");
x.t("guide","query");
x.t("due","gosu");
x.t("parse","tree");
x.t("become","database");
x.t("remember","test");
x.t("large","loads");
x.t("directly","page");
x.t("iterable","hashmap");
x.t("iterable","specifically");
x.t("iterable","rt");
x.t("iterable","object");
x.t("test","profile");
x.t("text_val.focus","text_val.select");
x.t("no","arguments");
x.t("overall","server");
x.t("returning","results");
x.t("returning","query");
x.t("gosu","looks");
x.t("gosu","block");
x.t("gosu","infer");
x.t("gosu","generics");
x.t("gosu","determines");
x.t("gosu","optimize");
x.t("gosu","permits");
x.t("gosu","blocks");
x.t("gosu","loads");
x.t("gosu","simply");
x.t("gosu","reference");
x.t("gosu","imposes");
x.t("gosu","knows");
x.t("gosu","actually");
x.t("gosu","runs");
x.t("gosu","query");
x.t("gosu","executes");
x.t("gosu","class");
x.t("performance","impact");
x.t("performance","assemble");
x.t("performance","run");
x.t("iterate","across");
x.t("tasks","inside");
x.t("references","properties");
x.t("references","row.a");
x.t("references","block");
x.t("references","become");
x.t("references","database");
x.t("references","following");
x.t("references","entity");
x.t("dictionary","references");
x.t("exactly","column");
x.t("query.make","(testa)");
x.t("query.make","(myentity)");
x.t("myentity.e","references");
x.t("custom","formats");
x.t("custom","gosu");
x.t("custom","anonymous");
x.t("argument","database");
x.t("virtual","properties");
x.t("initializing","two");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("provides","following");
x.t("methods","within");
x.t("methods","dbfunction");
x.t("methods","entity");
x.t("inner","class");
x.t("place","full");
x.t("determine","properties");
x.t("determine","performance");
x.t("determine","database");
x.t("loaded","database");
x.t("profile","performance");
x.t("fine","choose");
x.t("allows","gosu");
x.t("address","entity");
x.t("enhancement","methods");
x.t("final","output");
x.t("final","result");
x.t("map","mapping");
x.t("a_plus_ten","row.a");
x.t("entire","entity");
x.t("fields","need");
x.t("string","gosu");
x.t("string","integer");
x.t("in-line","function");
x.t("structures","calculations");
x.t("contain","exactly");
x.t("three","columns");
x.t("permits","line");
x.t("1000",":e");
x.t("functions","within");
x.t("functions","sum");
x.t("error","occurred");
x.t("queries","instead");
x.t("blocks","generics");
x.t("blocks","gosu");
x.t("blocks","following");
x.t("blocks","pass");
x.t("whatever","want");
x.t("whatever","convenient");
x.t("loads","columns");
x.t("loads","determine");
x.t("loads","database");
x.t("finally","grouped");
x.t("select","method");
x.t("select","block");
x.t("select","blocks");
x.t("select","rt");
x.t("select","unsure");
x.t("collection","apis");
x.t("(myentity)",".select");
x.t("means","method");
x.t("feature","called");
x.t("guidewire_selectall","var");
x.t("computed","columns");
x.t("function","static");
x.t("function","select");
x.t("function","guidewire_selectall");
x.t("function","define");
x.t("function","information");
x.t("function","returns");
x.t("function","var");
x.t("max","min");
x.t("define","within");
x.t("define","collection");
x.t("cannot","virtual");
x.t("instead","gosu");
x.t("instead","calling");
x.t("instead","whole");
x.t("arbitrary","type");
x.t("arbitrary","structures");
x.t("row","qt");
x.t("row","references");
x.t("row","loads");
x.t("aware","implementation");
x.t("variant","select");
x.t("match","native");
x.t("types","columns");
x.t("compile","time");
x.t("inspects","parse");
x.t("calling","select");
x.t("important","gosu");
x.t("important","benefits");
x.t("simply","loads");
x.t("simply","return");
x.t("impact","calculations");
x.t("grouped","property");
x.t("reference","cast");
x.t("reference","guide");
x.t("reference","additionally");
x.t("whole","entity");
x.t("reduces","memory");
x.t("replaces","values");
x.t("code","similar");
x.t("rows","query.make");
x.t("return","type");
x.t("return","single");
x.t("return","new");
x.t("return","place");
x.t("return","result");
x.t("benefits","gosu");
x.t("assemble","arbitrary");
x.t("level","determine");
x.t("database","columns");
x.t("database","full");
x.t("database","cast");
x.t("database","performs");
x.t("database","row.a");
x.t("database","gosu");
x.t("database","references");
x.t("database","functions");
x.t("database","function");
x.t("database","row");
x.t("database","query");
x.t("database","returns");
x.t("memory","usage");
x.t("previous","example");
x.t("actual","database");
x.t("occurred","messsage");
x.t("rules","kinds");
x.t("imposes","following");
x.t("specifically","iqueryresult");
x.t("convenient","program");
x.t("usage","improves");
x.t("running","detecting");
x.t("similar","following");
x.t("named","e1");
x.t("selecting","columns");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("rt","columns");
x.t("rt","means");
x.t("rt","extends");
x.t("rt","note");
x.t("rt","iqueryresult");
x.t("knows","load");
x.t("implementation","detail");
x.t("avg","count");
x.t("builder","support");
x.t("builder","returning");
x.t("native","types");
x.t("actually","inspects");
x.t("extends","iterable");
x.t("e1_minus_e2","row.e.e1");
x.t("takes","block");
x.t("takes","object");
x.t("inspecting","block");
x.t("runs","block");
x.t("computes","row.a");
x.t("page","error");
x.t("help","define");
x.t("output","example");
x.t("show","coercion");
x.t("query","type");
x.t("query","results");
x.t("query","due");
x.t("query","iterate");
x.t("query","compile");
x.t("query","builder");
x.t("information","blocks");
x.t("data","dictionary");
x.t("becomes","database");
x.t("result","example");
x.t("result","gosu");
x.t("result","references");
x.t("result","instead");
x.t("result","row");
x.t("result","result");
x.t("address1","property");
x.t("assuming","myentity.e");
x.t("values","database");
x.t("choose","whatever");
x.t("choose","return");
x.t("called","computed");
x.t("note","references");
x.t("note","gosu");
x.t("note","function");
x.t("note","note");
x.t("topics","generics");
x.t("executes","block");
x.t("column","reference");
x.t("two","properties");
x.t("two","database");
x.t("integer","row.a");
x.t("integer","a_plus_ten");
x.t("integer","code");
x.t("integer","previous");
x.t("integer","iqueryresult");
x.t("integer","dbfunction.sum");
x.t("work","need");
x.t("mentioned","block");
x.t("a2","row.a2");
x.t("dbfunction","class");
x.t("mapping","string");
x.t("entity","gosu");
x.t("entity","methods");
x.t("entity","variant");
x.t("entity","choose");
x.t("entity","contains");
x.t("following","example");
x.t("following","complex");
x.t("following","subtle");
x.t("following","function");
x.t("following","important");
x.t("following","database");
x.t("following","rules");
x.t("following","var");
x.t("run","time");
x.t("anonymous","inner");
x.t("iqueryresult","myentity");
x.t("iqueryresult","qt");
x.t("iqueryresult","class");
x.t("iqueryresult","parameterized");
x.t("class","initializing");
x.t("class","contain");
x.t("class","extends");
x.t("class","containing");
x.t("containing","fields");
x.t("warning","cannot");
x.t("unsure","properties");
x.t("additionally","column");
x.t("using","sql");
x.t("coercion","finally");
x.t("pass","block");
x.t("pass","select");
x.t("returns","columns");
x.t("returns","summary");
x.t("returns","iterable");
x.t("returns","custom");
x.t("returns","whatever");
x.t("returns","iqueryresult");
x.t("alternative","select");
x.t("across","result");
x.t("row.e.e1","row.e.e2");
x.t("load","inspecting");
x.t("load","address1");
x.t("load","run");
x.t("without","running");
x.t("associated","cast");
x.t("row.e.e2","columns");
x.t("row.e.e2","else");
x.t("row.e.e2","database");
x.t("row.e.e2","note");
x.t("sql","feature");
x.t("var","text_val=eval");
x.t("var","rows");
x.t("parameterized","original");
x.t("\\row-","row.a");
x.t("\\row-","new");
x.t("coerced","double");
x.t("affected","query");
x.t(".select","\\row-");
x.t("fetches","three");
x.t("object","type");
x.t("object","query");
x.t("specify","arbitrary");
x.t("specify","return");
x.t("server","performance");
x.t("extract","two");
x.t("contains","properties");
x.t("detail","implement");
x.t("dbfunction.sum","row.a");
}
