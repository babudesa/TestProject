function FileData_Pairs(x)
{
x.t("supports","java");
x.t("ieee","arithmetic");
x.t("example","10");
x.t("defines","arithmetic");
x.t("right","side");
x.t("right","filling");
x.t("right","result");
x.t("right","shift");
x.t("1010","binary");
x.t("1010","1111");
x.t("1010","bit");
x.t("1010","1101");
x.t("1010","decimal");
x.t("bitwise","right");
x.t("bitwise","left");
x.t("bitwise","exclusive");
x.t("bitwise","operation");
x.t("bitwise","inclusive");
x.t("bitwise","value");
x.t("bitwise","operator");
x.t("clear","sign");
x.t("left-","right-");
x.t("preserve","sign");
x.t("required","currency");
x.t("10","1010");
x.t("10","13");
x.t("10","15");
x.t("10","evaluates");
x.t("10","0.75");
x.t("10","contrast");
x.t("10","001010");
x.t("10","105");
x.t("10","01010");
x.t("10","decimal");
x.t("10","2.5");
x.t("binary","1010");
x.t("binary","bitwise");
x.t("binary","binary");
x.t("binary","101000");
x.t("binary","0101");
x.t("binary","1111");
x.t("binary","1000");
x.t("binary","code");
x.t("binary","11111111");
x.t("binary","10100");
x.t("binary","decimal");
x.t("binary","0111");
x.t("performs","binary");
x.t("performs","addition");
x.t("performs","arithmetic");
x.t("pipe","character");
x.t("11","bitwise");
x.t("11","decimal");
x.t("currency","figures");
x.t("operands.the","result");
x.t("12","12");
x.t("12","3.26");
x.t("preserves","sign");
x.t("13","evaluates");
x.t("13","1101");
x.t("text_val.select","link");
x.t("15","evaluates");
x.t("15","1111");
x.t("15","expression");
x.t("15","decimal");
x.t("evaluates","10");
x.t("evaluates","11");
x.t("evaluates","15");
x.t("evaluates","20");
x.t("evaluates","40");
x.t("evaluates","-3");
x.t("evaluates","decimal");
x.t("hand","side");
x.t("0.5","bitwise");
x.t("left","side");
x.t("left","result");
x.t("left","shift");
x.t("double-quotation","marks");
x.t("division","follows");
x.t("division","using");
x.t("division","operator");
x.t("automatically","sets");
x.t("original","number");
x.t("link","directly");
x.t("usually","required");
x.t("usually","appropriate");
x.t("top","sign");
x.t("messsage","gosu");
x.t("operands","result");
x.t("operands","numeric");
x.t("guide","gosu");
x.t("101000","decimal");
x.t("bits","right");
x.t("11111101","decimal");
x.t("directly","page");
x.t("converts","string");
x.t("converts","non-");
x.t("test","nan");
x.t("exclusive","operation");
x.t("exclusive","caret");
x.t("exclusive","value");
x.t("text_val.focus","text_val.select");
x.t("common","arithmetic");
x.t("enclosed","double-quotation");
x.t("operation","value");
x.t("operation","values");
x.t("operation","remainder");
x.t("gosu","supports");
x.t("gosu","defines");
x.t("gosu","converts");
x.t("gosu","operators");
x.t("gosu","reference");
x.t("3.359","4.641");
x.t("follows","specification");
x.t("0.75","0.5");
x.t("inclusive","pipe");
x.t("inclusive","operation");
x.t("inclusive","value");
x.t("accuracy","usually");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("15.583","auto");
x.t("zero","unsigned");
x.t("figures","addition");
x.t("operand","string");
x.t("operand","truly");
x.t("operand","contains");
x.t("sign","bit");
x.t("sign","positive");
x.t("sign","operator");
x.t("concatenation","two");
x.t("concatenation","using");
x.t("concatenation","operator");
x.t("strings","expression");
x.t("0101","decimal");
x.t("11110110","binary");
x.t("string","gosu");
x.t("string","operand");
x.t("string","concatenation");
x.t("string","respectively");
x.t("string","number");
x.t("string","data");
x.t("string","result");
x.t("string","meaning");
x.t("sets","high-order");
x.t("addition","concatenation");
x.t("addition","string");
x.t("addition","numeric");
x.t("denominator","expression");
x.t("1111","binary");
x.t("1111","result");
x.t("1111","decimal");
x.t("auto","policy");
x.t("numerator","divides");
x.t("1000","decimal");
x.t("high-order","bit");
x.t("error","occurred");
x.t("multiplication","using");
x.t("multiplication","operator");
x.t("infinity","nan");
x.t("contrast","10");
x.t("contrast","operator");
x.t("operators","addition");
x.t("operators","expressions");
x.t("operators","thus");
x.t("especially","important");
x.t("respectively","note");
x.t("caret","character");
x.t("non-","string");
x.t("appears","string");
x.t("truly","string");
x.t("guidewire_selectall","var");
x.t("side","operator");
x.t("number","10");
x.t("number","13");
x.t("number","15");
x.t("number","string");
x.t("number","number");
x.t("number","-10");
x.t("number","expression");
x.t("number","subtraction");
x.t("number","result");
x.t("number","values");
x.t("number","two");
x.t("number","negative");
x.t("function","guidewire_selectall");
x.t("001010","binary");
x.t("001010","bit");
x.t("expressions","gosu");
x.t("expressions","function");
x.t("expressions","corresponding");
x.t("expressions","arithmetic");
x.t("biginteger","result");
x.t("types","operands");
x.t("types","either");
x.t("4.641","multiplication");
x.t("big","especially");
x.t("big","decimal");
x.t("important","considering");
x.t("important","signed");
x.t("important","operator");
x.t("marks","string");
x.t("reference","guide");
x.t("floating-point","division");
x.t("code","bitwise");
x.t("code","binary");
x.t("thus","left-");
x.t("bigdecimal","biginteger");
x.t("previous","value");
x.t("filling","top");
x.t("java","big");
x.t("java","bigdecimal");
x.t("20","expression");
x.t("20","decimal");
x.t("-10","evaluates");
x.t("-10","11111111");
x.t("occurred","messsage");
x.t("0/1","arithmetic");
x.t("divides","denominator");
x.t("considering","accuracy");
x.t("value","right");
x.t("value","1010");
x.t("value","left");
x.t("value","appears");
x.t("value","side");
x.t("value","shift");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("105","number");
x.t("signed","values");
x.t("signed","integer");
x.t("expression","10");
x.t("expression","-10");
x.t("expression","result");
x.t("page","error");
x.t("27","division");
x.t("nan","infinity");
x.t("nan","number");
x.t("nan","0/1");
x.t("subtraction","using");
x.t("subtraction","operator");
x.t("data","types");
x.t("01010","binary");
x.t("01010","bit");
x.t("result","10");
x.t("result","binary");
x.t("result","12");
x.t("result","3.359");
x.t("result","concatenation");
x.t("result","number");
x.t("result","big");
x.t("result","floating-point");
x.t("result","signed");
x.t("result","nan");
x.t("result","7.583");
x.t("result","either");
x.t("result","modulo");
x.t("meaning","enclosed");
x.t("bit","right");
x.t("bit","left");
x.t("bit","original");
x.t("bit","previous");
x.t("appropriate","behavior");
x.t("policy","autopolicy");
x.t("values","operands.the");
x.t("values","usually");
x.t("values","operands");
x.t("values","sides");
x.t("values","operator");
x.t("40","bitwise");
x.t("40","decimal");
x.t("-3","bitwise");
x.t("-3","decimal");
x.t("7.583","15.583");
x.t("3.26","39.12");
x.t("specification","ieee");
x.t("character","operator");
x.t("two","bits");
x.t("two","strings");
x.t("two","string");
x.t("two","number");
x.t("note","following");
x.t("integer","values");
x.t("right-","hand");
x.t("numeric","types");
x.t("numeric","operator");
x.t("1101","binary");
x.t("1101","result");
x.t("positive","negative");
x.t("numbers","gosu");
x.t("sides","operator");
x.t("11111111","11111101");
x.t("11111111","11110110");
x.t("11111111","11111111");
x.t("corresponding","common");
x.t("either","operand");
x.t("either","number");
x.t("either","value");
x.t("either","two");
x.t("following","operands");
x.t("autopolicy","10");
x.t("arithmetic","division");
x.t("arithmetic","addition");
x.t("arithmetic","multiplication");
x.t("arithmetic","operators");
x.t("arithmetic","expressions");
x.t("arithmetic","subtraction");
x.t("arithmetic","either");
x.t("arithmetic","arithmetic");
x.t("arithmetic","modulo");
x.t("using","number");
x.t("using","two");
x.t("using","either");
x.t("10100","decimal");
x.t("decimal","bitwise");
x.t("decimal","10");
x.t("decimal","11");
x.t("decimal","15");
x.t("decimal","number");
x.t("decimal","20");
x.t("decimal","expression");
x.t("decimal","40");
x.t("decimal","-3");
x.t("decimal","arithmetic");
x.t("remainder","numerator");
x.t("operator","example");
x.t("operator","performs");
x.t("operator","division");
x.t("operator","automatically");
x.t("operator","gosu");
x.t("operator","sets");
x.t("operator","multiplication");
x.t("operator","important");
x.t("operator","java");
x.t("operator","value");
x.t("operator","subtraction");
x.t("operator","arithmetic");
x.t("operator","operator");
x.t("modulo","operation");
x.t("modulo","operator");
x.t("modulo","operations");
x.t("operations","using");
x.t("behavior","contrast");
x.t("var","text_val=eval");
x.t("39.12","27");
x.t("2.5","test");
x.t("unsigned","integer");
x.t("shift","1010");
x.t("shift","right");
x.t("shift","clear");
x.t("shift","preserve");
x.t("shift","preserves");
x.t("shift","zero");
x.t("shift","001010");
x.t("shift","value");
x.t("shift","01010");
x.t("shift","values");
x.t("shift","two");
x.t("shift","operator");
x.t("contains","numbers");
x.t("0111","decimal");
x.t("negative","result");
}
