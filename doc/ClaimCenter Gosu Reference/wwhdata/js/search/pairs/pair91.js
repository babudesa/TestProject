function FileData_Pairs(x)
{
x.t("example","or1");
x.t("example","creates");
x.t("example","want");
x.t("example","carcolors");
x.t("example","requires");
x.t("example","avoid");
x.t("example","suppose");
x.t("example","functionally");
x.t("example","cannot");
x.t("example","code");
x.t("example","following");
x.t("example","links");
x.t("example","using");
x.t("example","var");
x.t("complex","queries");
x.t("complex","query");
x.t("(person)",".comparein");
x.t("passed","block");
x.t("semantic","meaning");
x.t("looks","following");
x.t("method","query.and");
x.t("method","conceptually");
x.t("method","again");
x.t("method","methods");
x.t("method","query.or");
x.t("method","adds");
x.t("method","takes");
x.t("method","result");
x.t("method","implicit");
x.t("method","compare");
x.t("chaining","line");
x.t("chaining","inside");
x.t("chaining","limitations");
x.t("chaining","results");
x.t("chaining","features");
x.t("chaining","predicates");
x.t("considerations","chaining");
x.t("parameter","variables");
x.t("parameter","variable");
x.t("restriction","call");
x.t("or1","or1.compare");
x.t("or1","and1");
x.t("building","system");
x.t("pattern","looks");
x.t("pattern","example");
x.t("rather","using");
x.t("printresults","qs");
x.t("printresults","complexquery.select");
x.t("printresults","q1.select");
x.t("printresults","q2.select");
x.t("printresults","unionquery.select");
x.t("printresults","intersectionquery.select");
x.t("owner","chaining");
x.t("owner","query");
x.t("owner","intersection");
x.t("implement","iquerybuilder");
x.t("within","block");
x.t("within","function");
x.t("table","example");
x.t("table","restriction");
x.t("table","implement");
x.t("table","logical");
x.t("refer","later");
x.t("refer","grouping");
x.t("create","query");
x.t(".comparein","publicid");
x.t("iquerybeanresult","msg");
x.t("always","implicit");
x.t("variables","remind");
x.t("variables","whatever");
x.t("11",".compare");
x.t("11","or1.compare");
x.t("11","q1.compare");
x.t("11","or1.and");
x.t("11","and1.compare");
x.t("11","itemnum");
x.t("q1","query.make");
x.t("regular","queries");
x.t("ability","combine");
x.t("topic","default");
x.t("topic","boolean");
x.t("user","complex");
x.t("user","table");
x.t("user","public");
x.t("user","union");
x.t("creates","union");
x.t("q2","query.make");
x.t("tables","involved");
x.t("tables","restrictions");
x.t("refers","quality");
x.t("later","topic");
x.t("uses","gw.api.database.query");
x.t("uses","gw.api.database.iquerybeanresult");
x.t("qs","iquerybeanresult");
x.t("qs","print");
x.t("(msg)","qs");
x.t("complexquery.select","complex");
x.t("helps","identify");
x.t("pseudo-code","combine");
x.t("pseudo-code","query");
x.t("line","rather");
x.t("text_val.select","link");
x.t("greaterthan","example");
x.t("greaterthan","11");
x.t("greaterthan","notice");
x.t("greaterthan","important");
x.t("greaterthan","theory");
x.t("greaterthan","power");
x.t("greaterthan","result");
x.t("greaterthan","note");
x.t("intersectionquery","q1.intersect");
x.t("groupingquery","creating");
x.t("groupingquery","class");
x.t("mode","variables");
x.t("mode","new");
x.t("mode","peer");
x.t("mode","important");
x.t("mode","previous");
x.t("mode","already");
x.t("mode","predicates");
x.t("mode","var");
x.t("sample","data");
x.t("sample","gets");
x.t("type","regular");
x.t("type","groupingquery");
x.t("type","union");
x.t("type","query");
x.t("thing","know");
x.t("change","default");
x.t("change","linking");
x.t("populate","groupings");
x.t("basic","queries");
x.t("satisfy","three");
x.t("satisfy","predicates");
x.t("satisfy","following");
x.t("public","id");
x.t("query.and","and_grouping_var");
x.t("multiple","union");
x.t("multiple","queries");
x.t("multiple","subqueries");
x.t("multiple","predicates");
x.t("q1.select","query");
x.t("however","extend");
x.t("however","guidewire");
x.t("however","result");
x.t("however","case");
x.t("extend","table");
x.t("inside","block");
x.t("inside","groupings");
x.t("identify","link");
x.t("keywords","instead");
x.t("default","owner");
x.t("default","gosu");
x.t("default","linking");
x.t("default","implicitly");
x.t("default","users");
x.t("default","behavior");
x.t("property","color");
x.t("property","rewrite");
x.t("property","value");
x.t("original","queries");
x.t("original","query");
x.t("limitations","important");
x.t("predicateorbooleangrouping","predicateorbooleangrouping");
x.t("predicateorbooleangrouping","syntax");
x.t("predicateorbooleangrouping","and_grouping_var");
x.t("predicateorbooleangrouping","either");
x.t("predicateorbooleangrouping","or_grouping_var");
x.t("guidewire","recommends");
x.t("checks","property");
x.t("checks","car");
x.t("apis","compact");
x.t("link","mode");
x.t("link","new");
x.t("link","directly");
x.t("link","predicates");
x.t("link","series");
x.t("single","property");
x.t("single","query");
x.t("single","compare");
x.t("want","however");
x.t("want","return");
x.t("new","group");
x.t("new","parenthetical");
x.t("new","predicate");
x.t("new","query");
x.t("new","predicates");
x.t("new","series");
x.t("advanced","example");
x.t("advanced","boolean");
x.t("advanced","queries");
x.t("think","method");
x.t("english","construction");
x.t("english","meaning");
x.t("items","second");
x.t("consists","large");
x.t("details","creating");
x.t("(q1)","//");
x.t("block","parameter");
x.t("block","instead");
x.t("block","variable");
x.t("block","predicate");
x.t("block","print");
x.t("block","itself");
x.t("block","call");
x.t("block","pass");
x.t("block","specify");
x.t("chain","together");
x.t("conceptually","following");
x.t("includes","series");
x.t("color","value");
x.t("color","values");
x.t("30","color");
x.t("closely","matches");
x.t("messsage","gosu");
x.t("finds","rows");
x.t("need","logical");
x.t("found","original");
x.t("found","either");
x.t("again","notice");
x.t("carcolors","section");
x.t("list","values");
x.t("add","multiple");
x.t("add","think");
x.t("add","parenthetical");
x.t("add","predicate");
x.t("add","query");
x.t("add","numbers");
x.t("add","clause");
x.t(".compare","divisionnumber");
x.t(".compare","itemnum");
x.t("paste","following");
x.t("id","example");
x.t("id","systemtables:1");
x.t("id","keyablebean");
x.t("id","default_data:1");
x.t("id","default_data:2");
x.t("q1.union","(q2)");
x.t("group","example");
x.t("group","predicates");
x.t("recommends","naming");
x.t("guide","query");
x.t("simple","example");
x.t("simple","union");
x.t("simple","simplest");
x.t("simple","logical");
x.t("simple","linking");
x.t("33",".compare");
x.t("33","or1.compare");
x.t("33","divisionnumber");
x.t("33","q1.compare");
x.t("33","and1.compare");
x.t("results","using");
x.t("results","operations");
x.t(".publicid","displayname");
x.t("testing","real-world");
x.t("harder","understand");
x.t("overview","combining");
x.t("duplicate","rows");
x.t("displayname","printresults");
x.t("remind","linking");
x.t("or1.compare","divisionnumber");
x.t("or1.compare","priority");
x.t("or1.compare","itemnum");
x.t("large","number");
x.t("features","gosu");
x.t("directly","parallels");
x.t("directly","page");
x.t("requirements","already");
x.t("true","whether");
x.t("true","row");
x.t("requires","using");
x.t("requires","server");
x.t("predi","cate");
x.t("specified","restrictions");
x.t("test","single");
x.t("text_val.focus","text_val.select");
x.t("union","boolean");
x.t("union","queries");
x.t("union","query");
x.t("union","intersect");
x.t("union","clause");
x.t("union","intersection");
x.t("union","contains");
x.t("simplest","combine");
x.t("resulting","query");
x.t("no","duplicate");
x.t("demonstrates","combining");
x.t("operation","different");
x.t("creating","example");
x.t("creating","multiple");
x.t("creating","union");
x.t("name","helps");
x.t("name","closely");
x.t("name","specific");
x.t("name","reminds");
x.t("gosu","block");
x.t("gosu","blocks");
x.t("gosu","reference");
x.t("gosu","code");
x.t("gosu","adds");
x.t("gosu","query");
x.t("gosu","tester");
x.t("divisionnumber","greaterthan");
x.t("divisionnumber","property");
x.t("divisionnumber","following");
x.t("query.make","(person)");
x.t("query.make","(myentity)");
x.t("iterate","across");
x.t("identifiers","word");
x.t("subselect","boolean");
x.t("subselect","operations");
x.t("performance","large");
x.t("performance","depending");
x.t("q1.compare","divisionnumber");
x.t("q1.compare","priority");
x.t("q1.compare","itemnum");
x.t("argument","passed");
x.t("perform","better");
x.t("tests","single");
x.t("construction","describe");
x.t("avoid","chaining");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("boolean","algebra");
x.t("boolean","operators");
x.t("boolean","grouping");
x.t("methods","change");
x.t("methods","original");
x.t("methods","think");
x.t("methods","argument");
x.t("methods","methods");
x.t("methods","queries");
x.t("methods","syntax");
x.t("methods","database");
x.t("methods","generate");
x.t("methods","separate");
x.t("methods","query");
x.t("methods","compare");
x.t("methods","modify");
x.t("alternatively","link");
x.t("peer","group");
x.t("combine","populate");
x.t("combine","multiple");
x.t("combine","subqueries");
x.t("combine","predicates");
x.t("combine","groupings");
x.t("standard","var");
x.t("q2.select","query");
x.t("cate","linking");
x.t("indicate","following");
x.t("trying","query");
x.t("algebra","combine");
x.t("algebra","predicates");
x.t("records","satisfy");
x.t("records","combining");
x.t("final","output");
x.t("lines","however");
x.t("lines","gosu");
x.t("lines","call");
x.t("linked","logical");
x.t("linked","clauses");
x.t("systemtables:1","default");
x.t("systemtables:1","default_data:1");
x.t("string","link");
x.t("string","print");
x.t("wanted","represent");
x.t("or1.and","and1");
x.t("three","different");
x.t("three","predicates");
x.t("prints","following");
x.t("in-line","within");
x.t("earlier","topic");
x.t("earlier","examples");
x.t("second","item");
x.t("understand","naming");
x.t("functions","subselect");
x.t("functions","defined");
x.t("quality","predi");
x.t("queries","example");
x.t("queries","chaining");
x.t("queries","create");
x.t("queries","tables");
x.t("queries","paste");
x.t("queries","boolean");
x.t("queries","standard");
x.t("queries","respectively");
x.t("queries","subselects");
x.t("queries","instead");
x.t("queries","predicates");
x.t("queries","cases");
x.t("queries","using");
x.t("queries","compare");
x.t("error","occurred");
x.t("commands","add");
x.t("commands","series");
x.t("equivalent","simple");
x.t("equivalent","previous");
x.t("contrast","following");
x.t("blocks","gosu");
x.t("blocks","blocks");
x.t("blocks","mentioned");
x.t("blocks","special");
x.t("notice","within");
x.t("notice","outer");
x.t("whatever","want");
x.t("colors","example");
x.t("comparein","method");
x.t("comparein","type");
x.t("approaches","testing");
x.t("logical","example");
x.t("logical","refer");
x.t("logical","requirements");
x.t("logical","true");
x.t("logical","methods");
x.t("logical","means");
x.t("logical","words");
x.t("logical","simply");
x.t("logical","predicates");
x.t("respectively","methods");
x.t("keyablebean",".publicid");
x.t("involved","groupingquery");
x.t("syntax","method");
x.t("syntax","gosu");
x.t("know","using");
x.t("q1.and","and1");
x.t("suppose","wanted");
x.t("suppose","query");
x.t("outer","contains");
x.t("operators","advanced");
x.t("compact","using");
x.t("means","cannot");
x.t("means","query");
x.t("(myentity)","q1.compare");
x.t("(myentity)","q1.and");
x.t("(myentity)","q1.or");
x.t("functionally","equivalent");
x.t("feature","requires");
x.t("parenthetical","phrase");
x.t("and1","and1.compare");
x.t("and1","note");
x.t("guidewire_selectall","var");
x.t("gw.api.database.query","uses");
x.t("subselects","joins");
x.t("number","records");
x.t("number","predicates");
x.t("combining","union");
x.t("combining","queries");
x.t("function","guidewire_selectall");
x.t("function","information");
x.t("car","colors");
x.t("approach","perform");
x.t("better","real-world");
x.t("whether","run");
x.t("different","type");
x.t("different","lines");
x.t("cannot","call");
x.t("cannot","modify");
x.t("unique","identifiers");
x.t("words","query");
x.t("words","clause");
x.t("represents","pseudo-code");
x.t("ways","simple");
x.t("linking","mode");
x.t("linking","predicates");
x.t("linking","behavior");
x.t("instead","original");
x.t("instead","add");
x.t("instead","query");
x.t("instead","grouping");
x.t("publicid","systemtables:1");
x.t("publicid","default_data:1");
x.t("language","keywords");
x.t("row","var");
x.t("query.or","or_grouping_var");
x.t("section","checks");
x.t("real-world","performance");
x.t("simply","language");
x.t("simply","call");
x.t("simply","using");
x.t("added","new");
x.t("added","similarly");
x.t("calling","method");
x.t("calling","predicate");
x.t("important","considerations");
x.t("important","thing");
x.t("important","default");
x.t("rewrite","collapse");
x.t("reference","guide");
x.t("rows","satisfy");
x.t("rows","found");
x.t("rows","add");
x.t("rows","three");
x.t("code","link");
x.t("code","harder");
x.t("code","gosu");
x.t("code","prints");
x.t("collapse","tests");
x.t("theory","chaining");
x.t("adds","logical");
x.t("adds","predicate");
x.t("return","new");
x.t("return","rows");
x.t("return","query");
x.t("parallels","structure");
x.t("previous","example");
x.t("previous","specified");
x.t("previous","predicate");
x.t("previous","predicates");
x.t("previous","restrictions");
x.t("q1.or","or1");
x.t("database","functions");
x.t("matches","english");
x.t("matches","30");
x.t("greater","11");
x.t("greater","call");
x.t("together","logical");
x.t("together","predicates");
x.t("documentation","refers");
x.t("embedded","methods");
x.t("variable","name");
x.t("variable","simply");
x.t("variable","names");
x.t("parentheses","pseudo-code");
x.t("occurred","messsage");
x.t("less","33");
x.t("unionquery","q1.union");
x.t("msg","string");
x.t("compared","new");
x.t("consider","creating");
x.t("consider","trying");
x.t("consider","simply");
x.t("include","default");
x.t("subqueries","consider");
x.t("subqueries","using");
x.t("predicate","method");
x.t("predicate","default");
x.t("predicate","methods");
x.t("predicate","boolean");
x.t("predicate","linking");
x.t("predicate","following");
x.t("predicate","using");
x.t("predicate","series");
x.t("predicate","var");
x.t("value","matches");
x.t("value","greater");
x.t("value","less");
x.t("unionquery.select","union");
x.t("usage","methods");
x.t("power","query");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("several","ways");
x.t("already","added");
x.t("already","using");
x.t("unionquery.intersect","(q1)");
x.t("specific","semantic");
x.t("depending","data");
x.t("builder","overview");
x.t("builder","query");
x.t("repeatedly","query");
x.t("generate","return");
x.t("word","name");
x.t("represent","following");
x.t("clauses","test");
x.t("clauses","alternative");
x.t("takes","list");
x.t("page","error");
x.t("separate","lines");
x.t("separate","commands");
x.t("separate","queries");
x.t("q1.intersect","(q2)");
x.t("and1.compare","divisionnumber");
x.t("and1.compare","priority");
x.t("and1.compare","itemnum");
x.t("output","words");
x.t("query","method");
x.t("query","building");
x.t("query","printresults");
x.t("query","table");
x.t("query","create");
x.t("query","always");
x.t("query","user");
x.t("query","uses");
x.t("query","type");
x.t("query","public");
x.t("query","however");
x.t("query","checks");
x.t("query","apis");
x.t("query","consists");
x.t("query","finds");
x.t("query","add");
x.t("query","union");
x.t("query","demonstrates");
x.t("query","string");
x.t("query","approaches");
x.t("query","feature");
x.t("query","represents");
x.t("query","instead");
x.t("query","code");
x.t("query","several");
x.t("query","builder");
x.t("query","separate");
x.t("query","query");
x.t("query","above");
x.t("query","priority");
x.t("query","otherwise");
x.t("query","using");
x.t("query","returns");
x.t("query","intersection");
x.t("query","builders");
x.t("query","object");
x.t("data","sample");
x.t("data","clauses");
x.t("complexquery","unionquery.intersect");
x.t("iquerybuilder","means");
x.t("information","basic");
x.t("information","blocks");
x.t("reminds","linking");
x.t("result","type");
x.t("result","previous");
x.t("result","query");
x.t("result","intersect");
x.t("save","new");
x.t("intersectionquery.select","intersection");
x.t("defined","within");
x.t("defined","block");
x.t("defined","in-line");
x.t("meaning","example");
x.t("meaning","previous");
x.t("examples","used");
x.t("examples","or_grouping_var");
x.t("predicates","tables");
x.t("predicates","inside");
x.t("predicates","default");
x.t("predicates","single");
x.t("predicates","link");
x.t("predicates","advanced");
x.t("predicates","new");
x.t("predicates","details");
x.t("predicates","add");
x.t("predicates","group");
x.t("predicates","simple");
x.t("predicates","true");
x.t("predicates","union");
x.t("predicates","alternatively");
x.t("predicates","methods");
x.t("predicates","combine");
x.t("predicates","linked");
x.t("predicates","logical");
x.t("predicates","function");
x.t("predicates","combining");
x.t("predicates","documentation");
x.t("predicates","together");
x.t("predicates","compared");
x.t("predicates","already");
x.t("predicates","query");
x.t("predicates","defined");
x.t("predicates","priority");
x.t("predicates","call");
x.t("predicates","groupings");
x.t("predicates","using");
x.t("implicitly","linked");
x.t("(q2)","however");
x.t("(q2)","var");
x.t("values","comparein");
x.t("values","information");
x.t("case","code");
x.t("intersect","operation");
x.t("intersect","union");
x.t("intersect","methods");
x.t("intersect","commands");
x.t("intersect","previous");
x.t("default_data:1","default_data:2");
x.t("default_data:1","var");
x.t("default_data:1","super");
x.t("print","(msg)");
x.t("print","public");
x.t("print","multiple");
x.t("print","results");
x.t("above","examples");
x.t("structure","parentheses");
x.t("priority","11");
x.t("priority","greaterthan");
x.t("priority","property");
x.t("two","items");
x.t("two","separate");
x.t("users","sample");
x.t("users","public");
x.t("default_data:2","system");
x.t("default_data:2","var");
x.t("note","functionally");
x.t("note","cannot");
x.t("otherwise","consider");
x.t("itemnum","property");
x.t("itemnum","33");
x.t("itemnum","lessthan");
x.t("cases","resulting");
x.t("gw.api.database.iquerybeanresult","var");
x.t("mentioned","earlier");
x.t("implicit","logical");
x.t("implicit","predicate");
x.t("itself","call");
x.t("joins","query");
x.t("call","block");
x.t("call","union");
x.t("call","variable");
x.t("call","predicate");
x.t("call","compare");
x.t("created","usage");
x.t("created","using");
x.t("numbers","unique");
x.t("following","example");
x.t("following","pseudo-code");
x.t("following","english");
x.t("following","simple");
x.t("following","name");
x.t("following","predicate");
x.t("following","query");
x.t("following","predicates");
x.t("following","var");
x.t("run","union");
x.t("run","predicate");
x.t("either","original");
x.t("either","predicate");
x.t("system","ability");
x.t("system","user");
x.t("clause","combine");
x.t("clause","consider");
x.t("clause","query");
x.t("special","functions");
x.t("and_grouping_var","refer");
x.t("and_grouping_var","predicateorbooleangrouping");
x.t("and_grouping_var","and_grouping_var");
x.t("links","three");
x.t("used","pattern");
x.t("lessthan","33");
x.t("using","chaining");
x.t("using","pattern");
x.t("using","block");
x.t("using","union");
x.t("using","gosu");
x.t("using","subselect");
x.t("using","methods");
x.t("using","three");
x.t("using","comparein");
x.t("using","logical");
x.t("using","embedded");
x.t("using","understanding");
x.t("//","print");
x.t("groupings","example");
x.t("groupings","earlier");
x.t("groupings","return");
x.t("groupings","following");
x.t("class","methods");
x.t("understanding","syntax");
x.t("similarly","methods");
x.t("intersection","queries");
x.t("intersection","query");
x.t("intersection","two");
x.t("intersection","contains");
x.t("compare","method");
x.t("compare","boolean");
x.t("compare","contrast");
x.t("compare","predicate");
x.t("compare","repeatedly");
x.t("series","complex");
x.t("series","default");
x.t("series","need");
x.t("series","calling");
x.t("series","predicates");
x.t("returns","no");
x.t("returns","records");
x.t("returns","rows");
x.t("across","query");
x.t("pass","method");
x.t("grouping","directly");
x.t("grouping","methods");
x.t("grouping","calling");
x.t("grouping","variable");
x.t("grouping","created");
x.t("or_grouping_var","predicateorbooleangrouping");
x.t("or_grouping_var","and_grouping_var");
x.t("or_grouping_var","or_grouping_var");
x.t("alternative","approach");
x.t("behavior","new");
x.t("behavior","predicates");
x.t("operations","advanced");
x.t("operations","chain");
x.t("modify","original");
x.t("modify","predicates");
x.t("names","indicate");
x.t("var","printresults");
x.t("var","q1");
x.t("var","q2");
x.t("var","intersectionquery");
x.t("var","text_val=eval");
x.t("var","unionquery");
x.t("var","complexquery");
x.t("restrictions","add");
x.t("restrictions","methods");
x.t("restrictions","linking");
x.t("describe","final");
x.t("naming","block");
x.t("naming","gosu");
x.t("builders","q1.or");
x.t("object","iterate");
x.t("object","save");
x.t("contains","rows");
x.t("contains","two");
x.t("tester","run");
x.t("server","include");
x.t("gets","users");
x.t("super","user");
x.t("phrase","previous");
x.t("phrase","query");
x.t("specify","includes");
x.t("item","grouping");
}
