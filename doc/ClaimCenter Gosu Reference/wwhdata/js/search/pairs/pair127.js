function FileData_Pairs(x)
{
x.t("example","declare");
x.t("example","suppose");
x.t("example","code");
x.t("example","following");
x.t("example","var");
x.t("return_type","example");
x.t("return_type","type_list");
x.t("provide","name");
x.t("parameter","within");
x.t("method","whose");
x.t("preferred","syntax");
x.t("lists","within");
x.t("lists","parameter_variable_name");
x.t("within","function");
x.t("refer","block");
x.t("kinds","arguments");
x.t("required","block");
x.t("callback","block");
x.t("callback","function");
x.t("arguments","block");
x.t("discouraged","declarations");
x.t("void","easier");
x.t("void","//");
x.t("text_val.select","link");
x.t("type","block");
x.t("type","type_list");
x.t("type","block_literal_2");
x.t("type","string");
x.t("type","literal");
x.t("type","return");
x.t("type","described");
x.t("type","literals");
x.t("parameter_variable_name","list_of_types");
x.t("calls","callback");
x.t("mymethod","mycallback");
x.t("form","type");
x.t("link","directly");
x.t("single","string");
x.t("want","refer");
x.t("want","declare");
x.t("new","mytest.test1");
x.t("contents","/contents");
x.t("contents","hello");
x.t("block","parameter");
x.t("block","type");
x.t("block","block");
x.t("block","type_list");
x.t("block","name");
x.t("block","argument");
x.t("block","string");
x.t("block","suppose");
x.t("block","literal");
x.t("block","define");
x.t("block","types");
x.t("block","keyword");
x.t("block","variable");
x.t("block","takes");
x.t("block","defined");
x.t("block","literals");
x.t("block","list_of_types");
x.t("block","pass");
x.t("includes","function");
x.t("messsage","gosu");
x.t("type_list","return_type");
x.t("type_list","type");
x.t("type_list","null");
x.t("guide","gosu");
x.t("directly","part");
x.t("directly","page");
x.t("declare","function");
x.t("declare","variable");
x.t("specified","block");
x.t("test","code");
x.t("text_val.focus","text_val.select");
x.t("definition","function");
x.t("name","block");
x.t("name","mycallback");
x.t("no","value");
x.t("test1","function");
x.t("gosu","blocks");
x.t("gosu","reference");
x.t("gosu","class");
x.t("follows","var");
x.t("argument","provide");
x.t("argument","method");
x.t("argument","lists");
x.t("argument","type");
x.t("argument","block");
x.t("argument","types");
x.t("argument","called");
x.t("argument","using");
x.t("argument","returns");
x.t("argument","mycallback");
x.t("declares","block");
x.t("part","declarations");
x.t("part","declaration");
x.t("block_literal_1","block");
x.t("block_literal_1","block_literal_2");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("block_literal_2","block_literal_1");
x.t("block_literal_2","parameter_name");
x.t("declarations","block");
x.t("declarations","define");
x.t("declarations","optionally");
x.t("omit","argument");
x.t("parameter_name","type_list");
x.t("string","void");
x.t("string","block");
x.t("string","argument");
x.t("string","declarations");
x.t("string","string");
x.t("string","in-line");
x.t("string","number");
x.t("string","value");
x.t("string","print");
x.t("string","package");
x.t("contain","block");
x.t("earlier","var");
x.t("understand","actual");
x.t("in-line","block");
x.t("in-line","argument");
x.t("/contents","block");
x.t("/contents","versions");
x.t("/contents","even");
x.t("formal","bnf");
x.t("error","occurred");
x.t("blocks","block");
x.t("a.mymethod","string");
x.t("a.mymethod","print");
x.t("bnf","notation");
x.t("syntax","block");
x.t("syntax","variablename");
x.t("syntax","mycallback");
x.t("variablename","list_of_types");
x.t("suppose","want");
x.t("suppose","block");
x.t("outer","function");
x.t("means","reference");
x.t("means","variable");
x.t("concise","code");
x.t("guidewire_selectall","var");
x.t("literal","directly");
x.t("literal","part");
x.t("literal","means");
x.t("literal","blockliteral");
x.t("literal","specifically");
x.t("number","means");
x.t("function","calls");
x.t("function","mymethod");
x.t("function","definition");
x.t("function","argument");
x.t("function","string");
x.t("function","guidewire_selectall");
x.t("function","takes");
x.t("function","took");
x.t("function","using");
x.t("define","block");
x.t("define","argument");
x.t("define","variable");
x.t("words","simply");
x.t("blockliteral","block_literal_1");
x.t("types","part");
x.t("types","argument");
x.t("types","declarations");
x.t("types","bnf");
x.t("types","already");
x.t("keyword","specified");
x.t("keyword","although");
x.t("keyword","strictly");
x.t("assigned","value");
x.t("simply","following");
x.t("reference","block");
x.t("reference","guide");
x.t("code","follows");
x.t("code","declares");
x.t("code","omit");
x.t("code","var");
x.t("return","value");
x.t("variable","contain");
x.t("variable","assigned");
x.t("variable","declaration");
x.t("actual","example");
x.t("whose","argument");
x.t("occurred","messsage");
x.t("specifically","kinds");
x.t("value","want");
x.t("value","block");
x.t("value","outer");
x.t("value","code");
x.t("value","returns");
x.t("easier","understand");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("declaration","preferred");
x.t("declaration","block");
x.t("mytest","class");
x.t("already","defined");
x.t("takes","callback");
x.t("takes","type");
x.t("takes","single");
x.t("although","discouraged");
x.t("hello","world");
x.t("notation","block");
x.t("notation","notation");
x.t("notation","interested");
x.t("page","error");
x.t("took","argument");
x.t("defined","in-line");
x.t("defined","words");
x.t("interested","formal");
x.t("described","earlier");
x.t("called","mycallback");
x.t("print","contents");
x.t("print","following");
x.t("optionally","block");
x.t("literals","form");
x.t("literals","block");
x.t("literals","function");
x.t("list_of_types","return_type");
x.t("package","mytest");
x.t("call","callback");
x.t("following","contents");
x.t("following","gosu");
x.t("following","syntax");
x.t("following","code");
x.t("mytest.test1","a.mymethod");
x.t("using","syntax");
x.t("using","following");
x.t("class","includes");
x.t("class","test1");
x.t("//","call");
x.t("returns","block");
x.t("returns","no");
x.t("returns","string");
x.t("pass","string");
x.t("world","test");
x.t("world","/contents");
x.t("var","new");
x.t("var","block");
x.t("var","text_val=eval");
x.t("var","string");
x.t("versions","print");
x.t("strictly","required");
x.t("even","concise");
x.t("mycallback","block");
x.t("mycallback","string");
x.t("mycallback","define");
x.t("mycallback","hello");
}
