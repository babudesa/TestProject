function FileData_Pairs(x)
{
x.t("supports","following");
x.t("example","bit-wise");
x.t("example","logical");
x.t("example","expression");
x.t("example","decimal");
x.t("expression\u2019s","type");
x.t("determined","compile");
x.t("negation","gosu");
x.t("negation","operand");
x.t("negation","typeof");
x.t("always","number");
x.t("binary","value");
x.t("binary","digit");
x.t("unary","single");
x.t("unary","expressions");
x.t("uses","operator");
x.t("field","maintains");
x.t("text_val.select","link");
x.t("state","items");
x.t("type","checking");
x.t("type","operand");
x.t("type","expression");
x.t("type","result");
x.t("basic","type");
x.t("evaluates","decimal");
x.t("time","example");
x.t("time","resolve");
x.t("evaluate","specific");
x.t("reverses","1000");
x.t("bit-wise","bit-wise");
x.t("bit-wise","operation");
x.t("bit-wise","expression");
x.t("bit-wise","following");
x.t("bit-wise","operator");
x.t("sections","describe");
x.t("however","following");
x.t("link","directly");
x.t("single","boolean");
x.t("single","operand");
x.t("3.14","-1.14");
x.t("items","flags");
x.t("messsage","gosu");
x.t("namespaces","bit-wise");
x.t("numerical","value");
x.t("flags","map");
x.t("guide","gosu");
x.t("bits","inverts");
x.t("false","false");
x.t("false","true");
x.t("directly","page");
x.t("true","however");
x.t("true","false");
x.t("byte","field");
x.t("text_val.focus","text_val.select");
x.t("operation","manipulate");
x.t("gosu","supports");
x.t("gosu","uses");
x.t("gosu","operators");
x.t("gosu","reference");
x.t("inverts","different");
x.t("inverts","bit");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("checking","bit-wise");
x.t("numeral","single");
x.t("boolean","value");
x.t("operand","number");
x.t("operand","expressions");
x.t("operand","valid");
x.t("supertype","runtime");
x.t("indicate","numeric");
x.t("determine","meta");
x.t("sign","bit");
x.t("sign","operator");
x.t("map","binary");
x.t("-42","3.14");
x.t("-42","-42");
x.t("meta","information");
x.t("entire","numeral");
x.t("manipulate","bit");
x.t("mask","technique");
x.t("mask","bit");
x.t("exclamation","point");
x.t("1000","binary");
x.t("error","occurred");
x.t("-value","examples");
x.t("point","treats");
x.t("operators","expressions");
x.t("syntax","-value");
x.t("logical","operator");
x.t("resolve","supertype");
x.t("guidewire_selectall","var");
x.t("importing","types");
x.t("number","binary");
x.t("number","byte");
x.t("number","syntax");
x.t("number","data");
x.t("function","guidewire_selectall");
x.t("technique","number");
x.t("expressions","unary");
x.t("expressions","gosu");
x.t("expressions","importing");
x.t("expressions","function");
x.t("expressions","value");
x.t("expressions","numeric");
x.t("cannot","fully");
x.t("may","evaluate");
x.t("different","logical");
x.t("types","package");
x.t("compile","time");
x.t("changes","-8");
x.t("reference","guide");
x.t("fully","determined");
x.t("assigns","boolean");
x.t("occurred","messsage");
x.t("typeof","determine");
x.t("typeof","expressions");
x.t("typeof","expression");
x.t("value","bits");
x.t("value","true");
x.t("value","sign");
x.t("value","typeof");
x.t("value","following");
x.t("value","-8");
x.t("value","series");
x.t("value","0111");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("specific","subtype");
x.t("expression","evaluates");
x.t("expression","cannot");
x.t("expression","may");
x.t("expression","compile");
x.t("expression","information");
x.t("expression","result");
x.t("subtype","numeric");
x.t("valid","data");
x.t("(bit)","field");
x.t("page","error");
x.t("-1.14","typeof");
x.t("data","type");
x.t("information","expression\u2019s");
x.t("information","basic");
x.t("result","always");
x.t("result","type");
x.t("result","-42");
x.t("examples","expression");
x.t("bit","bit-wise");
x.t("bit","mask");
x.t("bit","changes");
x.t("bit","including");
x.t("runtime","expression");
x.t("numeric","negation");
x.t("numeric","value");
x.t("treats","numerical");
x.t("treats","entire");
x.t("treats","numeric");
x.t("positive","sign");
x.t("package","namespaces");
x.t("following","example");
x.t("following","unary");
x.t("following","sections");
x.t("-8","binary");
x.t("-8","bit-wise");
x.t("digit","(bit)");
x.t("series","bits");
x.t("decimal","number");
x.t("decimal","value");
x.t("operator","example");
x.t("operator","indicate");
x.t("operator","exclamation");
x.t("operator","assigns");
x.t("operator","typeof");
x.t("operator","treats");
x.t("operator","tilde");
x.t("maintains","state");
x.t("var","text_val=eval");
x.t("describe","expressions");
x.t("including","sign");
x.t("tilde","treats");
x.t("0111","reverses");
x.t("0111","positive");
}
