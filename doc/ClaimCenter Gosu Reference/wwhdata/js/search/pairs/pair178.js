function FileData_Pairs(x)
{
x.t("example","store");
x.t("example","suppose");
x.t("example","function");
x.t("example","following");
x.t("example","//");
x.t("example","using");
x.t("statements","uses");
x.t("statements","instead");
x.t("readable","gosu");
x.t("synchronized","block");
x.t("supports","assigning");
x.t("method","performs");
x.t("method","blocks");
x.t("method","release");
x.t("method","main");
x.t("method","call");
x.t("method","returns");
x.t("possible","returning");
x.t("monitorlock","using");
x.t("within","gosu");
x.t("within","using");
x.t("implement","return");
x.t("cast","arbitrary");
x.t("cast","java");
x.t("cast","object");
x.t("java.util.concurrent.locks.reentrantlock","class");
x.t("ables","assigning");
x.t("rfc","new");
x.t("static","variables");
x.t("static","variable");
x.t("static","var");
x.t("_somevar","property");
x.t("refer","http://en.wikipedia.org/wiki/monitor_");
x.t("create","gosu");
x.t("create","resource");
x.t("variables","variables");
x.t("variables","inside");
x.t("variables","stored");
x.t("variables","assigning");
x.t("ensures","objects");
x.t("command-seperated","list");
x.t("related","apis");
x.t("performs","task");
x.t("imonitorlock","cast");
x.t("imonitorlock","useful");
x.t("imonitorlock","//");
x.t("imonitorlock","object");
x.t("arguments","enter");
x.t("ability","assign");
x.t("rbuff.array","return");
x.t("try","finally");
x.t("try","return");
x.t("try","//");
x.t("_lock.lock","try");
x.t("topic","re-entrant");
x.t("creates","acquires");
x.t("uses","java.util.concurrent.locks.reentrantlock");
x.t("uses","lock");
x.t("uses","java.util.concurrent");
x.t("uses","gosu");
x.t("uses","itself");
x.t("retvalue","_somevar.somemethod");
x.t("retvalue","note");
x.t("retvalue","object");
x.t("casted","gosu");
x.t("text_val.select","link");
x.t("statement","automatically");
x.t("statement","list");
x.t("statement","structure");
x.t("statement","pass");
x.t("interface","imonitorlock");
x.t("interface","includes");
x.t("interface","information");
x.t("interface","contains");
x.t("type","shared");
x.t("exit","method");
x.t("exit","code");
x.t("acquire","creates");
x.t("acquire","resources");
x.t("calls","method");
x.t("form","define");
x.t("form","//");
x.t("re-entrant","objects");
x.t("re-entrant","concurrent");
x.t("execution","example");
x.t("multiple","items");
x.t("multiple","threads");
x.t("multiple","item");
x.t("gw.lang.ireentrant","interface");
x.t("inside","statement");
x.t("inside","declaration");
x.t("inside","using");
x.t("lfc.position","lfc.size");
x.t("releases","ones");
x.t("releases","closes");
x.t("lock","within");
x.t("lock","static");
x.t("lock","calls");
x.t("lock","function");
x.t("lock","synchronize");
x.t("lock","class");
x.t("lock","using");
x.t("lock","adding");
x.t("lock","even");
x.t("property","someprop");
x.t("property","accessor");
x.t("property","function");
x.t("automatically","cleans");
x.t("protect","against");
x.t("comma","character");
x.t("(this)",".channel");
x.t("apis","java");
x.t("objects","objects");
x.t("objects","gosu");
x.t("objects","simplify");
x.t("objects","function");
x.t("objects","properly");
x.t("objects","concurrency");
x.t("objects","help");
x.t("link","directly");
x.t("access","multiple");
x.t("access","file");
x.t("access","data");
x.t("access","shared");
x.t("access","appropriate");
x.t("new","fileoutputstream");
x.t("new","fileinputstream");
x.t("new","reentrantlock");
x.t("cleans","up");
x.t("single","variable");
x.t("want","access");
x.t("want","reference");
x.t("contents","simplify");
x.t("contents","probably");
x.t("items","command-seperated");
x.t("items","using");
x.t("lfc.size","lfc.read");
x.t("java.util.concurrent","static");
x.t("java.util.concurrent","property");
x.t("java.util.concurrent","synchronize");
x.t("synchronizes","using");
x.t("block","java");
x.t("block","imposes");
x.t("usually","better");
x.t("includes","java");
x.t("messsage","gosu");
x.t("java.util.concurrent.locks.lock","interface");
x.t("java.util.concurrent.locks.lock","using");
x.t("pacakge","reentrantlock");
x.t("list","inside");
x.t("list","instead");
x.t("file","handle");
x.t("file","iterate");
x.t("someprop","object");
x.t("beginning","topic");
x.t("during","enter");
x.t("simplifies","code");
x.t("assign","variables");
x.t("assign","variable");
x.t("guide","concurrency");
x.t("guide","note");
x.t("throws","exceptions");
x.t("false","gosu");
x.t("false","out.write");
x.t("fails","create");
x.t("locks","refer");
x.t("locks","exit");
x.t("locks","gosu");
x.t("locks","reentrant");
x.t("locks","code");
x.t("directly","page");
x.t("handle","pass");
x.t("true","lbuff.clear");
x.t("text_val.focus","text_val.select");
x.t("simplest","form");
x.t("definition","next");
x.t("definition","define");
x.t("stored","gosu");
x.t("no","arguments");
x.t("bytebuffer.allocate","(buffersize)");
x.t("gosu","ensures");
x.t("gosu","interface");
x.t("gosu","releases");
x.t("gosu","synchronizes");
x.t("gosu","attempt");
x.t("gosu","blocks");
x.t("gosu","recognize");
x.t("gosu","simply");
x.t("gosu","reference");
x.t("gosu","code");
x.t("gosu","java");
x.t("gosu","using");
x.t("gosu","class");
x.t("returning","value");
x.t("iterate","across");
x.t("references","variable_name");
x.t("reentrant","objects");
x.t("reentrant","object");
x.t("_somevar.somemethod","finally");
x.t("_somevar.somemethod","return");
x.t("_somevar.somemethod","//");
x.t("lbuff","bytebuffer.allocate");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("alternatively","changes");
x.t("prominent","type");
x.t("useful","cast");
x.t("useful","expression");
x.t("methods","no");
x.t("lbuff.clear","rbuff.clear");
x.t("up","lock");
x.t("up","words");
x.t("combine","multiple");
x.t("accessor","function");
x.t("concurrent","access");
x.t("concurrent","code");
x.t("write","readable");
x.t("attempt","acquire");
x.t("resource","acquire");
x.t("later-appearing","items");
x.t("simplify","concurrent");
x.t("simplify","kind");
x.t("store","data");
x.t("_lock1","_lock2");
x.t("ones","succeed");
x.t("error","occurred");
x.t("contrast","write");
x.t("contrast","traditionally-structured");
x.t("_lock.unlock","alternatively");
x.t("_lock.unlock","contrast");
x.t("blocks","uses");
x.t("blocks","code");
x.t("recognize","valid");
x.t("equivalent","synchronized");
x.t("something","single");
x.t("_lock2","_lock3");
x.t("next","define");
x.t("finally","statements");
x.t("finally","_lock.unlock");
x.t("suppose","call");
x.t("_lock3","//");
x.t("feature","ability");
x.t("guidewire_selectall","var");
x.t("function","monitorlock");
x.t("function","uses");
x.t("function","guidewire_selectall");
x.t("function","usereentrantlocknew");
x.t("function","usereentrantlockold");
x.t("approach","possible");
x.t("approach","uses");
x.t("approach","effectively");
x.t("traditionally-structured","verbose");
x.t("_lock.with","\\-");
x.t("better","using");
x.t("implements","java.util.concurrent.locks.lock");
x.t("implements","gosu");
x.t("(rbuff)","arrays.equals");
x.t("define","static");
x.t("define","property");
x.t("safe","access");
x.t("against","concurrent");
x.t("usereentrantlocknew","using");
x.t(".channel","var");
x.t("arrays.equals","lbuff.array");
x.t("words","object");
x.t("1.5","concurrency");
x.t("instead","usually");
x.t("instead","gosu");
x.t("arbitrary","object");
x.t("language","assigning");
x.t("(lbuff)","rfc.read");
x.t("cleaned","up");
x.t("changes","within");
x.t("properly","lock");
x.t("properly","cleaned");
x.t("release","locks");
x.t("keyword","monitor");
x.t("keyword","//");
x.t("keyword","using");
x.t("fileoutputstream","false");
x.t("acquires","successfully");
x.t("closes","disposes");
x.t("simply","releases");
x.t("reference","inside");
x.t("reference","guide");
x.t("task","synchronize");
x.t("code","uses");
x.t("code","execution");
x.t("code","assign");
x.t("code","throws");
x.t("code","references");
x.t("code","implements");
x.t("code","properly");
x.t("code","following");
x.t("code","using");
x.t("return","statements");
x.t("return","retvalue");
x.t("return","false");
x.t("return","true");
x.t("return","_somevar.somemethod");
x.t("readwritelock","condition");
x.t("fileinputstream","(this)");
x.t("fileinputstream","(that)");
x.t("succeed","information");
x.t("successfully","gosu");
x.t("java","http://java.sun.com/docs/books/tutorial/essential/concurrency/index.html");
x.t("java","1.5");
x.t("java","language");
x.t("java","monitor");
x.t("java","classes");
x.t("variable\u2019s","data");
x.t("variable","example");
x.t("variable","inside");
x.t("variable","lock");
x.t("variable","want");
x.t("variable","expression");
x.t("variable","definitions");
x.t("ensure","protect");
x.t("enter","method");
x.t("enter","exit");
x.t("effectively","equivalent");
x.t("kind","code");
x.t("(that)",".channel");
x.t("concurrency","related");
x.t("concurrency","concurrency");
x.t("concurrency","monitor");
x.t("concurrency","classes");
x.t("occurred","messsage");
x.t("longer","(non-recommended)");
x.t("synchronize","approach");
x.t("synchronize","variable\u2019s");
x.t("synchronize","data");
x.t("imposes","restrictions");
x.t("usereentrantlockold","_lock.lock");
x.t("main","work");
x.t("value","block");
x.t("lfc","new");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("declaration","example");
x.t("declaration","using");
x.t("rbuff.clear","return");
x.t("condition","casted");
x.t("(synchronization)","implements");
x.t("lfc.read","(lbuff)");
x.t("although","approach");
x.t("valid","reentrant");
x.t("(non-recommended)","form");
x.t("expression","something");
x.t("expression","declaration");
x.t("expression","separate");
x.t("expression","using");
x.t("expression","//");
x.t("expression","pass");
x.t("lbuff.array","rbuff.array");
x.t("clauses","gosu");
x.t("clauses","object");
x.t("page","error");
x.t("help","manage");
x.t("corruption","prominent");
x.t("separate","item");
x.t("data","example");
x.t("data","access");
x.t("data","simplest");
x.t("data","corruption");
x.t("data","shared");
x.t("data","prevent");
x.t("data","class");
x.t("information","concurrency");
x.t("information","monitor");
x.t("information","using");
x.t("(buffersize)","lfc.position");
x.t("(buffersize)","var");
x.t("shared","re-entrant");
x.t("shared","multiple");
x.t("shared","data");
x.t("appropriate","during");
x.t("probably","want");
x.t("monitor","lock");
x.t("monitor","locks");
x.t("prevent","data");
x.t("prevent","simultaneous");
x.t("reentrantlock","static");
x.t("reentrantlock","new");
x.t("reentrantlock","function");
x.t("reentrantlock","readwritelock");
x.t("reentrantlock","//");
x.t("lifecycle","management");
x.t("simultaneous","access");
x.t("structure","beginning");
x.t("out.write","content");
x.t("character","example");
x.t("classes","pacakge");
x.t("classes","package");
x.t("verbose","lock");
x.t("note","although");
x.t("note","information");
x.t("note","resources");
x.t("two","methods");
x.t("variable_name","variable");
x.t("variable_name","expression");
x.t("work","property");
x.t("work","gosu");
x.t("work","combine");
x.t("work","finally");
x.t("work","similarly");
x.t("itself","gosu");
x.t("itself","using");
x.t("package","java.util.concurrent");
x.t("call","method");
x.t("call","code");
x.t("stuff","approach");
x.t("clause","supports");
x.t("clause","lock");
x.t("clause","contents");
x.t("clause","simplifies");
x.t("clause","reentrant");
x.t("clause","useful");
x.t("clause","declaration");
x.t("clause","expression");
x.t("\\-","retvalue");
x.t("manage","safe");
x.t("following","method");
x.t("following","code");
x.t("following","attributes");
x.t("special","keyword");
x.t("management","using");
x.t("class","static");
x.t("class","gw.lang.ireentrant");
x.t("class","definition");
x.t("class","variable");
x.t("class","itself");
x.t("class","using");
x.t("using","imonitorlock");
x.t("using","try");
x.t("using","statement");
x.t("using","locks");
x.t("using","_lock1");
x.t("using","keyword");
x.t("using","longer");
x.t("using","expression");
x.t("using","clauses");
x.t("using","clause");
x.t("using","special");
x.t("using","using");
x.t("using","_lock");
x.t("using","var");
x.t("//","property");
x.t("//","code");
x.t("//","main");
x.t("//","stuff");
x.t("//","class");
x.t("similarly","cast");
x.t("vari","ables");
x.t("adding","imonitorlock");
x.t("assigning","variables");
x.t("assigning","variable");
x.t("assigning","vari");
x.t("pass","multiple");
x.t("pass","using");
x.t("returns","file");
x.t("across","contents");
x.t("_lock","new");
x.t("_lock","return");
x.t("_lock","reentrantlock");
x.t("_lock","//");
x.t("definitions","var");
x.t("var","rfc");
x.t("var","_somevar");
x.t("var","retvalue");
x.t("var","new");
x.t("var","lbuff");
x.t("var","text_val=eval");
x.t("var","keyword");
x.t("var","lfc");
x.t("var","variable_name");
x.t("var","_lock");
x.t("var","rbuff");
x.t("restrictions","implement");
x.t("passing","multiple");
x.t("rbuff","bytebuffer.allocate");
x.t("rfc.read","(rbuff)");
x.t("even","code");
x.t("exceptions","contrast");
x.t("disposes","object");
x.t("object","example");
x.t("object","create");
x.t("object","imonitorlock");
x.t("object","_lock.lock");
x.t("object","_lock.with");
x.t("object","monitor");
x.t("object","lifecycle");
x.t("object","note");
x.t("object","following");
x.t("object","using");
x.t("object","var");
x.t("object","object");
x.t("threads","ensure");
x.t("threads","prevent");
x.t("attributes","implements");
x.t("http://en.wikipedia.org/wiki/monitor_","(synchronization)");
x.t("contains","two");
x.t("content","passing");
x.t("item","comma");
x.t("item","feature");
x.t("resources","fails");
x.t("resources","later-appearing");
}
