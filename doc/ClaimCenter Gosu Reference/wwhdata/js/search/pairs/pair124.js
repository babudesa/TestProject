function FileData_Pairs(x)
{
x.t("example","creates");
x.t("example","type");
x.t("example","suppose");
x.t("example","number");
x.t("example","100");
x.t("example","note");
x.t("example","following");
x.t("passed","block");
x.t("statements","statement");
x.t("statements","surrounded");
x.t("statements","frees");
x.t("statements","expressions");
x.t("statements","separate");
x.t("statements","style");
x.t("statements","semi-colon");
x.t("readable","without");
x.t("coding","guidelines");
x.t("referencing","variable");
x.t("method","parameter");
x.t("method","next");
x.t("arrow-like","pair");
x.t("parameter","type");
x.t("parameter","list");
x.t("parameter","names");
x.t("honors","theoretical");
x.t("name/type","pairs");
x.t("just","normal");
x.t("just","defining");
x.t("defines","parameters");
x.t("anything","legal");
x.t("greek","lambda");
x.t("rather","statement");
x.t("lists","line");
x.t("lists","explicitly");
x.t("within","block");
x.t("infers","block\u2019s");
x.t("infers","block");
x.t("implement","block");
x.t("theoretical","framework");
x.t("static","(fixed)");
x.t("create","gosu");
x.t("always","statements");
x.t("variables","gosu");
x.t("variables","including");
x.t("normal","functions");
x.t("10","20");
x.t("arguments","method");
x.t("arguments","name/type");
x.t("arguments","arguments");
x.t("arguments","simple");
x.t("regular","functions");
x.t("block\u2019s","return");
x.t("creates","simple");
x.t("pair","characters");
x.t("uses","type");
x.t("uses","identical");
x.t("single-statement","statement");
x.t("appearance","honors");
x.t("semicolons","however");
x.t("line","within");
x.t("line","executed");
x.t("line","executes");
x.t("text_val.select","link");
x.t("statement","example");
x.t("statement","lists");
x.t("statement","list");
x.t("statement","return");
x.t("statement","var");
x.t("displays","pair");
x.t("displays","guidewire");
x.t("displays","block");
x.t("provided","instead");
x.t("basic","block");
x.t("type","static");
x.t("type","type");
x.t("type","explicitly");
x.t("type","backslash");
x.t("type","name");
x.t("type","allows");
x.t("type","string");
x.t("type","notice");
x.t("type","number");
x.t("type","returned");
x.t("type","return");
x.t("type","inferred");
x.t("type","actually");
x.t("type","expression");
x.t("type","inference");
x.t("type","following");
x.t("change","following");
x.t("in-scope","variables");
x.t("providing","statement");
x.t("blockwithstatementbody","block");
x.t("blockwithstatementbody","return");
x.t("blockwithstatementbody","value");
x.t("blockwithstatementbody","\\-");
x.t("open","parenthesis");
x.t("fact","explicit");
x.t("colon","character");
x.t("explicitly","declare");
x.t("explicitly","typing");
x.t("explicitly","include");
x.t("explicitly","visible");
x.t("time","although");
x.t("followed","series");
x.t("form","arrow-like");
x.t("however","providing");
x.t("however","important");
x.t("however","cases");
x.t("multiple","statements");
x.t("guidewire","strongly");
x.t("invoking","blocks");
x.t("text","call");
x.t("link","directly");
x.t("greater-than","character");
x.t("certain","cases");
x.t("new","block");
x.t("new","variable");
x.t("block","parameter");
x.t("block","type");
x.t("block","open");
x.t("block","block");
x.t("block","assign");
x.t("block","directly");
x.t("block","definition");
x.t("block","no");
x.t("block","multiplies");
x.t("block","definition\u2019s");
x.t("block","body");
x.t("block","assigned");
x.t("block","return");
x.t("block","adds");
x.t("block","appear");
x.t("block","variable");
x.t("block","value");
x.t("block","expression");
x.t("block","call");
x.t("block","returns");
x.t("block","definitions");
x.t("block","behavior");
x.t("block","var");
x.t("includes","anything");
x.t("30","line");
x.t("messsage","gosu");
x.t("backslash","character");
x.t("hyphen","character");
x.t("list","example");
x.t("list","statements");
x.t("list","defines");
x.t("list","uses");
x.t("list","examining");
x.t("list","gosu");
x.t("list","surrounded");
x.t("list","allows");
x.t("list","number");
x.t("list","expression");
x.t("list","argumentlist");
x.t("list","conflict");
x.t("list","returns");
x.t("braces","words");
x.t("braces","separated");
x.t("braces","var");
x.t("need","braces");
x.t("short","elegant");
x.t("invoked","just");
x.t("add","hyphen");
x.t("add","gosu");
x.t("assignment","statement");
x.t("assignment","operations");
x.t("improves","code");
x.t("recommends","omitting");
x.t("assign","result");
x.t("guide","gosu");
x.t("simple","block");
x.t("simple","return");
x.t("simple","expression");
x.t("simple","one-statement");
x.t("right-hand","side");
x.t("resolves","block");
x.t("directly","page");
x.t("directly","class");
x.t("declare","return");
x.t("examining","return");
x.t("definition","explicitly");
x.t("definition","invocation");
x.t("text_val.focus","text_val.select");
x.t("guidelines","return");
x.t("guidelines","general");
x.t("name","block");
x.t("no","arguments");
x.t("gosu","infers");
x.t("gosu","uses");
x.t("gosu","block");
x.t("gosu","blocks");
x.t("gosu","editor");
x.t("gosu","reference");
x.t("gosu","end");
x.t("gosu","expression");
x.t("framework","blocks");
x.t("typed","even");
x.t("previously","assigned");
x.t("surrounded","braces");
x.t("surrounded","curly");
x.t("argument","type");
x.t("argument","list");
x.t("argument","expressions");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("parameters","passed");
x.t("parameters","regular");
x.t("parameters","returns");
x.t("parameters","passing");
x.t("shortcut","certain");
x.t("standard","function");
x.t("omit","types");
x.t("brace","characters");
x.t("frees","burden");
x.t("allows","block");
x.t("allows","even");
x.t("pairs","separated");
x.t("string","new");
x.t("string","simple");
x.t("string","gosu");
x.t("string","means");
x.t("string","important");
x.t("string","value");
x.t("string","even");
x.t("names.each","myvalue");
x.t("local","variables");
x.t("lines","code");
x.t("defining","arguments");
x.t("defining","block");
x.t("characters","gosu");
x.t("characters","finally");
x.t("characters","arrow");
x.t("characters","particular");
x.t("characters","separate");
x.t("characters","following");
x.t("multiplies","number");
x.t("understand","return");
x.t("functions","referencing");
x.t("functions","however");
x.t("legal","right-hand");
x.t("concatenated","string");
x.t("definition\u2019s","backslash");
x.t("definition\u2019s","argument");
x.t("error","occurred");
x.t("blocks","line");
x.t("blocks","statement");
x.t("blocks","basic");
x.t("blocks","invoked");
x.t("blocks","blocks");
x.t("blocks","derive");
x.t("blocks","returns");
x.t("body","blockbody");
x.t("strongly","recommends");
x.t("notice","block");
x.t("next","add");
x.t("finally","add");
x.t("syntax","parameters");
x.t("syntax","argumentlist");
x.t("syntax","var");
x.t("arrow","symbol");
x.t("suppose","create");
x.t("means","block\u2019s");
x.t("concise","syntax");
x.t("guidewire_selectall","var");
x.t("number","gosu");
x.t("number","argument");
x.t("number","number");
x.t("number","return");
x.t("number","value");
x.t("number","itself");
x.t("number","var");
x.t("side","assignment");
x.t("function","argument");
x.t("function","guidewire_selectall");
x.t("statically","typed");
x.t("define","gosu");
x.t("words","syntax");
x.t("particular","note");
x.t("expressions","thus");
x.t("expressions","closing");
x.t("editor","displays");
x.t("mysum","type");
x.t("mysum","adder");
x.t("instead","statement");
x.t("instead","change");
x.t("burden","explicitly");
x.t("identical","syntax");
x.t("types","parameters");
x.t("returned","value");
x.t("compile","time");
x.t("important","parameter");
x.t("important","gosu");
x.t("important","understand");
x.t("assigned","new");
x.t("assigned","block");
x.t("explicit","code");
x.t("simply","code");
x.t("reference","guide");
x.t("invalid","names.each");
x.t("code","readable");
x.t("code","example");
x.t("code","appearance");
x.t("code","text");
x.t("code","using");
x.t("code","var");
x.t("derive","called");
x.t("end","lines");
x.t("executed","implement");
x.t("return","statements");
x.t("return","single-statement");
x.t("return","statement");
x.t("return","type");
x.t("return","defining");
x.t("return","value");
x.t("return","hello");
x.t("return","values");
x.t("return","following");
x.t("thus","following");
x.t("calculus","gosu");
x.t("adds","two");
x.t("known","squaring");
x.t("square","number");
x.t("square","(10)");
x.t("square","number-");
x.t("100","important");
x.t("appear","short");
x.t("variable","blockwithstatementbody");
x.t("variable","assignment");
x.t("variable","previously");
x.t("variable","mysum");
x.t("variable","expression");
x.t("variable","myresult");
x.t("(10)","//");
x.t("20","variable");
x.t("occurred","messsage");
x.t("curly","braces");
x.t("existing","in-scope");
x.t("typing","return");
x.t("closing","parenthesis");
x.t("include","brace");
x.t("value","block");
x.t("value","30");
x.t("value","return");
x.t("value","variable");
x.t("value","hello");
x.t("value","myresult");
x.t("lambda","calculus");
x.t("lambda","character");
x.t("invocation","basic");
x.t("invocation","function");
x.t("invocation","define");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("inferred","examples");
x.t("inferred","either");
x.t("myvalue","multiple");
x.t("myvalue","instead");
x.t("actually","statically");
x.t("expression","rather");
x.t("expression","statement");
x.t("expression","provided");
x.t("expression","type");
x.t("expression","includes");
x.t("expression","resolves");
x.t("expression","concatenated");
x.t("expression","invalid");
x.t("expression","defined");
x.t("hello","blocks");
x.t("although","explicitly");
x.t("page","error");
x.t("separate","statements");
x.t("semicolon","characters");
x.t("(fixed)","compile");
x.t("squaring","number");
x.t("number-","//no");
x.t("optional","semicolons");
x.t("examples","argument");
x.t("inference","shortcut");
x.t("defined","block");
x.t("result","variable");
x.t("result","var");
x.t("values","return");
x.t("adder","10");
x.t("adder","number");
x.t("character","example");
x.t("character","just");
x.t("character","greek");
x.t("character","followed");
x.t("character","form");
x.t("character","greater-than");
x.t("character","improves");
x.t("called","lambda");
x.t("note","variable");
x.t("note","following");
x.t("executes","following");
x.t("two","numbers");
x.t("argumentlist","standard");
x.t("argumentlist","blockbody");
x.t("cases","block");
x.t("cases","omit");
x.t("itself","known");
x.t("call","block");
x.t("call","code");
x.t("numbers","parameters");
x.t("separated","colon");
x.t("separated","semi-colon");
x.t("either","expression");
x.t("either","following");
x.t("following","example");
x.t("following","block");
x.t("following","simple");
x.t("following","gosu");
x.t("following","names.each");
x.t("following","expression");
x.t("style","guidelines");
x.t("\\-","return");
x.t("class","method");
x.t("semi-colon","characters");
x.t("semi-colon","character");
x.t("//","call");
x.t("conflict","existing");
x.t("symbol","example");
x.t("general","coding");
x.t("using","invoking");
x.t("using","expression");
x.t("series","arguments");
x.t("series","argument");
x.t("omitting","semicolon");
x.t("returns","string");
x.t("returns","result");
x.t("one-statement","statement");
x.t("operations","always");
x.t("names","block");
x.t("limited","local");
x.t("without","optional");
x.t("definitions","semicolon");
x.t("elegant","however");
x.t("behavior","using");
x.t("var","blockwithstatementbody");
x.t("var","text_val=eval");
x.t("var","mysum");
x.t("var","return");
x.t("var","square");
x.t("var","adder");
x.t("var","myresult");
x.t("blockbody","argument");
x.t("blockbody","either");
x.t("passing","block");
x.t("myresult","example");
x.t("myresult","blockwithstatementbody");
x.t("myresult","string");
x.t("myresult","simply");
x.t("myresult","square");
x.t("including","limited");
x.t("even","type");
x.t("even","fact");
x.t("even","concise");
x.t("visible","code");
x.t("parenthesis","example");
x.t("parenthesis","series");
x.t("//no","need");
}
