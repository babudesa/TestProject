function FileData_Pairs(x)
{
x.t("example","assume");
x.t("example","suppose");
x.t("example","instead");
x.t("root","class");
x.t("tells","gosu");
x.t("passed","method");
x.t("coding","errors");
x.t("supports","generics");
x.t("supports","work");
x.t("differently","different");
x.t("method","getlaststepvehicles");
x.t("method","uses");
x.t("method","signature");
x.t("method","alternatively");
x.t("method","understood");
x.t("anything","metaphorically");
x.t("thevalue","variable");
x.t("thevalue","mymap.get");
x.t("defines","parallelism");
x.t("lists","no");
x.t("within","different");
x.t("getlaststepvehicles","groupofvehicles");
x.t("getlaststepvehicles","takes");
x.t("built-in","collection");
x.t("create","sort");
x.t("key","value");
x.t("key","class");
x.t("key","object");
x.t("truck","objects");
x.t("truck","factorygroup");
x.t("truck","object");
x.t("once","method");
x.t("various","types");
x.t("abc","thevalue");
x.t("abc","29");
x.t("arguments","and/or");
x.t("container","objects");
x.t("container","abstract");
x.t("container","class");
x.t("container","object");
x.t("program","automotive");
x.t("factories","during");
x.t("last","step");
x.t("uses","generics");
x.t("guaranteed","contain");
x.t("text_val.select","link");
x.t("errors","accidentally");
x.t("errors","quickly");
x.t("tell","gosu");
x.t("tions","containers");
x.t("support","multiple");
x.t("type","public");
x.t("type","items");
x.t("type","objects");
x.t("type","vehicle");
x.t("type","class");
x.t("type","returns");
x.t("type","vehicles");
x.t("capital","letter");
x.t("key-value","maps");
x.t("time","find");
x.t("time","integer");
x.t("public","function");
x.t("public","class");
x.t("compiler","class");
x.t("sort","custom");
x.t("multiple","truck");
x.t("multiple","car");
x.t("multiple","types");
x.t("multiple","dimensionality");
x.t("multiple","dimensions");
x.t("multiple","van");
x.t("however","collec");
x.t("requirement","generics");
x.t("requirement","features");
x.t("put","key");
x.t("automotive","manufacturing");
x.t("apis","work");
x.t("link","directly");
x.t("objects","multiple");
x.t("objects","suppose");
x.t("objects","collection");
x.t("objects","factorygroup");
x.t("objects","represent");
x.t("objects","appropriate");
x.t("objects","letter");
x.t("items","container");
x.t("want","track");
x.t("want","api");
x.t("want","generalize");
x.t("want","write");
x.t("want","code");
x.t("want","represent");
x.t("new","mymapping");
x.t("new","classes");
x.t("signature","defines");
x.t("english","method");
x.t("generics","generics");
x.t("generics","collections");
x.t("generics","features");
x.t("generics","non-containers");
x.t("generics","custom");
x.t("generics","useful");
x.t("generics","generalize");
x.t("generics","define");
x.t("generics","works");
x.t("generics","simply");
x.t("generics","using");
x.t("messsage","gosu");
x.t("list","classes");
x.t("manufacturing","process");
x.t("manufacturing","company");
x.t("need","tell");
x.t("need","apis");
x.t("track","vehicles");
x.t("during","production");
x.t("group","guaranteed");
x.t("group","containing");
x.t("add","bracket");
x.t("guide","gosu");
x.t("results","mymap");
x.t("assume","factory");
x.t("api","bounded");
x.t("api","defined");
x.t("api","returns");
x.t("collections","lists");
x.t("collections","containers");
x.t("collections","using");
x.t("features","built-in");
x.t("features","new");
x.t("supporting","generics");
x.t("directly","page");
x.t("writing","program");
x.t("writing","class");
x.t("bracket","notation");
x.t("commas","public");
x.t("text_val.focus","text_val.select");
x.t("no","requirement");
x.t("no","limit");
x.t("no","technical");
x.t("groupofvehicles","factorygroup");
x.t("definition","method");
x.t("definition","class");
x.t("gosu","compiler");
x.t("gosu","generics");
x.t("gosu","reference");
x.t("gosu","relationships");
x.t("typed","results");
x.t("typed","compile");
x.t("non-containers","no");
x.t("custom","container");
x.t("custom","containers");
x.t("argument","factory");
x.t("limit","generics");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("useful","collections");
x.t("alternatively","define");
x.t("accidentally","passing");
x.t("find","coding");
x.t("generalize","supports");
x.t("generalize","class");
x.t("map","class");
x.t("write","something");
x.t("...you","generics");
x.t("...you","instead");
x.t("string","factorygroup");
x.t("string","integer");
x.t("allow","code");
x.t("contain","multiple");
x.t("contain","identical");
x.t("cars","car");
x.t("error","occurred");
x.t("something","stores");
x.t("strongly","typed");
x.t("myfactory","generics");
x.t("myfactory","...you");
x.t("suppose","want");
x.t("suppose","need");
x.t("suppose","writing");
x.t("syntax","public");
x.t("syntax","factorygroup");
x.t("understood","english");
x.t("collection","list");
x.t("collection","classes");
x.t("collection","prevents");
x.t("appears","once");
x.t("fail","compile");
x.t("guidewire_selectall","var");
x.t("function","getlaststepvehicles");
x.t("function","key");
x.t("function","put");
x.t("function","guidewire_selectall");
x.t("car","objects");
x.t("car","factorygroup");
x.t("car","object");
x.t("approach","allow");
x.t("collec","tions");
x.t("dimentions","multiple");
x.t("represents","container");
x.t("define","type");
x.t("define","public");
x.t("define","api");
x.t("define","class");
x.t("different","factories");
x.t("different","types");
x.t("stores","key-value");
x.t("instead","writing");
x.t("instead","define");
x.t("instead","typing");
x.t("step","multi-step");
x.t("multi-step","manufacturing");
x.t("compile","time");
x.t("real-world","example");
x.t("types","collections");
x.t("types","no");
x.t("types","simply");
x.t("types","factorygroup");
x.t("types","separated");
x.t("identical","type");
x.t("wildcards","type");
x.t("abstracted","across");
x.t("purpose","example");
x.t("works","types");
x.t("works","two");
x.t("simply","add");
x.t("simply","define");
x.t("reference","guide");
x.t("derive","root");
x.t("derive","built-in");
x.t("code","need");
x.t("code","assumptions");
x.t("technical","requirement");
x.t("abstract","example");
x.t("vehicle","create");
x.t("vehicle","type");
x.t("vehicle","factorygroup");
x.t("return","values");
x.t("bounded","wildcards");
x.t("dimensionality","generics");
x.t("mymapping","string");
x.t("mymapping","function");
x.t("variable","strongly");
x.t("assumptions","type");
x.t("quickly","want");
x.t("occurred","messsage");
x.t("and/or","return");
x.t("typing","public");
x.t("mymap","new");
x.t("trucks","truck");
x.t("factory","group");
x.t("factory","derive");
x.t("factory","contains");
x.t("value","function");
x.t("value","object");
x.t("factorygroup","method");
x.t("factorygroup","truck");
x.t("factorygroup","objects");
x.t("factorygroup","string");
x.t("factorygroup","contain");
x.t("factorygroup","car");
x.t("factorygroup","factorygroup");
x.t("factorygroup","extends");
x.t("factorygroup","integer");
x.t("factorygroup","van");
x.t("factorygroup","containing");
x.t("factorygroup","using");
x.t("similar","map");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("metaphorically","represents");
x.t("mymap.put","abc");
x.t("perhaps","want");
x.t("process","define");
x.t("extends","vehicle");
x.t("although","gosu");
x.t("represent","type");
x.t("represent","cars");
x.t("represent","types");
x.t("vans","van");
x.t("takes","argument");
x.t("notation","definition");
x.t("page","error");
x.t("dimensions","similar");
x.t("typical","uses");
x.t("appropriate","using");
x.t("29","thevalue");
x.t("production","suppose");
x.t("defined","public");
x.t("letter","appears");
x.t("letter","represent");
x.t("values","definition");
x.t("maps","instead");
x.t("called","factory");
x.t("containers","however");
x.t("containers","generics");
x.t("containers","function");
x.t("containers","although");
x.t("containers","typical");
x.t("classes","example");
x.t("classes","anything");
x.t("classes","purpose");
x.t("integer","fail");
x.t("integer","real-world");
x.t("integer","mymap.put");
x.t("two","dimentions");
x.t("work","differently");
x.t("work","various");
x.t("work","following");
x.t("prevents","coding");
x.t("van","objects");
x.t("van","perhaps");
x.t("van","object");
x.t("following","types");
x.t("relationships","arguments");
x.t("separated","commas");
x.t("using","gosu");
x.t("using","syntax");
x.t("using","approach");
x.t("class","supports");
x.t("class","example");
x.t("class","container");
x.t("class","support");
x.t("class","capital");
x.t("class","supporting");
x.t("class","gosu");
x.t("class","strongly");
x.t("class","myfactory");
x.t("class","abstracted");
x.t("class","works");
x.t("class","vehicle");
x.t("class","mymapping");
x.t("class","myclass");
x.t("containing","truck");
x.t("containing","car");
x.t("containing","vehicle");
x.t("containing","van");
x.t("parallelism","tells");
x.t("company","want");
x.t("vehicles","passed");
x.t("vehicles","within");
x.t("vehicles","last");
x.t("returns","factory");
x.t("returns","vehicles");
x.t("across","multiple");
x.t("myclass","public");
x.t("myclass","instead");
x.t("myclass","work");
x.t("myclass","class");
x.t("var","text_val=eval");
x.t("passing","factorygroup");
x.t("mymap.get","abc");
x.t("object","...you");
x.t("object","function");
x.t("object","derive");
x.t("object","trucks");
x.t("object","value");
x.t("object","vans");
x.t("object","called");
x.t("object","object");
x.t("contains","type");
}
